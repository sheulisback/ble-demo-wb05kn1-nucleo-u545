/**
  ******************************************************************************
  * @file   stm32wb05n_gatt_server.h
  * @author  System Research & Applications Team - Agrate/Catania Lab.
  * @version V1.3.0
  * @date    20-July-2023
  * @brief   Header file for BLE GATT server layer constants
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

#ifndef __GATT_SERVER_H__
#define __GATT_SERVER_H__

#include "compiler.h"
#include "ble_status.h"

/**
 *@addtogroup GATT GATT
 *@{
 */
/**
 *@defgroup GATT_constants GATT Constants
 *@{
 */

/**
 * @anchor Access_permissions
 * @name Access permissions
 * Access permissions for an attribute
 * @{
 */
#define ATTR_NO_ACCESS                             (0x00)
#define ATTR_ACCESS_READ_ONLY                      (0x01) 
#define ATTR_ACCESS_WRITE_REQ_ONLY                 (0x02)
#define ATTR_ACCESS_READ_WRITE                     (0x03)
#define ATTR_ACCESS_WRITE_WITHOUT_RESPONSE         (0x04)
#define ATTR_ACCESS_SIGNED_WRITE_ALLOWED           (0x08)
/**
 * Allows all write procedures
 */
#define ATTR_ACCESS_WRITE_ANY                      (0x0E)
/**
 * @}
 */

/**
 * @anchor Char_properties
 * @name Characteristic properties.
 * @{
 */
#define CHAR_PROP_BROADCAST               (0x01)
#define CHAR_PROP_READ          (0x02)
#define CHAR_PROP_WRITE_WITHOUT_RESP      (0x04)
#define CHAR_PROP_WRITE                     (0x08)
#define CHAR_PROP_NOTIFY              (0x10)
#define CHAR_PROP_INDICATE              (0x20)
#define CHAR_PROP_SIGNED_WRITE                          (0x40)
#define CHAR_PROP_EXT                             (0x80)
/**
 * @}
 */


/**
 * @anchor Security_permissions
 * @name Security permissions for an attribute.
 * @{
 */
#define ATTR_PERMISSION_NONE                       (0x00) /**< No security. */
#define ATTR_PERMISSION_AUTHEN_READ                (0x01) /**< Need authentication to read */
#define ATTR_PERMISSION_AUTHOR_READ                (0x02) /**< Need authorization to read */
#define ATTR_PERMISSION_ENCRY_READ                 (0x04) /**< Link must be encrypted to read */
#define ATTR_PERMISSION_AUTHEN_WRITE               (0x08) /**< Need authentication to write */
#define ATTR_PERMISSION_AUTHOR_WRITE               (0x10) /**< Need authorization to write */
#define ATTR_PERMISSION_ENCRY_WRITE                (0x20) /**< Link must be encrypted for write */
/**
 * @}
 */

/**
 * @anchor UUID_Types
 * @name Type of UUID (16 bit or 128 bit).
 * @{
 */
#define UUID_TYPE_16                               (0x01)
#define UUID_TYPE_128                              (0x02)
/**
 * @}
 */

/**
 * @anchor Service_type
 * @name Type of service (primary or secondary)
 * @{
 */
#define PRIMARY_SERVICE                            (0x01)
#define SECONDARY_SERVICE                          (0x02)
/**
 * @}
 */

/**
 * @anchor Notification_type
 * @name Type of notification
 * @{
 */
#define GATT_NOTIFICATION                          (0x00)
#define GATT_INDICATION                            (0x02)
/**
 * @}
 */

/**
 * @anchor Gatt_Event_Mask
 * @name Gatt Event Mask
 * Type of event generated by GATT server
 * @{
 */
#define GATT_DONT_NOTIFY_EVENTS                       (0x00) /**< Do not notify events. */
#define GATT_NOTIFY_ATTRIBUTE_WRITE                   (0x01) /**< The application will be notified when a client writes to this attribute.
                                                                  An @ref aci_gatt_srv_attribute_modified_event will be issued. */
#define GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP  (0x02) /**< The application will be notified when a write request, a write cmd
                                                                    or a signed write cmd are received by the server for this attribute.*/
#define GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP   (0x04) /**< The application will be notified when a read request of any type is
                                                                  received for this attribute. */
/**
 * @}
 */

/** 
 * @name Type of characteristic length
 * See aci_gatt_add_char()
 * @{
 */
#define CHAR_VALUE_LEN_CONSTANT           (0x00)
#define CHAR_VALUE_LEN_VARIABLE           (0x01)
/**
 * @}
 */


/**
 * @name Encryption key size
 * @{
 */
/**
 * Minimum encryption key size
 */
#define MIN_ENCRY_KEY_SIZE                (7)

/**
 * Maximum encryption key size
 */
#define MAX_ENCRY_KEY_SIZE                (0x10)
/**
 * @}
 */

/**
 * @name Characteristic Presentation Format
 * @{
 */
typedef PACKED(struct) _charactFormat {
    uint8_t format;
    int8_t exp;
    uint16_t unit;
    uint8_t name_space;
    uint16_t desc;
} charactFormat;

/**
 * @}
 */

/**
 * @name Format
 * @{
 */
#define FORMAT_UINT8         0x04
#define FORMAT_UINT16        0x06
#define FORMAT_SINT16        0x0E
#define FORMAT_SINT24        0x0F
/**
 * @}
 */

/**
 * @name Unit
 * @{
 */
#define UNIT_UNITLESS        0x2700
#define UNIT_TEMP_CELSIUS    0x272F
#define UNIT_PRESSURE_BAR    0x2780
/**
 * @}
 */


/**
 * @}
 */
/**
 * @}
 */


/**
 *@addtogroup L2CAP L2CAP
 *@{
 */
/**
 *@addtogroup L2CAP_constants L2CAP Constants
 *@brief Constants for L2CAP layer.
 *@{
 */

/**
 *@name L2CAP Connection Event Type
 *@see aci_l2cap_cfc_connection_event
 *@{
 */
#define L2CAP_CONN_REQ                 0
#define L2CAP_CONN_RESP                1
/**
 *@}
 */

#define L2CAP_CHANNEL_TYPE_LE_CFC 0x00
#define L2CAP_CHANNEL_TYPE_ECFC   0x01

#define L2CAP_CONN_SUCCESSFUL                           0x0000
#define L2CAP_CONN_FAIL_SPSM_NOT_SUPPORTED              0x0002
#define L2CAP_CONN_FAIL_INSUFFICIENT_RESOURCES          0x0004
#define L2CAP_CONN_FAIL_INSUFFICIENT_AUTHENTICATION     0x0005
#define L2CAP_CONN_FAIL_INSUFFICIENT_AUTHORIZATION      0x0006
#define L2CAP_CONN_FAIL_KEY_SIZE_TOO_SHORT              0x0007
#define L2CAP_CONN_FAIL_INSUFFICIENT_ENCRYPTION         0x0008
#define L2CAP_CONN_FAIL_INVALID_SOURCE_CID              0x0009
#define L2CAP_CONN_FAIL_SOURCE_CID_ALREADY_ALLOCATED    0x000A
#define L2CAP_CONN_FAIL_UNACCEPTABLE_PARAMETERS         0x000B
#define L2CAP_CONN_FAIL_INVALID_PARAMETERS              0x000C
#define L2CAP_CONN_FAIL_NO_INFO                         0x000D
#define L2CAP_CONN_FAIL_AUTHENTICATION_PENDING          0x000E
#define L2CAP_CONN_FAIL_AUTHORIZATION_PENDING           0x000F

#define L2CAP_CFC_MANUAL                                0x00
#define L2CAP_CFC_AUTO                                  0x01

/**
 *@}
 */
/**
 *@}
 */



#endif /* __GATT_SERVER_H__ */
