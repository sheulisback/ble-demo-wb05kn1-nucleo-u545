/**
  ******************************************************************************
  * @file    stm32wb05n_gap_aci.h
  * @author  System Research & Applications Team - Agrate/Catania Lab.
  * @version V1.4.0
  * @date    26-July-2024
  * @brief   Header file for external uC - STM32WB05N in network coprocessor
  *          mode (gap_aci). Autogenerated files, do not edit!!
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

#ifndef _STM32WB05N_GAP_ACI_H_
#define _STM32WB05N_GAP_ACI_H_

#include "stm32wb05n_types.h"
#include "stm32wb05n_hci_le.h"

/** Documentation for C struct Bonded_Device_Entry_t */
typedef struct Bonded_Device_Entry_t_s {
  /** Address type.
   *  Values:
   *  - 0x00: Public Device Address
   *  - 0x01: Random Device Address
   */
  uint8_t Address_Type;
  /** Identity Address (Public or Random) of the device.
   */
  uint8_t Address[6];
} Bonded_Device_Entry_t;

/** Documentation for C struct List_Entry_t */
typedef struct List_Entry_t_s {
  /** Address type.
   *  Values:
   *  - 0x00: Public Device Address
   *  - 0x01: Random Device Address
   */
  uint8_t Peer_Address_Type;
  /** Public Device Address or Random Device Address of the device to be added to the
   *  list.
   */
  uint8_t Peer_Address[6];
} List_Entry_t;

/**
 * @brief Initialize the GAP layer.   WARNING: A section of the Flash memory is
 *        used by this procedure. When this section is empty, data are written
 *        inside. This normally happens once during the lifetime of the device,
 *        when the command is executed for the first time (unless the section is
 *        erased). Do not power off the device while this function is writing
 *        into Flash memory.
 * @param Privacy_Type Specify if privacy is enabled or not and which one .
 *        Values:
 *        - 0x00: Privacy disabled
 *        - 0x01: Privacy host enabled
 *        - 0x02: Privacy controller enabled
 * @param Identity_Address_Type Specify which address has to be used as Identity
 *        Address. 0x00: The public address is used as identity address 0x01:
 *        The static random address is used as identity address
 *        Values:
 *        - 0x00: Public Address
 *        - 0x01: Static Random Address
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_init(uint8_t Privacy_Type,
                        uint8_t Identity_Address_Type);
/**
 * @brief Set the IO capabilities of the device. This command cannot be sent
 *        during a pairing procedure.
 * @param IO_Capability IO capability of the device.
 *        Values:
 *        - 0x00: IO_CAP_DISPLAY_ONLY
 *        - 0x01: IO_CAP_DISPLAY_YES_NO
 *        - 0x02: IO_CAP_KEYBOARD_ONLY
 *        - 0x03: IO_CAP_NO_INPUT_NO_OUTPUT
 *        - 0x04: IO_CAP_KEYBOARD_DISPLAY
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability);
/**
 * @brief This command shall be given to set security requirements at device
 *        level. MITM_Mode setting will be used only when responding to an
 *        incoming Peripheral Security Request or Pairing Request received from
 *        peer device.   It is recommended to force the use of Secure
 *        Connections for pairing by using Secure Connections Only Mode, since
 *        it is the only way to protect the pairing from passive eavesdropping.
 *        The Pairing_Response parameter is used to control the way a pairing is
 *        accepted. If set to 0 (pairing response not required), pairing is
 *        always accepted, even for bonded devices, and no user interaction is
 *        required, since the response is automatically handled by the Stack
 *        Library.  If set to 1 (pairing response required for bonded devices
 *        only), the pairing is automatically accepted (no user interaction)
 *        except when the request comes from an already bonded device; in this
 *        case aci_gap_pairing_event is notified and the application has to give
 *        a confirmation through aci_gap_pairing_resp to accept the request to
 *        rebond. If Pairing_Response is set to 2 (explicit pairing response) a
 *        pairing confirmation is always required since aci_gap_pairing_event is
 *        always raised when a Pairing Request from a Central or a Peripheral
 *        Security Request form a Peripheral is received.   If the command is
 *        given during pairing, the command returns BLE_STATUS_NOT_ALLOWED.  The
 *        command returns BLE_STATUS_INVALID_PARAMS if some of the parameters
 *        are out of admitted range. If KeyPress_Notification_Support is set to
 *        1 but Secure Connection feature is not supported,
 *        BLE_ERROR_UNSUPPORTED_FEATURE is returned.
 * @param Bonding_Mode Bonding mode. Only if bonding is enabled (0x01), the
 *        bonding information is stored in flash
 *        Values:
 *        - 0x00: NO_BONDING
 *        - 0x01: BONDING
 * @param MITM_Mode MITM mode.
 *        Values:
 *        - 0x00: MITM_PROTECTION_NOT_REQUIRED
 *        - 0x01: MITM_PROTECTION_REQUIRED
 * @param SC_Support LE Secure connections support. Secure Connections Only Mode
 *        (0x02) is the recommended value. However it is no compatible with old
 *        devices not supporting LE Secure Connections. - 0x00: Secure
 *        Connections Pairing not supported. - 0x01: Secure Connections Pairing
 *        supported but optional. - 0x02: Secure Connections Pairing supported
 *        and mandatory (SC Only Mode). This is the recommended value.
 *        Values:
 *        - 0x00: SC_IS_NOT_SUPPORTED
 *        - 0x01: SC_IS_SUPPORTED
 *        - 0x02: SC_IS_MANDATORY
 * @param KeyPress_Notification_Support Keypress notification support
 *        Values:
 *        - 0x00: KEYPRESS_IS_NOT_SUPPORTED
 *        - 0x01: KEYPRESS_IS_SUPPORTED
 * @param Min_Encryption_Key_Size Minimum encryption key size to be used during
 *        pairing
 *        Values:
 *        - 7 ... 16
 * @param Max_Encryption_Key_Size Maximum encryption key size to be used during
 *        pairing
 *        Values:
 *        - 7 ... 16
 * @param Pairing_Response This parameter controls how pairing confirmation is
 *        managed.
 *        Values:
 *        - 0x00: GAP_PAIRING_RESP_NONE
 *        - 0x01: GAP_PAIRING_RESP_FOR_BONDED_DEVICES
 *        - 0x02: GAP_PAIRING_RESP_FOR_ALL
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_set_security_requirements(uint8_t Bonding_Mode,
                                             uint8_t MITM_Mode,
                                             uint8_t SC_Support,
                                             uint8_t KeyPress_Notification_Support,
                                             uint8_t Min_Encryption_Key_Size,
                                             uint8_t Max_Encryption_Key_Size,
                                             uint8_t Pairing_Response);
/**
 * @brief This command should be send by the host in response to @ref
 *        aci_gap_passkey_req_event event. The command parameter contains the
 *        pass key which will be used during the pairing process.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Passkey Pass key that will be used during the pairing process.  Must
 *        be a six-digit decimal number.
 *        Values:
 *        - 0 ... 999999
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_passkey_resp(uint16_t Connection_Handle,
                                uint32_t Passkey);
/**
 * @brief Register the GAP service with the GATT. This command should be called
 *        after aci_gap_init command. Standard characteristics will be added to
 *        the GAP service depending on the specified role.
 * @param Role Bitmap of allowed roles. Ignored in stack v3.2 and earlier.
 *        Flags:
 *        - 0x01: Peripheral
 *        - 0x02: Broadcaster
 *        - 0x04: Central
 *        - 0x08: Observer
 * @param Privacy_Type Specify if privacy is enabled or not and which one .
 *        Values:
 *        - 0x00: Privacy disabled
 *        - 0x01: Privacy host enabled
 *        - 0x02: Privacy controller enabled
 * @param[out] Dev_Name_Char_Handle Device Name Characteristic handle
 * @param[out] Appearance_Char_Handle Appearance Characteristic handle
 * @param[out] Periph_Pref_Conn_Param_Char_Handle Appearance Characteristic
 *             handle
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_profile_init(uint8_t Role,
                                uint8_t Privacy_Type,
                                uint16_t *Dev_Name_Char_Handle,
                                uint16_t *Appearance_Char_Handle,
                                uint16_t *Periph_Pref_Conn_Param_Char_Handle);
/**
 * @brief This command sets the security level for the given connection (LE
 *        security mode 1), by enabling encryption if needed. It will just
 *        enable encryption on the link if the peer is bonded with at least the
 *        specified security level. Otherwise, it will start a pairing with the
 *        peer device. This command may be given either on a Central or on a
 *        Peripheral device.  The Security_Level indicates the minimum Security
 *        Level to be achieved: 1 for no security (no authentication or
 *        encryption), 2 for unauthenticated pairing with encryption, 3 for
 *        authenticated pairing with encryption, 4 for authenticated LE Secure
 *        Connections pairing with encryption using a 128-bit strength
 *        encryption key.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Security_Level Indicates the minimum Security Level to be achieved.
 *        Values:
 *        - 0x01: GAP_SECURITY_LEVEL_1
 *        - 0x02: GAP_SECURITY_LEVEL_2
 *        - 0x03: GAP_SECURITY_LEVEL_3
 *        - 0x04: GAP_SECURITY_LEVEL_4
 * @param Force_Pairing Valid only for Central role. Ignored if role is
 *        Peripheral.  The bit b0 indicates whether pairing request has to be
 *        sent even if the peer device is bonded.   The bit b1 indicates whether
 *        the link has to be re-encrypted after the key exchange.
 *        Flags:
 *        - 0x01: FORCE_PAIRING
 *        - 0x02: ENCRYPT_AFTER_KEY_EXCHANGE
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_set_security(uint16_t Connection_Handle,
                                uint8_t Security_Level,
                                uint8_t Force_Pairing);
/**
 * @brief This command can be used to get the current security settings of the
 *        device.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param[out] Security_Mode Security mode.
 *             Values:
 *             - 0x01: Security Mode 1
 *             - 0x02: Security Mode 2
 * @param[out] Security_Level Security Level.
 *             Values:
 *             - 0x01: Security Level 1
 *             - 0x02: Security Level 2
 *             - 0x03: Security Level 3
 *             - 0x04: Security Level 4
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_get_security_level(uint16_t Connection_Handle,
                                      uint8_t *Security_Mode,
                                      uint8_t *Security_Level);
/**
 * @brief
 * @param LE_Event_Mask LE event mask. Default: 0x000000000000001F.
 *        Flags:
 *        - 0x0000000000000000: No LE events specified
 *        - 0x0000000000000001: LE Connection Complete Event
 *        - 0x0000000000000002: LE Advertising Report Event
 *        - 0x0000000000000004: LE Connection Update Complete Event
 *        - 0x0000000000000008: LE Read Remote Used Features Complete Event
 *        - 0x0000000000000010: LE Long Term Key Request Event
 *        - 0x0000000000000020: LE Remote Connection Parameter Request Event
 *        - 0x0000000000000040: LE Data Length Change Event
 *        - 0x0000000000000080: LE Read Local P-256 Public Key Complete Event
 *        - 0x0000000000000100: LE Generate DHKey Complete Event
 *        - 0x0000000000000200: LE Enhanced Connection Complete Event
 *        - 0x0000000000000400: LE Directed Advertising Report Event
 *        - 0x0000000000000800: LE PHY Update Complete event
 *        - 0x0000000000001000: LE Extended Advertising Report event
 *        - 0x0000000000002000: LE Periodic Advertising Sync Established event
 *        - 0x0000000000004000: LE Periodic Advertising Report event
 *        - 0x0000000000008000: LE Periodic Advertising Sync Lost event
 *        - 0x0000000000010000: LE Scan Timeout event
 *        - 0x0000000000020000: LE Advertising Set Terminated event
 *        - 0x0000000000040000: LE Scan Request Received event
 *        - 0x0000000000080000: LE Channel Selection Algorithm event
 *        - 0x0000000000100000: LE Connectionless IQ Report event
 *        - 0x0000000000200000: LE Connection IQ Report event
 *        - 0x0000000000400000: LE CTE Request Failed event
 *        - 0x0000000000800000: LE Periodic Advertising Sync Transfer Received event
 *        - 0x0000000001000000: LE CIS Established event
 *        - 0x0000000002000000: LE CIS Request event
 *        - 0x0000000004000000: LE Create BIG Complete event
 *        - 0x0000000008000000: LE Terminate BIG Complete event
 *        - 0x0000000010000000: LE BIG Sync Established event
 *        - 0x0000000020000000: LE BIG Sync Lost event
 *        - 0x0000000040000000: LE Request Peer SCA Complete event
 *        - 0x0000000080000000: LE Path Loss Threshold event
 *        - 0x0000000100000000: LE Transmit Power Reporting event
 *        - 0x0000000200000000: LE BIGInfo Advertising Report event
 *        - 0x0000000400000000: LE Subrate Change event
 *        - 0x0000000800000000: LE Periodic Advertising Sync Established event [v2]
 *        - 0x0000001000000000: LE Periodic Advertising Report event [v2]
 *        - 0x0000002000000000: LE Periodic Advertising Sync Transfer Received event [v2]
 *        - 0x0000004000000000: LE Periodic Advertising Subevent Data Request event
 *        - 0x0000008000000000: LE Periodic Advertising Response Report event
 *        - 0x0000010000000000: LE Enhanced Connection Complete event [v2]
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_set_le_event_mask(uint8_t LE_Event_Mask[8]);
/**
 * @brief Command the controller to terminate the connection. A @ref
 *        hci_disconnection_complete_event will be generated when the link is
 *        disconnected. After this event is received, the Bluetooth stack may
 *        request to save GATT database information in non-volatile memory. So
 *        it is important not to reset or power off the system immediately after
 *        @ref hci_disconnection_complete_event is received. This operation is
 *        normally completed within less than few milliseconds.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Reason The reason for ending the connection.
 *        Values:
 *        - 0x05: Authentication Failure
 *        - 0x13: Remote User Terminated Connection
 *        - 0x14: Remote Device Terminated Connection due to Low Resources
 *        - 0x15: Remote Device Terminated Connection due to Power Off
 *        - 0x1A: Unsupported Remote Feature
 *        - 0x3B: Unacceptable Connection Parameters
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_terminate(uint16_t Connection_Handle,
                             uint8_t Reason);
/**
 * @brief Clear the security database. All the devices in the security database
 *        will be removed. ATTENTION: It is strongly recommended not to give
 *        this command during intense radio activity (e.g. during advertising or
 *        connection with short intervals, i.e. less than 30 ms, or during
 *        scanning), since it will trigger an erase of a Flash sector. After
 *        this command, all devices previously recorded in the bonding table and
 *        connected when command has been submitted will remain connected,
 *        preserving authentication and encryption of the link. Note also that
 *        devices are not removed from filter accept and resolving lists.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_clear_security_db(void);
/**
 * @brief This command shall be given in response to an aci_gap_paring_event, to
 *        allow or reject either the pairing request from the Central or the
 *        security request from the Peripheral.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Accept
 *        Values:
 *        - 0x00: REJECT
 *        - 0x01: ACCEPT
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_pairing_resp(uint16_t Connection_Handle,
                                uint8_t Accept);
/**
 * @brief Creates a direct connection to a device.
 * @param Initiating_PHY PHYs that will be used for initiating the connection.
 *        Flags:
 *        - 0x01: LE_1M_PHY_BIT
 *        - 0x04: LE_CODED_PHY_BIT
 * @param Peer_Address_Type The Peer_Address_Type parameter indicates the type
 *        of address used in the connectable advertisement sent by the peer. 0:
 *        Public Device Address or Public Identity Address 1: Random Device
 *        Address or Random (static) Identity Address
 *        Values:
 *        - 0x00: Public Address
 *        - 0x01: Random Address
 * @param Peer_Address Public Device Address, Random Device Address, Public
 *        Identity Address, or Random (static) Identity Address of the device to
 *        be connected.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_create_connection(uint8_t Initiating_PHY,
                                     uint8_t Peer_Address_Type,
                                     uint8_t Peer_Address[6]);
/**
 * @brief Terminate the specified GAP procedure. An @ref
 *        aci_gap_proc_complete_event event is generated when the procedure has
 *        been completed, with the procedure code set to the corresponding
 *        procedure.
 * @param Procedure_Code Code identifying the procedure.
 *        Values:
 *        - 0x00: GAP_LIMITED_DISCOVERY_PROC
 *        - 0x01: GAP_GENERAL_DISCOVERY_PROC
 *        - 0x02: GAP_AUTO_CONNECTION_ESTABLISHMENT_PROC
 *        - 0x03: GAP_GENERAL_CONNECTION_ESTABLISHMENT_PROC
 *        - 0x04: GAP_SELECTIVE_CONNECTION_ESTABLISHMENT_PROC
 *        - 0x05: GAP_OBSERVATION_PROC
 *        - 0x06: GAP_DIRECT_CONNECTION_ESTABLISHMENT_PROC
 *        - 0x07: GAP_NAME_DISCOVERY_PROC
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_terminate_proc(uint8_t Procedure_Code);
/**
 * @brief Start the connection update procedure (only when role is Central). A
 *        @ref hci_le_connection_update is called. On completion of the
 *        procedure, an @ref hci_le_connection_update_complete_event event is
 *        returned to the upper layer.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Connection_Interval_Min Minimum value for the connection event
 *        interval. This shall be less than or equal to Connection_Interval_Max.
 *        Time = N * 1.25 msec.
 *        Values:
 *        - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms) 
 * @param Connection_Interval_Max Maximum value for the connection event
 *        interval. This shall be greater than or equal to
 *        Connection_Interval_Min. Time = N * 1.25 msec.
 *        Values:
 *        - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms) 
 * @param Max_Latency Maximum Peripheral latency for the connection in number of
 *        connection events.
 *        Values:
 *        - 0x0000 ... 0x01F3
 * @param Supervision_Timeout Supervision timeout for the LE Link. It shall be a
 *        multiple of 10 ms and larger than (1 + connPeripheralLatency) *
 *        connInterval * 2. Time = N * 10 msec.
 *        Values:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @param Min_CE_Length The minimum length of connection event recommended for
 *        this LE connection. Time = N * 0.625 msec.
 * @param Max_CE_Length The maximum length of connection event recommended for
 *        this LE connection. Time = N * 0.625 msec.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_start_connection_update(uint16_t Connection_Handle,
                                           uint16_t Connection_Interval_Min,
                                           uint16_t Connection_Interval_Max,
                                           uint16_t Max_Latency,
                                           uint16_t Supervision_Timeout,
                                           uint16_t Min_CE_Length,
                                           uint16_t Max_CE_Length);
/**
 * @brief This command tries to resolve the address provided with the IRKs
 *        present in its database. If the address is resolved successfully with
 *        any one of the IRKs present in the database, it returns success and
 *        also the corresponding public/static random address stored with the
 *        IRK in the database.
 * @param Address Address to be resolved
 * @param[out] Actual_Address The public or static random address of the peer
 *             device, distributed during pairing phase.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_resolve_private_addr(uint8_t Address[6],
                                        uint8_t Actual_Address[6]);
/**
 * @brief This command returns the identity addresses of the bonded devices.
 * @param Offset Index of the first record to be returned.
 * @param Max_Num_Of_Addresses Used to specify the maximum number of devices to
 *        be returned.
 * @param[out] Num_of_Addresses The number of bonded devices returned by this
 *             command.
 * @param[out] Bonded_Device_Entry See @ref Bonded_Device_Entry_t
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_get_bonded_devices(uint8_t Offset,
                                      uint8_t Max_Num_Of_Addresses,
                                      uint8_t *Num_of_Addresses,
                                      Bonded_Device_Entry_t Bonded_Device_Entry[]);
/**
 * @brief The command finds whether the device, whose address is specified in
 *        the command, is bonded. If the device is using a resolvable private
 *        address and it has been bonded, then the command will return
 *        BLE_STATUS_SUCCESS.
 * @param Peer_Address_Type Address type.
 *        Values:
 *        - 0x00: Public Device Address
 *        - 0x01: Random Device Address
 * @param Peer_Address Address used by the peer device while advertising
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_is_device_bonded(uint8_t Peer_Address_Type,
                                    uint8_t Peer_Address[6]);
/**
 * @brief This command allows the User to validate/confirm or not the Numeric
 *        Comparison value showed through the
 *        ACI_GAP_Numeric_Comparison_Value_Event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Confirm_Yes_No 0 : The Numeric Values showed on both local and peer
 *        device are different! 1 : The Numeric Values showed on both local and
 *        peer device are equal!
 *        Values:
 *        - 0x00: No
 *        - 0x01: YES
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_numeric_comparison_value_confirm_yesno(uint16_t Connection_Handle,
                                                          uint8_t Confirm_Yes_No);
/**
 * @brief This command permits to signal to the Stack the input type detected
 *        during Passkey input.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Input_Type Passkey input type detected
 *        Values:
 *        - 0x00: Passkey entry started
 *        - 0x01: Passkey digit entered
 *        - 0x02: Passkey digit erased
 *        - 0x03: Passkey cleared
 *        - 0x04: Passkey entry completed
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_passkey_input(uint16_t Connection_Handle,
                                 uint8_t Input_Type);
/**
 * @brief This command can be used to get the local OOB authentication for LE
 *        Secure connections or the remote Temporary Key for Legacy Pairing set
 *        through aci_gap_set_oob_data(). This command is particularly useful in
 *        case of LE Secure Connections to retrieve the local OOB data generated
 *        with aci_gap_set_oob_data(). This data should then be sent to the peer
 *        through the OOB channel.
 * @param OOB_Data_Type OOB Data type. - 0x00: Legacy Pairing (LP) v.4.1 TK
 *        (Temporary Key) - 0x01: Secure Connections (SC) v.4.2 Random value r
 *        used for generation of Confirm value - 0x02: Secure Connections (SC)
 *        v.4.2 Confirm value C generated through AES-CMAC-128 based
 *        cryptographic function: C=f4(PKx, PKx, r, 0)
 *        Values:
 *        - 0x00: SM_TK
 *        - 0x01: SM_RANDOM_VALUE
 *        - 0x02: SM_CONFIRM_VALUE
 * @param[out] Address_Type Identity address type.
 *             Values:
 *             - 0x00: Public Identity Address
 *             - 0x01: Random (static) Identity Address
 * @param[out] Address Public or Random (static) address of this device
 * @param[out] OOB_Data_Len Length of OOB Data carried by next data field
 * @param[out] OOB_Data OOB Data to be exported via OOB.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_get_oob_data(uint8_t OOB_Data_Type,
                                uint8_t *Address_Type,
                                uint8_t Address[6],
                                uint8_t *OOB_Data_Len,
                                uint8_t OOB_Data[16]);
/**
 * @brief This command can be used to input the Authentication data exchanged
 *        via OOB channel: either local authentication data to be sent to the
 *        peer device through the OOB channel or the peer device authentication
 *        data received through OOB channel. Moreover, it can also be used to
 *        generate authentication data for LE Secure Connections.  Device_Type
 *        must be set to 0x00 (Local Device) to provide or generate local
 *        authentication data that will be sent to the peer through OOB channel.
 *        In this case Address_Type and Address parameters are ignored. With
 *        Device_Type=0 and OOB_Data_Len=0x00, OOB_Data_Type is ignored and the
 *        command triggers an automatic generation of OOB Authentication data r
 *        and C (that can be read with aci_gap_get_oob_data()), used for Secure
 *        Connections, otherwise the OOB_Data carried by the command will
 *        overwrite the current local authentication OOB Data. To generate OOB
 *        authentication data, the stack requires the availability of the local
 *        Public Key, to be previously generated with
 *        hci_le_read_local_p256_public_key command.  When peer authentication
 *        data are received through OOB channel for either Legacy Pairing or
 *        Secure Connections, aci_gap_set_oob_data() must be called with
 *        Device_Type set to 0x01 (Remote Device): the command will set the OOB
 *        data for the specified remote device (only one device at a time is
 *        supported).  For Legacy pairing, the TK must be provided as both local
 *        and remote data.
 * @param Device_Type If Device_Type is 0x00 (Local Device), it sets the local
 *        OOB authentication data. If Device_Type is 0x01 (Remote Device), the
 *        command sets the OOB data for the specified remote device (only one
 *        device at a time is supported).
 *        Values:
 *        - 0x00: Local device
 *        - 0x01: Remote device
 * @param Address_Type Identity address type of the remote device. Ignored if
 *        Device_Type is 0.
 *        Values:
 *        - 0x00: Public Identity Address
 *        - 0x01: Random (static) Identity Address
 * @param Address Public or Random (static) address of the peer device. Ignored
 *        if Device_Type is 0.
 * @param OOB_Data_Type OOB Data type. - 0x00: Legacy Pairing (LP) v.4.1 TK
 *        (Temporary Key) - 0x01: Secure Connections (SC) v.4.2 Random value r
 *        used for generation of Confirm value - 0x02: Secure Connections (SC)
 *        v.4.2 Confirm value C generated through AES-CMAC-128 based
 *        cryptographic function: C=f4(PKx, PKx, r, 0)
 *        Values:
 *        - 0x00: SM_TK
 *        - 0x01: SM_RANDOM_VALUE
 *        - 0x02: SM_CONFIRM_VALUE
 * @param OOB_Data_Len Length of OOB Data carried by next data field. It may be
 *        set to 0x00 to trigger the automatic generation of local Random and
 *        Confirm values for LE Secure Connections pairing.
 *        Values:
 *        - 0x00 ... 0x10
 * @param OOB_Data OOB Data to be exported via OOB.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_set_oob_data(uint8_t Device_Type,
                                uint8_t Address_Type,
                                uint8_t Address[6],
                                uint8_t OOB_Data_Type,
                                uint8_t OOB_Data_Len,
                                uint8_t OOB_Data[16]);
/**
 * @brief This command can be used to remove a specified device from the bonding
 *        table. ATTENTION: the device removed from the Bonding Table will
 *        preserve its connection and authentication, until explicit
 *        disconnection is requested by the user.
 * @param Peer_Identity_Address_Type Identity address type.
 *        Values:
 *        - 0x00: Public Identity Address
 *        - 0x01: Random (static) Identity Address
 * @param Peer_Identity_Address Public or Random (static) Identity address of
 *        the peer device
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_remove_bonded_device(uint8_t Peer_Identity_Address_Type,
                                        uint8_t Peer_Identity_Address[6]);
/**
 * @brief This commands configures the advertising parameters for the legacy
 *        advertising or for a given extended advertising set. For general or
 *        limited discoverable mode or connectable advertising, Flags AD type
 *        must be present in advertising data. See also Bluetooth Core
 *        specifications, Vol. 4, part E, section 7.8.53 (LE Set Extended
 *        Advertising Parameters command).
 * @param Advertising_Handle Used to identify an advertising set. This parameter
 *        is only meaningful if Extended Advertising Feature is enabled.
 *        Values:
 *        - 0x00 ... 0xEF
 * @param Discoverable_Mode Specifies the discoverable mode of the device.
 *        Values:
 *        - 0: Not Discoverable
 *        - 1: Limited Discoverable
 *        - 2: General Discoverable
 *        - 3: Broadcast
 * @param Advertising_Event_Properties The Advertising_Event_Properties
 *        parameter describes the type of advertising event that is being
 *        configured and its basic properties according to V5.1, Vol 2, Part E,
 *        section 7.8.53.
 *        Flags:
 *        - 0x0001: Connectable
 *        - 0x0002: Scannable
 *        - 0x0004: Directed
 *        - 0x0008: High Duty Cycle Directed Connectable
 *        - 0x0010: Legacy
 *        - 0x0020: Anonymous
 *        - 0x0040: Include TX Power
 * @param Primary_Advertising_Interval_Min Minimum advertising interval for
 *        undirected and low duty cycle directed advertising. Time = N * 0.625
 *        msec.
 *        Values:
 *        - 0x00000020 (20.000 ms)  ... 0x00FFFFFF (10485759.375 ms) 
 * @param Primary_Advertising_Interval_Max Maximum advertising interval for
 *        undirected and low duty cycle directed advertising. Time = N * 0.625
 *        msec.
 *        Values:
 *        - 0x00000020 (20.000 ms)  ... 0x00FFFFFF (10485759.375 ms) 
 * @param Primary_Advertising_Channel_Map It is a bit field that indicates the
 *        advertising channels that shall be used when transmitting advertising
 *        packets.
 *        Flags:
 *        - 0x01: CH_37
 *        - 0x02: CH_38
 *        - 0x04: CH_39
 * @param Peer_Address_Type The peer address type.
 *        Values:
 *        - 0x00: Public
 *        - 0x01: Random
 * @param Peer_Address Public Device Address, Random Device Address, Public
 *        Identity Address, or Random (static) Identity Address of the device to
 *        be connected.
 * @param Advertising_Filter_Policy Advertising Filter Policy. If Directed
 *        advertising is selected, the Peer_Address_Type and Peer_Address shall
 *        be valid and the Advertising_Filter_Policy parameter shall be ignored.
 *        0x00 Process scan and connection requests from all devices (i.e., the
 *        Filter Accept List is not in use) 0x01 Process connection requests
 *        from all devices and scan requests only from devices that are in the
 *        Filter Accept List 0x02 Process scan requests from all devices and
 *        connection requests only from devices that are in the Filter Accept
 *        List. 0x03 Process scan and connection requests only from devices in
 *        the Filter Accept List. All other values Reserved for future use
 *        Values:
 *        - 0x00: Scan and Connection requests from any
 *        - 0x01: Connection requests from any, scan requests from Filter Accept List only
 *        - 0x02: Scan requests from any, connection requests from Filter Accept List only
 *        - 0x03: Scan and connection requests from Filter Accept List only
 * @param Advertising_Tx_Power The Advertising_Tx_Power parameter indicates the
 *        maximum power level at which the advertising packets are to be
 *        transmitted on the advertising channels. The Controller shall choose a
 *        power level lower than or equal to the one specified by the Host.
 *        (Units: dBm). This parameter is ignored if extended advertising is not
 *        enabled.
 *        Values:
 *        - -127 ... 126
 *        - 127: No preference
 * @param Primary_Advertising_PHY The Primary_Advertising_PHY parameter
 *        indicates the PHY on which the advertising packets are transmitted on
 *        the primary advertising channel. If legacy advertising PDUs are being
 *        used, the Primary_Advertising_PHY shall indicate the LE 1M PHY. This
 *        parameter is ignored if extended advertising is not enabled.
 *        Values:
 *        - 0x01: LE_1M_PHY
 *        - 0x03: LE_CODED_PHY
 * @param Secondary_Advertising_Max_Skip The Secondary_Advertising_Max_Skip
 *        parameter is the maximum number of advertising events that can be
 *        skipped before the AUX_ADV_IND can be sent. This parameter is ignored
 *        if extended advertising is not enabled. 0x00 AUX_ADV_IND shall be sent
 *        prior to the next advertising event 0x01-0xFF Maximum advertising
 *        events the Controller can skip before sending the AUX_ADV_IND packets
 *        on the secondary advertising channel
 * @param Secondary_Advertising_PHY The Secondary_Advertising_PHY parameter
 *        indicates the PHY on which the advertising packets are be transmitted
 *        on the secondary advertising channel. This parameter is ignored if
 *        extended advertising is not enabled.
 *        Values:
 *        - 0x01: LE_1M_PHY
 *        - 0x02: LE_2M_PHY
 *        - 0x03: LE_CODED_PHY
 * @param Advertising_SID The Advertising_SID parameter specifies the value to
 *        be transmitted in the Advertising SID subfield of the ADI field of the
 *        Extended Header of those advertising channel PDUs that have an ADI
 *        field. If the advertising set only uses PDUs that do not contain an
 *        ADI field, Advertising_SID is ignored. This parameter is ignored if
 *        extended advertising is not enabled.
 *        Values:
 *        - 0x00 ... 0x0F
 * @param Scan_Request_Notification_Enable The Scan_Request_Notification_Enable
 *        parameter indicates whether the Controller shall send notifications
 *        upon the receipt of a scan request PDU that is in response to an
 *        advertisement from the specified advertising set that contains its
 *        device address and is from a scanner that is allowed by the
 *        advertising filter policy. This parameter is ignored if extended
 *        advertising is not enabled.
 *        Values:
 *        - 0x00: Scan request notifications disabled
 *        - 0x01: Scan request notifications enabled
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_set_advertising_configuration(uint8_t Advertising_Handle,
                                                 uint8_t Discoverable_Mode,
                                                 uint16_t Advertising_Event_Properties,
                                                 uint32_t Primary_Advertising_Interval_Min,
                                                 uint32_t Primary_Advertising_Interval_Max,
                                                 uint8_t Primary_Advertising_Channel_Map,
                                                 uint8_t Peer_Address_Type,
                                                 uint8_t Peer_Address[6],
                                                 uint8_t Advertising_Filter_Policy,
                                                 int8_t Advertising_Tx_Power,
                                                 uint8_t Primary_Advertising_PHY,
                                                 uint8_t Secondary_Advertising_Max_Skip,
                                                 uint8_t Secondary_Advertising_PHY,
                                                 uint8_t Advertising_SID,
                                                 uint8_t Scan_Request_Notification_Enable);
/**
 * @brief This command is used to request the Controller to enable or disable
 *        one or more advertising sets using the advertising sets identified by
 *        the Advertising_Handle[i] parameter. The Controller manages the timing
 *        of advertisements in accordance with the advertising parameters given
 *        with @ref aci_gap_set_advertising_configuration command. Only the
 *        Enable parameter is used if extended advertising feature is disabled
 *        through modular configuration (CONTROLLER_EXT_ADV_SCAN_ENABLED=0),
 *        others are ignored. The command returns an error if adverting data are
 *        not set properly, according to the used discoverable mode: Flags AD
 *        type may be required (see @ref aci_gap_set_advertising_data). An error
 *        is also returned if either the length of advertising data is greater
 *        than 245 octets and advertising type is connectable, or if no scan
 *        response data is set and advertising type is scannable. See also
 *        Bluetooth Core specifications, Vol. 4, part E, section 7.8.56 (LE Set
 *        Extended Advertising Enable command).
 * @param Enable It allows to enable or disable one or more advertising sets
 *        using the advertising sets identified by the Advertising_Handle[i]
 *        parameter.
 *        Values:
 *        - 0x00: Disable
 *        - 0x01: Enable
 * @param Number_of_Sets The Number_of_Sets parameter is the number of
 *        advertising sets contained in the parameter arrays. 0x00: Disable all
 *        advertising sets 0x01 to 0x3F: Number of advertising sets to enable or
 *        disable. Ignored if extended advertising feature is disabled through
 *        modular configuration (CONTROLLER_EXT_ADV_SCAN_ENABLED=0).
 *        Values:
 *        - 0x00: Disable all sets
 *        - 0x01 ... 0x3F
 * @param Advertising_Set_Parameters See @ref Advertising_Set_Parameters_t
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_set_advertising_enable(uint8_t Enable,
                                          uint8_t Number_of_Sets,
                                          Advertising_Set_Parameters_t Advertising_Set_Parameters[]);
/**
 * @brief The ACI_GAP_SET_ADVERTISING_DATA_NWK function is used to set the data
 *        in advertising PDUs.  If the device is in Limited Discoverable Mode,
 *        Flags data type in advertising data must have the flags set as
 *        described: - The LE Limited Discoverable Mode flag set to one. - The
 *        'BR/EDR Not Supported' flag set to one. - All other flags set to zero.
 *        If the device is in General Discoverable Mode, Flags data type in
 *        advertising data must have the flags set as described: - The LE
 *        General Discoverable Mode flag set to one. - The 'BR/EDR Not
 *        Supported' flag set to one. - All other flags set to zero.  If the
 *        device is in one of the other modes, Flags data type in advertising
 *        data must have the flags set as described: - The 'BR/EDR Not
 *        Supported' flag set to one. - All other flags set to zero. In this
 *        case (none of the discoverable modes is used), Flags data type may be
 *        omitted in advertising data if a device is sending non connectable
 *        events, otherwise it must be present.  Length of advertising data is
 *        also limited to 245 octets in case of connectable advertising. For
 *        non-legacy PDUs, length of advertising data is limited to 245 octets
 *        in case of connectable advertising and cannot be present for scannable
 *        advertising. See also Bluetooth Core specifications, Vol. 4, part E,
 *        section 7.8.54 (LE Set Extended Advertising Data command).
 * @param Advertising_Handle Used to identify an advertising set. This parameter
 *        is only meaningful if Extended Advertising Feature is enabled.
 *        Values:
 *        - 0x00 ... 0xEF
 * @param Operation The Host may set the advertising data in one or more
 *        operations using this parameter. 0x00: Intermediate fragment of
 *        fragmented extended advertising data 0x01: First fragment of
 *        fragmented extended advertising data 0x02: Last fragment of fragmented
 *        extended advertising data 0x03: Complete extended advertising data
 *        0x04: Unchanged data (just update the Advertising DID) All other
 *        values: Reserved for future use
 *        Values:
 *        - 0x00: Intermediate fragment
 *        - 0x01: First fragment
 *        - 0x02: Last fragment
 *        - 0x03: Complete data
 *        - 0x04: Unchanged data
 * @param Advertising_Data_Length Length of advertising data. For legacy PDUs
 *        which supports advertising data maximum value is 31 octets.
 *        Values:
 *        - 0 ... 251
 * @param Advertising_Data Advertising data, that must be properly formatted
 *        (see Core v5.1 Vol 3, part C, chapter 11).
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_set_advertising_data_nwk(uint8_t Advertising_Handle,
                                            uint8_t Operation,
                                            uint8_t Advertising_Data_Length,
                                            uint8_t Advertising_Data[]);
/**
 * @brief The ACI_GAP_SET_SCAN_RESPONSE_DATA function configures the scan
 *        response data as requested by the application.
 * @param Advertising_Handle Used to identify an advertising set. This parameter
 *        is only meaningful if Extended Advertising Feature is enabled.
 *        Values:
 *        - 0x00 ... 0xEF
 * @param Operation The Host may set the scan response data in one or more
 *        operations using the Operation parameter in the command. 0x00:
 *        Intermediate fragment of fragmented scan response data 0x01: First
 *        fragment of fragmented scan response data 0x02: Last fragment of
 *        fragmented scan response data 0x03: Complete scan response data All
 *        other values: Reserved for future use
 *        Values:
 *        - 0x00: Intermediate fragment
 *        - 0x01: First fragment
 *        - 0x02: Last fragment
 *        - 0x03: Complete data
 * @param Scan_Response_Data_Length Length of scan response data. If the
 *        advertising set uses scannable legacy advertising PDUs maximum length
 *        is 31 octets.
 *        Values:
 *        - 0 ... 251
 * @param Scan_Response_Data Scan response data, that must be properly formatted
 *        (see Core v5.1 Vol 3, part C, chapter 11).
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_set_scan_response_data_nwk(uint8_t Advertising_Handle,
                                              uint8_t Operation,
                                              uint8_t Scan_Response_Data_Length,
                                              uint8_t Scan_Response_Data[]);
/**
 * @brief The ACI_GAP_SET_SCAN_CONFIGURATION function configures the scan
 *        parameters for a given PHY. To configure more than one PHY, this
 *        function must be called more times.
 * @param Filter_Duplicates The Filter_Duplicates parameter controls whether the
 *        Link Layer should filter out duplicate advertising reports (filtering
 *        duplicates enabled) to the Host or if the Link Layer should generate
 *        advertising reports for each packet received (filtering duplicates
 *        disabled). See [Vol 6] Part B, Section 4.4.3.5.
 *        Values:
 *        - 0x00: Duplicate filtering disabled
 *        - 0x01: Duplicate filtering enabled
 *        - 0x02: Duplicate filtering enabled, reset for each scan period
 * @param Scanning_Filter_Policy 0x00 Accept all advertisement packets. Directed
 *        advertising packets which are not addressed for this device shall be
 *        ignored. 0x01 Ignore advertisement packets from devices not in the
 *        Filter Accept List Only. Directed advertising packets which are not
 *        addressed for this device shall be ignored 0x02 Accept all undirected
 *        advertisement packets. Directed advertisement packets where initiator
 *        address is a RPA and  Directed advertisement packets addressed to this
 *        device shall be accepted. 0x03 Accept all undirected advertisement
 *        packets from devices that are in the Filter Accept List.Directed
 *        advertisement packets where initiator address is RPA and Directed
 *        advertisement packets addressed to this device shall be accepted.
 *        Values:
 *        - 0x00: Accept All
 *        - 0x01: Filter Accept List Only
 *        - 0x02: Accept All (use resolving list)
 *        - 0x03: Filter Accept List Only (use resolving list)
 * @param Scanning_PHY PHY that is going to be configured. Only one bit can be
 *        set.
 *        Flags:
 *        - 0x01: LE_1M_PHY_BIT
 *        - 0x04: LE_CODED_PHY_BIT
 * @param Scan_Type The Scan_Type parameter specifies the type of scan to
 *        perform. 0: Passive Scanning. No scan request PDUs shall be sent. 1:
 *        Active Scanning. Scan request PDUs may be sent.
 *        Values:
 *        - 0x00: Passive Scanning
 *        - 0x01: Active Scanning
 * @param Scan_Interval Time interval from when the Controller started its last
 *        scan until it begins the subsequent scan on the primary advertising
 *        physical channel.  Time = N * 0.625 ms
 *        Values:
 *        - 0x0004 (2.500 ms)  ... 0xFFFF (40959.375 ms) 
 * @param Scan_Window Time interval from when the Controller started its last
 *        scan until it begins the subsequent scan on the primary advertising
 *        physical channel. Time = N * 0.625 msec.
 *        Values:
 *        - 0x0004 (2.500 ms)  ... 0xFFFF (40959.375 ms) 
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_set_scan_configuration(uint8_t Filter_Duplicates,
                                          uint8_t Scanning_Filter_Policy,
                                          uint8_t Scanning_PHY,
                                          uint8_t Scan_Type,
                                          uint16_t Scan_Interval,
                                          uint16_t Scan_Window);
/**
 * @brief This function configures the connection parameters. To configure more
 *        than one PHY, this function must be called more times.
 * @param Initiating_PHY PHY that is going to be configured. Only one bit can be
 *        set.
 *        Flags:
 *        - 0x01: LE_1M_PHY_BIT
 *        - 0x02: LE_2M_PHY_BIT
 *        - 0x04: LE_CODED_PHY_BIT
 * @param Connection_Interval_Min Minimum value for the connection event
 *        interval. This shall be less than or equal to Connection_Interval_Max.
 *        Time = N * 1.25 msec.
 *        Values:
 *        - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms) 
 * @param Connection_Interval_Max Maximum value for the connection event
 *        interval. This shall be greater than or equal to
 *        Connection_Interval_Min. Time = N * 1.25 msec.
 *        Values:
 *        - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms) 
 * @param Max_Latency Maximum Peripheral latency for the connection in number of
 *        connection events.
 *        Values:
 *        - 0x0000 ... 0x01F3
 * @param Supervision_Timeout Supervision timeout for the LE Link. It shall be a
 *        multiple of 10 ms and larger than (1 + connPeripheralLatency) *
 *        connInterval * 2. Time = N * 10 msec.
 *        Values:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @param Min_CE_Length The minimum length of connection event recommended for
 *        this LE connection. Time = N * 0.625 msec.
 * @param Max_CE_Length The maximum length of connection event recommended for
 *        this LE connection. Time = N * 0.625 msec.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_set_connection_configuration(uint8_t Initiating_PHY,
                                                uint16_t Connection_Interval_Min,
                                                uint16_t Connection_Interval_Max,
                                                uint16_t Max_Latency,
                                                uint16_t Supervision_Timeout,
                                                uint16_t Min_CE_Length,
                                                uint16_t Max_CE_Length);
/**
 * @brief Starts a GAP procedure according to the procedure code.
 * @param Procedure_Code Procedure to be started.
 *        Values:
 *        - 0x00: GAP_LIMITED_DISCOVERY_PROC
 *        - 0x01: GAP_GENERAL_DISCOVERY_PROC
 *        - 0x02: GAP_AUTO_CONNECTION_ESTABLISHMENT_PROC
 *        - 0x03: GAP_GENERAL_CONNECTION_ESTABLISHMENT_PROC
 *        - 0x04: GAP_SELECTIVE_CONNECTION_ESTABLISHMENT_PROC
 *        - 0x05: GAP_OBSERVATION_PROC
 * @param PHYs PHYs that will be used for Scanning or Initiating .
 *        Flags:
 *        - 0x01: LE_1M_PHY_BIT
 *        - 0x04: LE_CODED_PHY_BIT
 * @param Duration Ignored. Reserved for future use.
 * @param Period Ignored. Reserved for future use.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_start_procedure(uint8_t Procedure_Code,
                                   uint8_t PHYs,
                                   uint16_t Duration,
                                   uint16_t Period);
/**
 * @brief Creates a direct connection to a device and read the name
 *        characteristic.
 * @param PHYs PHYs that will be used for initiating the connection.
 *        Flags:
 *        - 0x01: LE_1M_PHY_BIT
 *        - 0x04: LE_CODED_PHY_BIT
 * @param Peer_Address_Type The Peer_Address_Type parameter indicates the type
 *        of address used in the connectable advertisement sent by the peer. 0:
 *        Public Device Address or Public Identity Address 1: Random Device
 *        Address or Random (static) Identity Address
 *        Values:
 *        - 0x00: Public Address
 *        - 0x01: Random Address
 * @param Peer_Address Public Device Address, Random Device Address, Public
 *        Identity Address, or Random (static) Identity Address of the device to
 *        be connected.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_discover_name(uint8_t PHYs,
                                 uint8_t Peer_Address_Type,
                                 uint8_t Peer_Address[6]);
/**
 * @brief Add specific device addresses to the Filter Accept and/or resolving
 *        list.
 * @param Lists Select in which list the device addresses will be added: Filter
 *        Accept List, resolving list or both.
 *        Flags:
 *        - 0x01: Filter Accept List
 *        - 0x02: Resolving List
 * @param Clear_Lists Clear the selected lists before adding the device
 *        addresses.
 *        Values:
 *        - 0x00: Do not clear
 *        - 0x01: Clear before adding
 * @param Num_of_List_Entries Number of devices that have to be added to the
 *        Filter Accept List.
 *        Values:
 *        - 0x00 ... 0xFF
 * @param List_Entry See @ref List_Entry_t
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_add_devices_to_filter_accept_and_resolving_list(uint8_t Lists,
                                                                   uint8_t Clear_Lists,
                                                                   uint8_t Num_of_List_Entries,
                                                                   List_Entry_t List_Entry[]);
/**
 * @brief Clear the specified lists and add all bonded devices.
 * @param Lists Select in which list the device addresses will be added: Filter
 *        Accept List, resolving list or both.
 *        Flags:
 *        - 0x01: Filter Accept List
 *        - 0x02: Resolving List
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_configure_filter_accept_and_resolving_list(uint8_t Lists);
/**
 * @brief The GAP_Remove_Advertising_Set command is used to remove an
 *        advertising set from the Controller. If the advertising set
 *        corresponding to the Advertising_Handle parameter does not exist, then
 *        the Controller shall return the error code Unknown Advertising
 *        Identifier (0x42). If advertising on the advertising set is enabled,
 *        then the Controller shall return the error code Command Disallowed
 *        (0x0C).
 * @param Advertising_Handle It is used to identify an advertising set
 *        Values:
 *        - 0x00 ... 0xEF: Used to identify an advertising set
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_remove_advertising_set(uint8_t Advertising_Handle);
/**
 * @brief The GAP_Clear_Advertising_Sets command is used to remove all existing
 *        advertising sets from the Controller. If advertising is enabled on any
 *        advertising set, then the Controller shall return the error code
 *        Command Disallowed (0x0C). Note: All advertising sets are cleared on
 *        HCI reset.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_clear_advertising_sets(void);
/**
 * @brief This command is used to create a connection between a periodic
 *        advertiser and a synchronized device. See LE Extended Create
 *        Connection [v2] command.
 * @param Advertising_Handle Advertising_Handle identifying the periodic
 *        advertising train.
 *        Values:
 *        - 0x00 ... 0xEF
 *        - 0xFF: Not specified
 * @param Subevent Subevent where the connection request is to be sent.
 *        Values:
 *        - 0x00 ... 0x7F
 *        - 0xFF: Not specified
 * @param Initiator_Filter_Policy The Initiator_Filter_Policy parameter is used
 *        to determine whether the Filter Accept List is used. If the Filter
 *        Accept List is not used, the Peer_Address_Type and the Peer_Address
 *        parameters specify the address type and address of the device to
 *        connect to.  0x00 - Filter Accept List is not used to determine which
 *        device to connect to. Peer_Address_Type and Peer_Address shall be
 *        used. 0x01 - Filter Accept List is used to determine which device to
 *        connect to. Peer_Address_Type and Peer_Address shall be ignored.
 *        Values:
 *        - 0x00: FILTER_ACCEPT_LIST_NOT_USED
 *        - 0x01: FILTER_ACCEPT_LIST_USED
 * @param Own_Address_Type The Own_Address_Type parameter indicates the type of
 *        address being used in the connection request packets.
 *        Values:
 *        - 0x00: Public Device Address
 *        - 0x01: Random Device Address
 *        - 0x02: Controller generates the Resolvable Private Address based on the local
IRK from the resolving list. If the resolving list contains no matching
entry, then use the public address.
 *        - 0x03: Controller generates the Resolvable Private Address based on the local
IRK from the resolving list. If the resolving list contains no matching
entry, then use the random address from the most recent successful
LE_Set_Random_Address Command.
 * @param Peer_Address_Type The Peer_Address_Type parameter indicates the type
 *        of address used in the connectable advertisement sent by the peer.
 *        0x00: Public Device Address or Public Identity Address 0x01: Random
 *        Device Address or Random (static) Identity Address
 *        Values:
 *        - 0x00: Public Address
 *        - 0x01: Random Address
 * @param Peer_Address Public Device Address, Random Device Address, Public
 *        Identity Address, or Random (static) Identity Address of the device to
 *        be connected.
 * @param Connection_Interval_Min Minimum value for the connection interval.
 *        This shall be less than or equal to Connection_Interval_Max. Time = N
 *        x 1.25 ms.
 *        Values:
 *        - 0x0006 ... 0x0C80
 * @param Connection_Interval_Max Maximum value for the connection interval.
 *        This shall be greater than or equal to Connection_Interval_Min.  Time
 *        = N x 1.25 ms
 *        Values:
 *        - 0x0006 ... 0x0C80
 * @param Max_Latency Maximum Peripheral latency for the connection in number of
 *        connection events.
 *        Values:
 *        - 0x0000 ... 0x01F3
 * @param Supervision_Timeout Supervision timeout for the LE Link.  Time = N x
 *        10 ms
 *        Values:
 *        - 0x000A ... 0x0C80
 * @param Min_CE_Length The minimum length of connection event recommended for
 *        this LE connection.
 * @param Max_CE_Length The maximum length of connection event recommended for
 *        this LE connection.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_create_periodic_advertising_connection(uint8_t Advertising_Handle,
                                                          uint8_t Subevent,
                                                          uint8_t Initiator_Filter_Policy,
                                                          uint8_t Own_Address_Type,
                                                          uint8_t Peer_Address_Type,
                                                          uint8_t Peer_Address[6],
                                                          uint16_t Connection_Interval_Min,
                                                          uint16_t Connection_Interval_Max,
                                                          uint16_t Max_Latency,
                                                          uint16_t Supervision_Timeout,
                                                          uint16_t Min_CE_Length,
                                                          uint16_t Max_CE_Length);
/**
 * @brief This command is used by the application to encrypt data used in
 *        advertising packets. The Encrypted_Data will contain the data
 *        formatted as described in Supplement to the Bluetooth Core
 *        Specification, part A, section 1.23 (Encrypted Data), including
 *        Randomizer (5 bytes) and MIC (4 bytes). So, the length of encrypted
 *        data is 9 bytes larger than the length of input data.
 * @param Session_Key
 * @param IV
 * @param Data_Length Length of Data.
 * @param Data Data to be encrypted.
 * @param[out] Encrypted_Data_Length Length of Encrypted_Data.
 * @param[out] Encrypted_Data Encrypted data, including Randomizer (5 bytes) and
 *             MIC (4 bytes).
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_encrypt_adv_data_nwk(uint8_t Session_Key[16],
                                        uint8_t IV[8],
                                        uint8_t Data_Length,
                                        uint8_t Data[],
                                        uint8_t *Encrypted_Data_Length,
                                        uint8_t Encrypted_Data[]);
/**
 * @brief Decrypt encrypted advertsing data. The input data must be formatted as
 *        described in Supplement to the Bluetooth Core Specification, part A,
 *        section 1.23 (Encrypted Data), so it must include Randomizer (5 bytes)
 *        and MIC (4 bytes). The decrypted data only contains payload data, i.e.
 *        without Randomizer and MIC.
 * @param Session_Key
 * @param IV
 * @param Encrypted_Data_Length Length of Encrypted_Data.
 * @param Encrypted_Data Encrypted Data, containing Randomizer and MIC.
 * @param[out] Decrypted_Data_Length Length of Decrypted_Data.
 * @param[out] Decrypted_Data Decrypted data, without Randomizer and MIC.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_gap_decrypt_adv_data_nwk(uint8_t Session_Key[16],
                                        uint8_t IV[8],
                                        uint8_t Encrypted_Data_Length,
                                        uint8_t Encrypted_Data[],
                                        uint8_t *Decrypted_Data_Length,
                                        uint8_t Decrypted_Data[]);
/**
     * @}
     */
#endif /* _STM32WB05N_GAP_ACI_H_ */
