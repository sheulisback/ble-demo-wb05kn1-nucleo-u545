/**
  ******************************************************************************
  * @file    stm32wb05n_l2cap_aci.h
  * @author  System Research & Applications Team - Agrate/Catania Lab.
  * @version V1.3.0
  * @date    06-Feb-2024
  * @brief   Header file for external uC - STM32WB05N in network coprocessor mode (l2cap_aci)
  *          Autogenerated files, do not edit!!
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

#ifndef _STM32WB05N_L2CAP_ACI_H_
#define _STM32WB05N_L2CAP_ACI_H_

#include "stm32wb05n_types.h"
/**
 * @brief Send an L2CAP connection parameter update request from the peripheral
 *        to the central. An @ref aci_l2cap_connection_update_resp_event event
 *        will be raised when the central will respond to the  request (accepts
 *        or rejects).
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Connection_Interval_Min Minimum value for the connection event
 *        interval. This shall be less than or equal to Connection_Interval_Max.
 *        Time = N * 1.25 msec.
 *        Values:
 *        - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms) 
 * @param Connection_Interval_Max Maximum value for the connection event
 *        interval. This shall be greater than or equal to
 *        Connection_Interval_Min. Time = N * 1.25 msec.
 *        Values:
 *        - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms) 
 * @param Peripheral_Latency Maximum Peripheral latency for the connection in
 *        number of connection events.
 *        Values:
 *        - 0x0000 ... 0x01F3
 * @param Timeout_Multiplier Defines connection timeout parameter in the
 *        following manner: Timeout Multiplier * 10ms.
 *        Values:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval Value indicating success or error code.
 */
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Connection_Interval_Min,
                                                     uint16_t Connection_Interval_Max,
                                                     uint16_t Peripheral_Latency,
                                                     uint16_t Timeout_Multiplier);
/**
 * @brief Accept or reject a connection update. This command should be sent in
 *        response to a @ref aci_l2cap_connection_update_req_event event from
 *        the controller. The accept parameter has to be set if the connection
 *        parameters given in the event are acceptable.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Connection_Interval_Min Minimum value for the connection event
 *        interval. This shall be less than or equal to Connection_Interval_Max.
 *        Time = N * 1.25 msec.
 *        Values:
 *        - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms) 
 * @param Connection_Interval_Max Maximum value for the connection event
 *        interval. This shall be greater than or equal to
 *        Connection_Interval_Min. Time = N * 1.25 msec.
 *        Values:
 *        - 0x0006 (7.50 ms)  ... 0x0C80 (4000.00 ms) 
 * @param Peripheral_Latency Maximum Peripheral latency for the connection in
 *        number of connection events.
 *        Values:
 *        - 0x0000 ... 0x01F3
 * @param Timeout_Multiplier Defines connection timeout parameter in the
 *        following manner: Timeout Multiplier * 10ms.
 *        Values:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @param Min_CE_Length The minimum length of connection event recommended for
 *        this LE connection. Time = N * 0.625 msec.
 * @param Max_CE_Length The maximum length of connection event recommended for
 *        this LE connection. Time = N * 0.625 msec.
 * @param Identifier Identifier received in ACI_L2CAP_Connection_Update_Req
 *        event.
 * @param Accept Specify if connection update parameters are acceptable or not.
 *        Values:
 *        - 0x00: Reject
 *        - 0x01: Accept
 * @retval Value indicating success or error code.
 */
tBleStatus aci_l2cap_connection_parameter_update_resp(uint16_t Connection_Handle,
                                                      uint16_t Connection_Interval_Min,
                                                      uint16_t Connection_Interval_Max,
                                                      uint16_t Peripheral_Latency,
                                                      uint16_t Timeout_Multiplier,
                                                      uint16_t Min_CE_Length,
                                                      uint16_t Max_CE_Length,
                                                      uint8_t Identifier,
                                                      uint8_t Accept);
/**
 * @brief Create and configure an L2CAP channel between two devices using either
 *        LE Credit Based Flow Control Mode or Enhanced Credit Based Flow
 *        Control Mode.
 * @param Connection_Handle Handle identifying the connection.
 * @param SPSM Simplified Protocol/Service Multiplexer
 *        Values:
 *        - 0x0001 ... 0x00FF
 * @param MTU The maximum SDU size (in octets) that the L2CAP layer entity
 *        sending the L2CAP_LE_CREDIT_BASED_CONNECTION_REQ can receive on this
 *        channel.
 *        Values:
 *        - 23 ... 65535
 * @param MPS The maximum PDU payload size (in octets) that the L2CAP layer
 *        entity sending the L2CAP_LE_CREDIT_BASED_CONNECTION_REQ is capable of
 *        receiving on this channel.
 *        Values:
 *        - 23 ... 65533
 * @param Channel_Type Type of channel: LE Credit Based Flow Control Mode or
 *        Enhanced Credit Based Flow Control Mode.
 *        Values:
 *        - 0x00: L2CAP_CHANNEL_TYPE_LE_CFC
 *        - 0x01: L2CAP_CHANNEL_TYPE_ECFC
 * @param CID_Count
 * @retval Value indicating success or error code.
 */
tBleStatus aci_l2cap_cos_connection_req(uint16_t Connection_Handle,
                                        uint16_t SPSM,
                                        uint16_t MTU,
                                        uint16_t MPS,
                                        uint8_t Channel_Type,
                                        uint8_t CID_Count);
/**
 * @brief Command to be sent to respond to a request to open an L2CAP channel
 *        using LE Credit based Flow Control or Enhanced Credit Based Flow
 *        Control Mode. The request is notified through
 *        aci_l2cap_cos_connection_req_event.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param Identifier Identifier of the request.
 * @param MTU The MTU field specifies the maximum SDU size (in octets) that the
 *        L2CAP layer entity sending the L2CAP_LE_CREDIT_BASED_CONNECTION_RSP
 *        can receive on this channel.
 *        Values:
 *        - 23 ... 65535
 * @param MPS The MPS field specifies the maximum PDU payload size (in octets)
 *        that the L2CAP layer entity sending the
 *        L2CAP_LE_CREDIT_BASED_CONNECTION_RSP is capable of receiving on this
 *        channel.
 *        Values:
 *        - 23 ... 65533
 * @param Result It indicates the outcome of the connection request. A result
 *        value of 0x0000 indicates success while a non-zero value indicates a
 *        fail. Code values starting from 0x000C can be used only for ECFC
 *        channel type.
 *        Values:
 *        - 0x0000: L2CAP_CONN_SUCCESSFUL
 *        - 0x0002: L2CAP_CONN_FAIL_SPSM_NOT_SUPPORTED
 *        - 0x0004: L2CAP_CONN_FAIL_INSUFFICIENT_RESOURCES
 *        - 0x0005: L2CAP_CONN_FAIL_INSUFFICIENT_AUTHENTICATION
 *        - 0x0006: L2CAP_CONN_FAIL_INSUFFICIENT_AUTHORIZATION
 *        - 0x0007: L2CAP_CONN_FAIL_KEY_SIZE_TOO_SHORT
 *        - 0x0008: L2CAP_CONN_FAIL_INSUFFICIENT_ENCRYPTION
 *        - 0x000B: L2CAP_CONN_FAIL_UNACCEPTABLE_PARAMETERS
 *        - 0x000C: L2CAP_CONN_FAIL_INVALID_PARAMETERS
 *        - 0x000D: L2CAP_CONN_FAIL_NO_INFO
 *        - 0x000E: L2CAP_CONN_FAIL_AUTHENTICATION_PENDING
 *        - 0x000F: L2CAP_CONN_FAIL_AUTHORIZATION_PENDING
 * @param CID_Count
 * @param[out] CID
 * @retval Value indicating success or error code.
 */
tBleStatus aci_l2cap_cos_connection_resp(uint16_t Connection_Handle,
                                         uint8_t Identifier,
                                         uint16_t MTU,
                                         uint16_t MPS,
                                         uint16_t Result,
                                         uint8_t CID_Count,
                                         uint16_t CID[]);
/**
 * @brief Command to be issued when the device is capable of receiving
 *        additional K-frames in LE Credit Based Flow Control mode.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param CID The local channel endpoint that identifies the L2CAP channel.
 * @param RX_Credits Additional number of K-frames that local L2CAP layer entity
 *        can currently receive from the peer.
 * @param CFC_Policy Policy to handle flow control. If 0, flow control is
 *        handled by application: credits must be sent using
 *        aci_l2cap_send_flow_control_credits(). If 1, flow control is handled
 *        automatically by the stack.
 *        Values:
 *        - 0x00: L2CAP_CFC_MANUAL
 *        - 0x01: L2CAP_CFC_AUTO
 * @param[out] RX_Credit_Balance Current number of K-frames that peer's L2CAP
 *             layer entity can send.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_l2cap_cos_flow_control_credits_ind(uint16_t Connection_Handle,
                                                  uint16_t CID,
                                                  uint16_t RX_Credits,
                                                  uint8_t CFC_Policy,
                                                  uint16_t *RX_Credit_Balance);
/**
 * @brief Command to terminate an L2CAP channel.
 * @param Connection_Handle
 * @param CID Local endpoint of the channel to be disconnected.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_l2cap_cos_disconnect_req(uint16_t Connection_Handle,
                                        uint16_t CID);
/**
 * @brief Function to be called to send an SDU using an  L2CAP channel in LE
 *        Credit Based Flow Control mode or Enhanced Credit Based Flow Control
 *        Mode.
 * @param Connection_Handle Connection handle that identifies the connection.
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @param CID The local channel endpoint that identifies the L2CAP channel.
 * @param SDU_Length Length of the SDU to be transmitted.
 * @param SDU_Data Data contained in the SDU to be transmitted. Data must be
 *        valid until the SDU is transmitted.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_l2cap_cos_sdu_data_transmit(uint16_t Connection_Handle,
                                           uint16_t CID,
                                           uint16_t SDU_Length,
                                           uint8_t SDU_Data[]);
/**
 * @brief Command to send an L2CAP_CREDIT_BASED_RECONFIGURE_REQ packet in order
 *        to request to change its receive MTU or MPS values compared to when
 *        the channels were created or last reconfigured.
 * @param Connection_Handle Identifier received in the
 *        aci_eatt_connection_event.
 * @param MTU The maximum SDU size (in octets) that the L2CAP layer entity can
 *        receive on each of the Source CID channels (represented by Local_CID
 *        array parameter). This is equal to the maximum size of an ATT packet
 *        on the Enhanced ATT bearer.
 *        Values:
 *        - 0x0040 ... 0xFFFF
 * @param MPS The maximum PDU payload size (in octets) that the local L2CAP
 *        layer is capable of receiving on each of the Source CID channels
 *        (represented by Local_CID array parameter).
 *        Values:
 *        - 0x0040 ... 0xFFFF
 * @param CID_Count The number of potential Enhanced ATT bearers that are going
 *        to be opened. This is the number of L2CAP channels to be opened in
 *        Enhanced Credit Based Flow Control mode.
 *        Values:
 *        - 0x01 ... 0x05
 * @param CID List of CID values representing the channel endpoints on the local
 *        device. Each entry in the array shall be non-zero and represents a
 *        request for a channel. The value of each CID shall be from the
 *        dynamically allocated range for LE devices (0x0040-0x007F) and shall
 *        not be already allocated to a different channel on the device sending
 *        the request.
 * @retval Value indicating success or error code.
 */
tBleStatus aci_l2cap_cos_reconfigure_req(uint16_t Connection_Handle,
                                         uint16_t MTU,
                                         uint16_t MPS,
                                         uint8_t CID_Count,
                                         uint16_t CID[]);
/**
 * @brief Command to send an L2CAP_CREDIT_BASED_RECONFIGURE_RSP packet in order
 *        to respond to an incoming L2CAP_CREDIT_BASED_RECONFIGURE_REQ. It has
 *        to be used upon the reception of an
 *        ACI_L2CAP_ECFC_RECONFIGURATION_EVENT.
 * @param Connection_Handle Identifier received in the
 *        aci_eatt_connection_event.
 * @param Identifier Identifier received in the aci_eatt_connection_event.
 * @param Result It indicates the outcome of the connection request. A result
 *        value of 0x0000 indicates success while a non-zero value indicates the
 *        connection request was refused.
 *        Values:
 *        - 0x0000: L2CAP_RECONFIG_SUCCESSFUL
 *        - 0x0001: L2CAP_MTU_REDUCTION_NOT_ALLOWED
 *        - 0x0002: L2CAP_MPS_REDUCTION_NOT_ALLOWED
 *        - 0x0003: L2CAP_INVALID_DESTINATION_CID
 *        - 0x0004: L2CAP_UNACCEPTABLE_PARAMETERS
 * @retval Value indicating success or error code.
 */
tBleStatus aci_l2cap_cos_reconfigure_resp(uint16_t Connection_Handle,
                                          uint8_t Identifier,
                                          uint16_t Result);
/**
     * @}
     */
    #endif /* _STM32WB05N_L2CAP_ACI_H_ */
