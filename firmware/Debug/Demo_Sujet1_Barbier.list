
Demo_Sujet1_Barbier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6f4  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004de  0800f92c  0800f92c  0001092c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fe0c  0800fe0c  00010e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fe14  0800fe14  00010e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800fe18  0800fe18  00010e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  20000000  0800fe1c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000830  2000007c  0800fe98  0001107c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200008ac  0800fe98  000118ac  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d9a8  00000000  00000000  000110b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004068  00000000  00000000  0003ea5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f00  00000000  00000000  00042ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001848  00000000  00000000  000449c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003309e  00000000  00000000  00046210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002426c  00000000  00000000  000792ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00131902  00000000  00000000  0009d51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cee1c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009278  00000000  00000000  001cee60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  001d80d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000007c 	.word	0x2000007c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800f914 	.word	0x0800f914

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000080 	.word	0x20000080
 8000274:	0800f914 	.word	0x0800f914

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	@ 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_d2f>:
 80005f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80005f8:	bf24      	itt	cs
 80005fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80005fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000602:	d90d      	bls.n	8000620 <__aeabi_d2f+0x30>
 8000604:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000608:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800060c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000610:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000614:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000618:	bf08      	it	eq
 800061a:	f020 0001 	biceq.w	r0, r0, #1
 800061e:	4770      	bx	lr
 8000620:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000624:	d121      	bne.n	800066a <__aeabi_d2f+0x7a>
 8000626:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800062a:	bfbc      	itt	lt
 800062c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000630:	4770      	bxlt	lr
 8000632:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000636:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800063a:	f1c2 0218 	rsb	r2, r2, #24
 800063e:	f1c2 0c20 	rsb	ip, r2, #32
 8000642:	fa10 f30c 	lsls.w	r3, r0, ip
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	bf18      	it	ne
 800064c:	f040 0001 	orrne.w	r0, r0, #1
 8000650:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000654:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000658:	fa03 fc0c 	lsl.w	ip, r3, ip
 800065c:	ea40 000c 	orr.w	r0, r0, ip
 8000660:	fa23 f302 	lsr.w	r3, r3, r2
 8000664:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000668:	e7cc      	b.n	8000604 <__aeabi_d2f+0x14>
 800066a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800066e:	d107      	bne.n	8000680 <__aeabi_d2f+0x90>
 8000670:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000674:	bf1e      	ittt	ne
 8000676:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800067a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800067e:	4770      	bxne	lr
 8000680:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000684:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000688:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <__aeabi_uldivmod>:
 8000690:	b953      	cbnz	r3, 80006a8 <__aeabi_uldivmod+0x18>
 8000692:	b94a      	cbnz	r2, 80006a8 <__aeabi_uldivmod+0x18>
 8000694:	2900      	cmp	r1, #0
 8000696:	bf08      	it	eq
 8000698:	2800      	cmpeq	r0, #0
 800069a:	bf1c      	itt	ne
 800069c:	f04f 31ff 	movne.w	r1, #4294967295
 80006a0:	f04f 30ff 	movne.w	r0, #4294967295
 80006a4:	f000 b97e 	b.w	80009a4 <__aeabi_idiv0>
 80006a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b0:	f000 f806 	bl	80006c0 <__udivmoddi4>
 80006b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006bc:	b004      	add	sp, #16
 80006be:	4770      	bx	lr

080006c0 <__udivmoddi4>:
 80006c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80006c6:	460c      	mov	r4, r1
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d14d      	bne.n	8000768 <__udivmoddi4+0xa8>
 80006cc:	428a      	cmp	r2, r1
 80006ce:	460f      	mov	r7, r1
 80006d0:	4684      	mov	ip, r0
 80006d2:	4696      	mov	lr, r2
 80006d4:	fab2 f382 	clz	r3, r2
 80006d8:	d960      	bls.n	800079c <__udivmoddi4+0xdc>
 80006da:	b14b      	cbz	r3, 80006f0 <__udivmoddi4+0x30>
 80006dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80006e0:	f1c3 0220 	rsb	r2, r3, #32
 80006e4:	409f      	lsls	r7, r3
 80006e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80006ea:	fa20 f202 	lsr.w	r2, r0, r2
 80006ee:	4317      	orrs	r7, r2
 80006f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80006f4:	fa1f f48e 	uxth.w	r4, lr
 80006f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80006fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000700:	fb06 7711 	mls	r7, r6, r1, r7
 8000704:	fb01 f004 	mul.w	r0, r1, r4
 8000708:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800070c:	4290      	cmp	r0, r2
 800070e:	d908      	bls.n	8000722 <__udivmoddi4+0x62>
 8000710:	eb1e 0202 	adds.w	r2, lr, r2
 8000714:	f101 37ff 	add.w	r7, r1, #4294967295
 8000718:	d202      	bcs.n	8000720 <__udivmoddi4+0x60>
 800071a:	4290      	cmp	r0, r2
 800071c:	f200 812d 	bhi.w	800097a <__udivmoddi4+0x2ba>
 8000720:	4639      	mov	r1, r7
 8000722:	1a12      	subs	r2, r2, r0
 8000724:	fa1f fc8c 	uxth.w	ip, ip
 8000728:	fbb2 f0f6 	udiv	r0, r2, r6
 800072c:	fb06 2210 	mls	r2, r6, r0, r2
 8000730:	fb00 f404 	mul.w	r4, r0, r4
 8000734:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000738:	4564      	cmp	r4, ip
 800073a:	d908      	bls.n	800074e <__udivmoddi4+0x8e>
 800073c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000740:	f100 32ff 	add.w	r2, r0, #4294967295
 8000744:	d202      	bcs.n	800074c <__udivmoddi4+0x8c>
 8000746:	4564      	cmp	r4, ip
 8000748:	f200 811a 	bhi.w	8000980 <__udivmoddi4+0x2c0>
 800074c:	4610      	mov	r0, r2
 800074e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000752:	ebac 0c04 	sub.w	ip, ip, r4
 8000756:	2100      	movs	r1, #0
 8000758:	b125      	cbz	r5, 8000764 <__udivmoddi4+0xa4>
 800075a:	fa2c f303 	lsr.w	r3, ip, r3
 800075e:	2200      	movs	r2, #0
 8000760:	e9c5 3200 	strd	r3, r2, [r5]
 8000764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000768:	428b      	cmp	r3, r1
 800076a:	d905      	bls.n	8000778 <__udivmoddi4+0xb8>
 800076c:	b10d      	cbz	r5, 8000772 <__udivmoddi4+0xb2>
 800076e:	e9c5 0100 	strd	r0, r1, [r5]
 8000772:	2100      	movs	r1, #0
 8000774:	4608      	mov	r0, r1
 8000776:	e7f5      	b.n	8000764 <__udivmoddi4+0xa4>
 8000778:	fab3 f183 	clz	r1, r3
 800077c:	2900      	cmp	r1, #0
 800077e:	d14d      	bne.n	800081c <__udivmoddi4+0x15c>
 8000780:	42a3      	cmp	r3, r4
 8000782:	f0c0 80f2 	bcc.w	800096a <__udivmoddi4+0x2aa>
 8000786:	4290      	cmp	r0, r2
 8000788:	f080 80ef 	bcs.w	800096a <__udivmoddi4+0x2aa>
 800078c:	4606      	mov	r6, r0
 800078e:	4623      	mov	r3, r4
 8000790:	4608      	mov	r0, r1
 8000792:	2d00      	cmp	r5, #0
 8000794:	d0e6      	beq.n	8000764 <__udivmoddi4+0xa4>
 8000796:	e9c5 6300 	strd	r6, r3, [r5]
 800079a:	e7e3      	b.n	8000764 <__udivmoddi4+0xa4>
 800079c:	2b00      	cmp	r3, #0
 800079e:	f040 80a2 	bne.w	80008e6 <__udivmoddi4+0x226>
 80007a2:	1a8a      	subs	r2, r1, r2
 80007a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80007a8:	fa1f f68e 	uxth.w	r6, lr
 80007ac:	2101      	movs	r1, #1
 80007ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80007b2:	fb07 2014 	mls	r0, r7, r4, r2
 80007b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80007ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007be:	fb06 f004 	mul.w	r0, r6, r4
 80007c2:	4290      	cmp	r0, r2
 80007c4:	d90f      	bls.n	80007e6 <__udivmoddi4+0x126>
 80007c6:	eb1e 0202 	adds.w	r2, lr, r2
 80007ca:	f104 38ff 	add.w	r8, r4, #4294967295
 80007ce:	bf2c      	ite	cs
 80007d0:	f04f 0901 	movcs.w	r9, #1
 80007d4:	f04f 0900 	movcc.w	r9, #0
 80007d8:	4290      	cmp	r0, r2
 80007da:	d903      	bls.n	80007e4 <__udivmoddi4+0x124>
 80007dc:	f1b9 0f00 	cmp.w	r9, #0
 80007e0:	f000 80c8 	beq.w	8000974 <__udivmoddi4+0x2b4>
 80007e4:	4644      	mov	r4, r8
 80007e6:	1a12      	subs	r2, r2, r0
 80007e8:	fa1f fc8c 	uxth.w	ip, ip
 80007ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80007f0:	fb07 2210 	mls	r2, r7, r0, r2
 80007f4:	fb00 f606 	mul.w	r6, r0, r6
 80007f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80007fc:	4566      	cmp	r6, ip
 80007fe:	d908      	bls.n	8000812 <__udivmoddi4+0x152>
 8000800:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000804:	f100 32ff 	add.w	r2, r0, #4294967295
 8000808:	d202      	bcs.n	8000810 <__udivmoddi4+0x150>
 800080a:	4566      	cmp	r6, ip
 800080c:	f200 80bb 	bhi.w	8000986 <__udivmoddi4+0x2c6>
 8000810:	4610      	mov	r0, r2
 8000812:	ebac 0c06 	sub.w	ip, ip, r6
 8000816:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800081a:	e79d      	b.n	8000758 <__udivmoddi4+0x98>
 800081c:	f1c1 0620 	rsb	r6, r1, #32
 8000820:	408b      	lsls	r3, r1
 8000822:	fa04 fe01 	lsl.w	lr, r4, r1
 8000826:	fa22 f706 	lsr.w	r7, r2, r6
 800082a:	fa20 fc06 	lsr.w	ip, r0, r6
 800082e:	40f4      	lsrs	r4, r6
 8000830:	408a      	lsls	r2, r1
 8000832:	431f      	orrs	r7, r3
 8000834:	ea4e 030c 	orr.w	r3, lr, ip
 8000838:	fa00 fe01 	lsl.w	lr, r0, r1
 800083c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000840:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000844:	fa1f fc87 	uxth.w	ip, r7
 8000848:	fbb4 f0f8 	udiv	r0, r4, r8
 800084c:	fb08 4410 	mls	r4, r8, r0, r4
 8000850:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000854:	fb00 f90c 	mul.w	r9, r0, ip
 8000858:	45a1      	cmp	r9, r4
 800085a:	d90e      	bls.n	800087a <__udivmoddi4+0x1ba>
 800085c:	193c      	adds	r4, r7, r4
 800085e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000862:	bf2c      	ite	cs
 8000864:	f04f 0b01 	movcs.w	fp, #1
 8000868:	f04f 0b00 	movcc.w	fp, #0
 800086c:	45a1      	cmp	r9, r4
 800086e:	d903      	bls.n	8000878 <__udivmoddi4+0x1b8>
 8000870:	f1bb 0f00 	cmp.w	fp, #0
 8000874:	f000 8093 	beq.w	800099e <__udivmoddi4+0x2de>
 8000878:	4650      	mov	r0, sl
 800087a:	eba4 0409 	sub.w	r4, r4, r9
 800087e:	fa1f f983 	uxth.w	r9, r3
 8000882:	fbb4 f3f8 	udiv	r3, r4, r8
 8000886:	fb08 4413 	mls	r4, r8, r3, r4
 800088a:	fb03 fc0c 	mul.w	ip, r3, ip
 800088e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000892:	45a4      	cmp	ip, r4
 8000894:	d906      	bls.n	80008a4 <__udivmoddi4+0x1e4>
 8000896:	193c      	adds	r4, r7, r4
 8000898:	f103 38ff 	add.w	r8, r3, #4294967295
 800089c:	d201      	bcs.n	80008a2 <__udivmoddi4+0x1e2>
 800089e:	45a4      	cmp	ip, r4
 80008a0:	d87a      	bhi.n	8000998 <__udivmoddi4+0x2d8>
 80008a2:	4643      	mov	r3, r8
 80008a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008a8:	eba4 040c 	sub.w	r4, r4, ip
 80008ac:	fba0 9802 	umull	r9, r8, r0, r2
 80008b0:	4544      	cmp	r4, r8
 80008b2:	46cc      	mov	ip, r9
 80008b4:	4643      	mov	r3, r8
 80008b6:	d302      	bcc.n	80008be <__udivmoddi4+0x1fe>
 80008b8:	d106      	bne.n	80008c8 <__udivmoddi4+0x208>
 80008ba:	45ce      	cmp	lr, r9
 80008bc:	d204      	bcs.n	80008c8 <__udivmoddi4+0x208>
 80008be:	3801      	subs	r0, #1
 80008c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80008c4:	eb68 0307 	sbc.w	r3, r8, r7
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x222>
 80008ca:	ebbe 020c 	subs.w	r2, lr, ip
 80008ce:	eb64 0403 	sbc.w	r4, r4, r3
 80008d2:	fa04 f606 	lsl.w	r6, r4, r6
 80008d6:	fa22 f301 	lsr.w	r3, r2, r1
 80008da:	40cc      	lsrs	r4, r1
 80008dc:	431e      	orrs	r6, r3
 80008de:	e9c5 6400 	strd	r6, r4, [r5]
 80008e2:	2100      	movs	r1, #0
 80008e4:	e73e      	b.n	8000764 <__udivmoddi4+0xa4>
 80008e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80008ea:	f1c3 0120 	rsb	r1, r3, #32
 80008ee:	fa04 f203 	lsl.w	r2, r4, r3
 80008f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80008f6:	40cc      	lsrs	r4, r1
 80008f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80008fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000900:	fa1f f68e 	uxth.w	r6, lr
 8000904:	fbb4 f0f7 	udiv	r0, r4, r7
 8000908:	430a      	orrs	r2, r1
 800090a:	fb07 4410 	mls	r4, r7, r0, r4
 800090e:	0c11      	lsrs	r1, r2, #16
 8000910:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000914:	fb00 f406 	mul.w	r4, r0, r6
 8000918:	428c      	cmp	r4, r1
 800091a:	d90e      	bls.n	800093a <__udivmoddi4+0x27a>
 800091c:	eb1e 0101 	adds.w	r1, lr, r1
 8000920:	f100 38ff 	add.w	r8, r0, #4294967295
 8000924:	bf2c      	ite	cs
 8000926:	f04f 0901 	movcs.w	r9, #1
 800092a:	f04f 0900 	movcc.w	r9, #0
 800092e:	428c      	cmp	r4, r1
 8000930:	d902      	bls.n	8000938 <__udivmoddi4+0x278>
 8000932:	f1b9 0f00 	cmp.w	r9, #0
 8000936:	d02c      	beq.n	8000992 <__udivmoddi4+0x2d2>
 8000938:	4640      	mov	r0, r8
 800093a:	1b09      	subs	r1, r1, r4
 800093c:	b292      	uxth	r2, r2
 800093e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000942:	fb07 1114 	mls	r1, r7, r4, r1
 8000946:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800094a:	fb04 f106 	mul.w	r1, r4, r6
 800094e:	4291      	cmp	r1, r2
 8000950:	d907      	bls.n	8000962 <__udivmoddi4+0x2a2>
 8000952:	eb1e 0202 	adds.w	r2, lr, r2
 8000956:	f104 38ff 	add.w	r8, r4, #4294967295
 800095a:	d201      	bcs.n	8000960 <__udivmoddi4+0x2a0>
 800095c:	4291      	cmp	r1, r2
 800095e:	d815      	bhi.n	800098c <__udivmoddi4+0x2cc>
 8000960:	4644      	mov	r4, r8
 8000962:	1a52      	subs	r2, r2, r1
 8000964:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000968:	e721      	b.n	80007ae <__udivmoddi4+0xee>
 800096a:	1a86      	subs	r6, r0, r2
 800096c:	eb64 0303 	sbc.w	r3, r4, r3
 8000970:	2001      	movs	r0, #1
 8000972:	e70e      	b.n	8000792 <__udivmoddi4+0xd2>
 8000974:	3c02      	subs	r4, #2
 8000976:	4472      	add	r2, lr
 8000978:	e735      	b.n	80007e6 <__udivmoddi4+0x126>
 800097a:	3902      	subs	r1, #2
 800097c:	4472      	add	r2, lr
 800097e:	e6d0      	b.n	8000722 <__udivmoddi4+0x62>
 8000980:	44f4      	add	ip, lr
 8000982:	3802      	subs	r0, #2
 8000984:	e6e3      	b.n	800074e <__udivmoddi4+0x8e>
 8000986:	44f4      	add	ip, lr
 8000988:	3802      	subs	r0, #2
 800098a:	e742      	b.n	8000812 <__udivmoddi4+0x152>
 800098c:	3c02      	subs	r4, #2
 800098e:	4472      	add	r2, lr
 8000990:	e7e7      	b.n	8000962 <__udivmoddi4+0x2a2>
 8000992:	3802      	subs	r0, #2
 8000994:	4471      	add	r1, lr
 8000996:	e7d0      	b.n	800093a <__udivmoddi4+0x27a>
 8000998:	3b02      	subs	r3, #2
 800099a:	443c      	add	r4, r7
 800099c:	e782      	b.n	80008a4 <__udivmoddi4+0x1e4>
 800099e:	3802      	subs	r0, #2
 80009a0:	443c      	add	r4, r7
 80009a2:	e76a      	b.n	800087a <__udivmoddi4+0x1ba>

080009a4 <__aeabi_idiv0>:
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ac:	f000 fd60 	bl	8001470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 80009b0:	f000 f854 	bl	8000a5c <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f809 	bl	80009ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f000 f870 	bl	8000a9c <MX_GPIO_Init>
  MX_ICACHE_Init();
 80009bc:	f000 f85a 	bl	8000a74 <MX_ICACHE_Init>
  MX_STM32WB05N_Init();
 80009c0:	f00b fe34 	bl	800c62c <MX_STM32WB05N_Init>
  while (1)
  {

    /* USER CODE END WHILE */

  MX_STM32WB05N_Process();
 80009c4:	f00b fe5a 	bl	800c67c <MX_STM32WB05N_Process>
 80009c8:	e7fc      	b.n	80009c4 <main+0x1c>

080009ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b09e      	sub	sp, #120	@ 0x78
 80009ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d0:	f107 0318 	add.w	r3, r7, #24
 80009d4:	2260      	movs	r2, #96	@ 0x60
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f00e f8e2 	bl	800eba2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009de:	463b      	mov	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80009ee:	2000      	movs	r0, #0
 80009f0:	f001 fb34 	bl	800205c <HAL_PWREx_ControlVoltageScaling>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009fa:	f000 f895 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009fe:	2310      	movs	r3, #16
 8000a00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a02:	2301      	movs	r3, #1
 8000a04:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000a06:	2310      	movs	r3, #16
 8000a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_2;
 8000a0a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fbfb 	bl	8002214 <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000a24:	f000 f880 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	231f      	movs	r3, #31
 8000a2a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	2101      	movs	r1, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 fac1 	bl	8002fcc <HAL_RCC_ClockConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a50:	f000 f86a 	bl	8000b28 <Error_Handler>
  }
}
 8000a54:	bf00      	nop
 8000a56:	3778      	adds	r7, #120	@ 0x78
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000a60:	2002      	movs	r0, #2
 8000a62:	f001 fb87 	bl	8002174 <HAL_PWREx_ConfigSupply>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemPower_Config+0x14>
  {
    Error_Handler();
 8000a6c:	f000 f85c 	bl	8000b28 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 fabf 	bl	8001ffc <HAL_ICACHE_ConfigAssociativityMode>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000a84:	f000 f850 	bl	8000b28 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000a88:	f001 fad8 	bl	800203c <HAL_ICACHE_Enable>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000a92:	f000 f849 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <MX_GPIO_Init+0x84>)
 8000ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab8:	4a19      	ldr	r2, [pc, #100]	@ (8000b20 <MX_GPIO_Init+0x84>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_GPIO_Init+0x84>)
 8000ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <MX_GPIO_Init+0x84>)
 8000ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_GPIO_Init+0x84>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_GPIO_Init+0x84>)
 8000ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000af4:	480b      	ldr	r0, [pc, #44]	@ (8000b24 <MX_GPIO_Init+0x88>)
 8000af6:	f001 fa4f 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000afa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4619      	mov	r1, r3
 8000b12:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <MX_GPIO_Init+0x88>)
 8000b14:	f000 ff6a 	bl	80019ec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	46020c00 	.word	0x46020c00
 8000b24:	42020000 	.word	0x42020000

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b40:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_MspInit+0x30>)
 8000b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	46020c00 	.word	0x46020c00

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <NMI_Handler+0x4>

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <MemManage_Handler+0x4>

08000b80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbe:	f000 fcfd 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <BSP_LPUART1_Init>:
  * @brief  Initializes USART HAL.
  * @param  Init : UART initialization parameters
  * @retval BSP status
  */
int32_t BSP_LPUART1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]

  hlpuart1.Instance  = LPUART1;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <BSP_LPUART1_Init+0x54>)
 8000bd4:	4a12      	ldr	r2, [pc, #72]	@ (8000c20 <BSP_LPUART1_Init+0x58>)
 8000bd6:	601a      	str	r2, [r3, #0]

  if(LPUART1InitCounter++ == 0)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <BSP_LPUART1_Init+0x5c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	4911      	ldr	r1, [pc, #68]	@ (8000c24 <BSP_LPUART1_Init+0x5c>)
 8000be0:	600a      	str	r2, [r1, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d114      	bne.n	8000c10 <BSP_LPUART1_Init+0x48>
  {
    if (HAL_UART_GetState(&hlpuart1) == HAL_UART_STATE_RESET)
 8000be6:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <BSP_LPUART1_Init+0x54>)
 8000be8:	f005 fb96 	bl	8006318 <HAL_UART_GetState>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10e      	bne.n	8000c10 <BSP_LPUART1_Init+0x48>
    {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
      /* Init the UART Msp */
      LPUART1_MspInit(&hlpuart1);
 8000bf2:	480a      	ldr	r0, [pc, #40]	@ (8000c1c <BSP_LPUART1_Init+0x54>)
 8000bf4:	f000 f8a8 	bl	8000d48 <LPUART1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if(ret == BSP_ERROR_NONE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d108      	bne.n	8000c10 <BSP_LPUART1_Init+0x48>
      {
        /* Init the UART */
        if (MX_LPUART1_UART_Init(&hlpuart1) != HAL_OK)
 8000bfe:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <BSP_LPUART1_Init+0x54>)
 8000c00:	f000 f852 	bl	8000ca8 <MX_LPUART1_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <BSP_LPUART1_Init+0x48>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c0a:	f06f 0307 	mvn.w	r3, #7
 8000c0e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000098 	.word	0x20000098
 8000c20:	46002400 	.word	0x46002400
 8000c24:	2000012c 	.word	0x2000012c

08000c28 <BSP_LPUART1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_LPUART1_Send(uint8_t *pData, uint16_t Length)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000c34:	f06f 0305 	mvn.w	r3, #5
 8000c38:	60fb      	str	r3, [r7, #12]

  if(HAL_UART_Transmit(&hlpuart1, pData, Length, BUS_LPUART1_POLL_TIMEOUT) == HAL_OK)
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	4806      	ldr	r0, [pc, #24]	@ (8000c5c <BSP_LPUART1_Send+0x34>)
 8000c44:	f005 f9aa 	bl	8005f9c <HAL_UART_Transmit>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <BSP_LPUART1_Send+0x2a>
  {
      ret = BSP_ERROR_NONE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000098 	.word	0x20000098

08000c60 <BSP_LPUART1_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_LPUART1_Recv(uint8_t *pData, uint16_t Length)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000c6c:	f06f 0305 	mvn.w	r3, #5
 8000c70:	60fb      	str	r3, [r7, #12]

  if(HAL_UART_Receive(&hlpuart1, pData, Length, BUS_LPUART1_POLL_TIMEOUT) == HAL_OK)
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <BSP_LPUART1_Recv+0x34>)
 8000c7c:	f005 fa1c 	bl	80060b8 <HAL_UART_Receive>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <BSP_LPUART1_Recv+0x2a>
  {
      ret = BSP_ERROR_NONE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000098 	.word	0x20000098

08000c98 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000c9c:	f000 fca2 	bl	80015e4 <HAL_GetTick>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_LPUART1_UART_Init>:

/* LPUART1 init function */

__weak HAL_StatusTypeDef MX_LPUART1_UART_Init(UART_HandleTypeDef* hlpuart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]

  hlpuart->Instance = LPUART1;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a22      	ldr	r2, [pc, #136]	@ (8000d40 <MX_LPUART1_UART_Init+0x98>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hlpuart->Init.BaudRate = 209700;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a21      	ldr	r2, [pc, #132]	@ (8000d44 <MX_LPUART1_UART_Init+0x9c>)
 8000cbe:	605a      	str	r2, [r3, #4]
  hlpuart->Init.WordLength = UART_WORDLENGTH_8B;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hlpuart->Init.StopBits = UART_STOPBITS_1;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  hlpuart->Init.Parity = UART_PARITY_NONE;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hlpuart->Init.Mode = UART_MODE_TX_RX;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	615a      	str	r2, [r3, #20]
  hlpuart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  hlpuart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  hlpuart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart->FifoMode = UART_FIFOMODE_DISABLE;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(hlpuart) != HAL_OK)
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f005 f8f9 	bl	8005ee8 <HAL_UART_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_LPUART1_UART_Init+0x58>
  {
    ret = HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(hlpuart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f006 fd69 	bl	80077da <HAL_UARTEx_SetTxFifoThreshold>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_LPUART1_UART_Init+0x6a>
  {
    ret = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(hlpuart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f006 fd9e 	bl	8007856 <HAL_UARTEx_SetRxFifoThreshold>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_LPUART1_UART_Init+0x7c>
  {
    ret = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(hlpuart) != HAL_OK)
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f006 fd1f 	bl	8007768 <HAL_UARTEx_DisableFifoMode>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_LPUART1_UART_Init+0x8c>
  {
    ret = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	46002400 	.word	0x46002400
 8000d44:	00033324 	.word	0x00033324

08000d48 <LPUART1_MspInit>:

static void LPUART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	22c0      	movs	r2, #192	@ 0xc0
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f00d ff22 	bl	800eba2 <memset>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d5e:	f04f 0220 	mov.w	r2, #32
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 fcfa 	bl	800376c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d78:	4b25      	ldr	r3, [pc, #148]	@ (8000e10 <LPUART1_MspInit+0xc8>)
 8000d7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000d7e:	4a24      	ldr	r2, [pc, #144]	@ (8000e10 <LPUART1_MspInit+0xc8>)
 8000d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d84:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000d88:	4b21      	ldr	r3, [pc, #132]	@ (8000e10 <LPUART1_MspInit+0xc8>)
 8000d8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <LPUART1_MspInit+0xc8>)
 8000d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e10 <LPUART1_MspInit+0xc8>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000da6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <LPUART1_MspInit+0xc8>)
 8000da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BUS_LPUART1_TX_GPIO_PIN;
 8000db4:	2304      	movs	r3, #4
 8000db6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = BUS_LPUART1_TX_GPIO_AF;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(BUS_LPUART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8000dd2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480e      	ldr	r0, [pc, #56]	@ (8000e14 <LPUART1_MspInit+0xcc>)
 8000dda:	f000 fe07 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_LPUART1_RX_GPIO_PIN;
 8000dde:	2308      	movs	r3, #8
 8000de0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = BUS_LPUART1_RX_GPIO_AF;
 8000df6:	2308      	movs	r3, #8
 8000df8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(BUS_LPUART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8000dfc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <LPUART1_MspInit+0xcc>)
 8000e04:	f000 fdf2 	bl	80019ec <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	37e8      	adds	r7, #232	@ 0xe8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	46020c00 	.word	0x46020c00
 8000e14:	42020000 	.word	0x42020000

08000e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return 1;
 8000e1c:	2301      	movs	r3, #1
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <_kill>:

int _kill(int pid, int sig)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e32:	f00d ff05 	bl	800ec40 <__errno>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2216      	movs	r2, #22
 8000e3a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_exit>:

void _exit (int status)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ffe7 	bl	8000e28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e5a:	bf00      	nop
 8000e5c:	e7fd      	b.n	8000e5a <_exit+0x12>

08000e5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	e00a      	b.n	8000e86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e70:	f3af 8000 	nop.w
 8000e74:	4601      	mov	r1, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	60ba      	str	r2, [r7, #8]
 8000e7c:	b2ca      	uxtb	r2, r1
 8000e7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dbf0      	blt.n	8000e70 <_read+0x12>
  }

  return len;
 8000e8e:	687b      	ldr	r3, [r7, #4]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	e009      	b.n	8000ebe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1c5a      	adds	r2, r3, #1
 8000eae:	60ba      	str	r2, [r7, #8]
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fa60 	bl	8001378 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	dbf1      	blt.n	8000eaa <_write+0x12>
  }
  return len;
 8000ec6:	687b      	ldr	r3, [r7, #4]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_close>:

int _close(int file)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ef8:	605a      	str	r2, [r3, #4]
  return 0;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_isatty>:

int _isatty(int file)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f10:	2301      	movs	r3, #1
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f00d fe6a 	bl	800ec40 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20040000 	.word	0x20040000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	20000130 	.word	0x20000130
 8000fa0:	200008b0 	.word	0x200008b0

08000fa4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b18      	ldr	r3, [pc, #96]	@ (800100c <SystemInit+0x68>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fae:	4a17      	ldr	r2, [pc, #92]	@ (800100c <SystemInit+0x68>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <SystemInit+0x6c>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <SystemInit+0x6c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <SystemInit+0x6c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <SystemInit+0x6c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <SystemInit+0x6c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <SystemInit+0x6c>)
 8000fd6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000fda:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000fde:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <SystemInit+0x6c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <SystemInit+0x6c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a09      	ldr	r2, [pc, #36]	@ (8001010 <SystemInit+0x6c>)
 8000fec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <SystemInit+0x6c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <SystemInit+0x68>)
 8000ffa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ffe:	609a      	str	r2, [r3, #8]
  #endif
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	46020c00 	.word	0x46020c00

08001014 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001014:	480d      	ldr	r0, [pc, #52]	@ (800104c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001016:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001018:	f7ff ffc4 	bl	8000fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <LoopForever+0xe>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001042:	f00d fe03 	bl	800ec4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001046:	f7ff fcaf 	bl	80009a8 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   r0, =_estack
 800104c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001058:	0800fe1c 	.word	0x0800fe1c
  ldr r2, =_sbss
 800105c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001060:	200008ac 	.word	0x200008ac

08001064 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_IRQHandler>
	...

08001068 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800107c:	f06f 0301 	mvn.w	r3, #1
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
 8001082:	e023      	b.n	80010cc <BSP_LED_Init+0x64>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10e      	bne.n	80010a8 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <BSP_LED_Init+0x70>)
 800108c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001090:	4a11      	ldr	r2, [pc, #68]	@ (80010d8 <BSP_LED_Init+0x70>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <BSP_LED_Init+0x70>)
 800109c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80010a8:	2320      	movs	r3, #32
 80010aa:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <BSP_LED_Init+0x74>)
 80010bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c0:	f107 0210 	add.w	r2, r7, #16
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fc90 	bl	80019ec <HAL_GPIO_Init>
  }

  return ret;
 80010cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3728      	adds	r7, #40	@ 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	46020c00 	.word	0x46020c00
 80010dc:	20000008 	.word	0x20000008

080010e0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <BSP_LED_On+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010f4:	f06f 0301 	mvn.w	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	e008      	b.n	800110e <BSP_LED_On+0x2e>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	4a06      	ldr	r2, [pc, #24]	@ (8001118 <BSP_LED_On+0x38>)
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	2120      	movs	r1, #32
 8001106:	2201      	movs	r2, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f000 ff45 	bl	8001f98 <HAL_GPIO_WritePin>
  }

  return ret;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000008 	.word	0x20000008

0800111c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <BSP_LED_Off+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001130:	f06f 0301 	mvn.w	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	e008      	b.n	800114a <BSP_LED_Off+0x2e>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <BSP_LED_Off+0x38>)
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	2120      	movs	r1, #32
 8001142:	2200      	movs	r2, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f000 ff27 	bl	8001f98 <HAL_GPIO_WritePin>
  }

  return ret;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000008 	.word	0x20000008

08001158 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <BSP_LED_Toggle+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800116c:	f06f 0301 	mvn.w	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	e008      	b.n	8001186 <BSP_LED_Toggle+0x2e>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4a06      	ldr	r2, [pc, #24]	@ (8001190 <BSP_LED_Toggle+0x38>)
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	2220      	movs	r2, #32
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f000 ff21 	bl	8001fc8 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000008 	.word	0x20000008

08001194 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	460a      	mov	r2, r1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	4613      	mov	r3, r2
 80011a2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80011a4:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <BSP_PB_Init+0xd4>)
 80011a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001268 <BSP_PB_Init+0xd4>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001268 <BSP_PB_Init+0xd4>)
 80011b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80011c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80011c8:	2302      	movs	r3, #2
 80011ca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10c      	bne.n	80011f0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	4a23      	ldr	r2, [pc, #140]	@ (800126c <BSP_PB_Init+0xd8>)
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	f107 020c 	add.w	r2, r7, #12
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fbff 	bl	80019ec <HAL_GPIO_Init>
 80011ee:	e036      	b.n	800125e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <BSP_PB_Init+0xdc>)
 80011f2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4a1d      	ldr	r2, [pc, #116]	@ (800126c <BSP_PB_Init+0xd8>)
 80011f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fc:	f107 020c 	add.w	r2, r7, #12
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fbf2 	bl	80019ec <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001208:	79fa      	ldrb	r2, [r7, #7]
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4a18      	ldr	r2, [pc, #96]	@ (8001274 <BSP_PB_Init+0xe0>)
 8001214:	441a      	add	r2, r3
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4917      	ldr	r1, [pc, #92]	@ (8001278 <BSP_PB_Init+0xe4>)
 800121a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800121e:	4619      	mov	r1, r3
 8001220:	4610      	mov	r0, r2
 8001222:	f000 fbcf 	bl	80019c4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4a10      	ldr	r2, [pc, #64]	@ (8001274 <BSP_PB_Init+0xe0>)
 8001232:	1898      	adds	r0, r3, r2
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4a11      	ldr	r2, [pc, #68]	@ (800127c <BSP_PB_Init+0xe8>)
 8001238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123c:	461a      	mov	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	f000 fb94 	bl	800196c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001244:	2018      	movs	r0, #24
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <BSP_PB_Init+0xec>)
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	2200      	movs	r2, #0
 8001250:	4619      	mov	r1, r3
 8001252:	f000 faaf 	bl	80017b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001256:	2318      	movs	r3, #24
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fac5 	bl	80017e8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	46020c00 	.word	0x46020c00
 800126c:	2000000c 	.word	0x2000000c
 8001270:	10110000 	.word	0x10110000
 8001274:	20000134 	.word	0x20000134
 8001278:	0800f990 	.word	0x0800f990
 800127c:	20000010 	.word	0x20000010
 8001280:	20000014 	.word	0x20000014

08001284 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: Wakeup Push Button
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	4a06      	ldr	r2, [pc, #24]	@ (80012ac <BSP_PB_GetState+0x28>)
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fe63 	bl	8001f68 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000000c 	.word	0x2000000c

080012b0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80012c6:	f06f 0301 	mvn.w	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	e018      	b.n	8001300 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2294      	movs	r2, #148	@ 0x94
 80012d2:	fb02 f303 	mul.w	r3, r2, r3
 80012d6:	4a0d      	ldr	r2, [pc, #52]	@ (800130c <BSP_COM_Init+0x5c>)
 80012d8:	4413      	add	r3, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f870 	bl	80013c0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2294      	movs	r2, #148	@ 0x94
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	4a08      	ldr	r2, [pc, #32]	@ (800130c <BSP_COM_Init+0x5c>)
 80012ea:	4413      	add	r3, r2
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f80e 	bl	8001310 <MX_USART1_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80012fa:	f06f 0303 	mvn.w	r3, #3
 80012fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001300:	68fb      	ldr	r3, [r7, #12]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000140 	.word	0x20000140

08001310 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_USART1_Init+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	220c      	movs	r2, #12
 800132e:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	895b      	ldrh	r3, [r3, #10]
 8001334:	461a      	mov	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	891b      	ldrh	r3, [r3, #8]
 8001346:	461a      	mov	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	899b      	ldrh	r3, [r3, #12]
 8001350:	461a      	mov	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800135c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f004 fdbf 	bl	8005ee8 <HAL_UART_Init>
 800136a:	4603      	mov	r3, r0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000004 	.word	0x20000004

08001378 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <__io_putchar+0x30>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	2394      	movs	r3, #148	@ 0x94
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	4a07      	ldr	r2, [pc, #28]	@ (80013ac <__io_putchar+0x34>)
 800138e:	1898      	adds	r0, r3, r2
 8001390:	1d39      	adds	r1, r7, #4
 8001392:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001396:	2201      	movs	r2, #1
 8001398:	f004 fe00 	bl	8005f9c <HAL_UART_Transmit>
  return ch;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001d4 	.word	0x200001d4
 80013ac:	20000140 	.word	0x20000140

080013b0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f00c fd03 	bl	800ddc0 <BSP_PB_Callback>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	@ 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80013c8:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <COM1_MspInit+0xa8>)
 80013ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ce:	4a26      	ldr	r2, [pc, #152]	@ (8001468 <COM1_MspInit+0xa8>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013d8:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <COM1_MspInit+0xa8>)
 80013da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80013e6:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <COM1_MspInit+0xa8>)
 80013e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001468 <COM1_MspInit+0xa8>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <COM1_MspInit+0xa8>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <COM1_MspInit+0xa8>)
 8001406:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800140a:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <COM1_MspInit+0xa8>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001410:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001414:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <COM1_MspInit+0xa8>)
 8001416:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800141a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001426:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800142c:	2302      	movs	r3, #2
 800142e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001430:	2301      	movs	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001434:	2307      	movs	r3, #7
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	480b      	ldr	r0, [pc, #44]	@ (800146c <COM1_MspInit+0xac>)
 8001440:	f000 fad4 	bl	80019ec <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001444:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001448:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800144e:	2307      	movs	r3, #7
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4804      	ldr	r0, [pc, #16]	@ (800146c <COM1_MspInit+0xac>)
 800145a:	f000 fac7 	bl	80019ec <HAL_GPIO_Init>
}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	@ 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	46020c00 	.word	0x46020c00
 800146c:	42020000 	.word	0x42020000

08001470 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_Init+0x50>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <HAL_Init+0x50>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f98c 	bl	800179e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001486:	f001 ff93 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 800148a:	4602      	mov	r2, r0
 800148c:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <HAL_Init+0x54>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	490c      	ldr	r1, [pc, #48]	@ (80014c8 <HAL_Init+0x58>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	4a0b      	ldr	r2, [pc, #44]	@ (80014cc <HAL_Init+0x5c>)
 800149e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80014a0:	2004      	movs	r0, #4
 80014a2:	f000 f9d1 	bl	8001848 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a6:	200f      	movs	r0, #15
 80014a8:	f000 f812 	bl	80014d0 <HAL_InitTick>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e002      	b.n	80014bc <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014b6:	f7ff fb3d 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40022000 	.word	0x40022000
 80014c4:	46020c00 	.word	0x46020c00
 80014c8:	0800f938 	.word	0x0800f938
 80014cc:	20000000 	.word	0x20000000

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80014dc:	4b33      	ldr	r3, [pc, #204]	@ (80015ac <HAL_InitTick+0xdc>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e05c      	b.n	80015a2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80014e8:	4b31      	ldr	r3, [pc, #196]	@ (80015b0 <HAL_InitTick+0xe0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d10c      	bne.n	800150e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80014f4:	4b2f      	ldr	r3, [pc, #188]	@ (80015b4 <HAL_InitTick+0xe4>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b2c      	ldr	r3, [pc, #176]	@ (80015ac <HAL_InitTick+0xdc>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e037      	b.n	800157e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800150e:	f000 f9f3 	bl	80018f8 <HAL_SYSTICK_GetCLKSourceConfig>
 8001512:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d023      	beq.n	8001562 <HAL_InitTick+0x92>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d82d      	bhi.n	800157c <HAL_InitTick+0xac>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_InitTick+0x5e>
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d00d      	beq.n	8001548 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800152c:	e026      	b.n	800157c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800152e:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <HAL_InitTick+0xe4>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <HAL_InitTick+0xdc>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800153c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001540:	fbb2 f3f3 	udiv	r3, r2, r3
 8001544:	60fb      	str	r3, [r7, #12]
        break;
 8001546:	e01a      	b.n	800157e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001548:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <HAL_InitTick+0xdc>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001552:	fbb3 f3f2 	udiv	r3, r3, r2
 8001556:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	60fb      	str	r3, [r7, #12]
        break;
 8001560:	e00d      	b.n	800157e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_InitTick+0xdc>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001570:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001574:	fbb2 f3f3 	udiv	r3, r2, r3
 8001578:	60fb      	str	r3, [r7, #12]
        break;
 800157a:	e000      	b.n	800157e <HAL_InitTick+0xae>
        break;
 800157c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 f940 	bl	8001804 <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e009      	b.n	80015a2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158e:	2200      	movs	r2, #0
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	f04f 30ff 	mov.w	r0, #4294967295
 8001596:	f000 f90d 	bl	80017b4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800159a:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <HAL_InitTick+0xe8>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000001c 	.word	0x2000001c
 80015b0:	e000e010 	.word	0xe000e010
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000018 	.word	0x20000018

080015bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	@ (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2000001c 	.word	0x2000001c
 80015e0:	200001d8 	.word	0x200001d8

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	@ (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200001d8 	.word	0x200001d8

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001616:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <HAL_Delay+0x44>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001622:	bf00      	nop
 8001624:	f7ff ffde 	bl	80015e4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000001c 	.word	0x2000001c

08001644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800166c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db0b      	blt.n	80016d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	4907      	ldr	r1, [pc, #28]	@ (80016e0 <__NVIC_EnableIRQ+0x38>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2001      	movs	r0, #1
 80016ca:	fa00 f202 	lsl.w	r2, r0, r2
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0a      	blt.n	800170e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	490c      	ldr	r1, [pc, #48]	@ (8001730 <__NVIC_SetPriority+0x4c>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	440b      	add	r3, r1
 8001708:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800170c:	e00a      	b.n	8001724 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4908      	ldr	r1, [pc, #32]	@ (8001734 <__NVIC_SetPriority+0x50>)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3b04      	subs	r3, #4
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	440b      	add	r3, r1
 8001722:	761a      	strb	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	@ 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f1c3 0307 	rsb	r3, r3, #7
 8001752:	2b04      	cmp	r3, #4
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3304      	adds	r3, #4
 800175e:	2b06      	cmp	r3, #6
 8001760:	d902      	bls.n	8001768 <NVIC_EncodePriority+0x30>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b03      	subs	r3, #3
 8001766:	e000      	b.n	800176a <NVIC_EncodePriority+0x32>
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43d9      	mvns	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	4313      	orrs	r3, r2
         );
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	@ 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff4c 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c2:	f7ff ff63 	bl	800168c <__NVIC_GetPriorityGrouping>
 80017c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	68b9      	ldr	r1, [r7, #8]
 80017cc:	6978      	ldr	r0, [r7, #20]
 80017ce:	f7ff ffb3 	bl	8001738 <NVIC_EncodePriority>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff82 	bl	80016e4 <__NVIC_SetPriority>
}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff56 	bl	80016a8 <__NVIC_EnableIRQ>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001814:	d301      	bcc.n	800181a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001816:	2301      	movs	r3, #1
 8001818:	e00d      	b.n	8001836 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800181a:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <HAL_SYSTICK_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001822:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <HAL_SYSTICK_Config+0x40>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_SYSTICK_Config+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <HAL_SYSTICK_Config+0x40>)
 800182e:	f043 0303 	orr.w	r3, r3, #3
 8001832:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b04      	cmp	r3, #4
 8001854:	d844      	bhi.n	80018e0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001856:	a201      	add	r2, pc, #4	@ (adr r2, 800185c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	0800187f 	.word	0x0800187f
 8001860:	0800189d 	.word	0x0800189d
 8001864:	080018bf 	.word	0x080018bf
 8001868:	080018e1 	.word	0x080018e1
 800186c:	08001871 	.word	0x08001871
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001870:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a1e      	ldr	r2, [pc, #120]	@ (80018f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6013      	str	r3, [r2, #0]
      break;
 800187c:	e031      	b.n	80018e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800187e:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800188a:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001890:	4a18      	ldr	r2, [pc, #96]	@ (80018f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001892:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800189a:	e022      	b.n	80018e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a13      	ldr	r2, [pc, #76]	@ (80018f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018a2:	f023 0304 	bic.w	r3, r3, #4
 80018a6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80018b2:	4a10      	ldr	r2, [pc, #64]	@ (80018f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80018bc:	e011      	b.n	80018e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	@ (80018f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80018d4:	4a07      	ldr	r2, [pc, #28]	@ (80018f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80018de:	e000      	b.n	80018e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80018e0:	bf00      	nop
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010
 80018f4:	46020c00 	.word	0x46020c00

080018f8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80018fe:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800190a:	2304      	movs	r3, #4
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	e021      	b.n	8001954 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001910:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001916:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800191a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001922:	d011      	beq.n	8001948 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800192a:	d810      	bhi.n	800194e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d004      	beq.n	800193c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001938:	d003      	beq.n	8001942 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800193a:	e008      	b.n	800194e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
        break;
 8001940:	e008      	b.n	8001954 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001942:	2301      	movs	r3, #1
 8001944:	607b      	str	r3, [r7, #4]
        break;
 8001946:	e005      	b.n	8001954 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001948:	2302      	movs	r3, #2
 800194a:	607b      	str	r3, [r7, #4]
        break;
 800194c:	e002      	b.n	8001954 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
        break;
 8001952:	bf00      	nop
    }
  }
  return systick_source;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010
 8001968:	46020c00 	.word	0x46020c00

0800196c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	460b      	mov	r3, r1
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800197e:	7afb      	ldrb	r3, [r7, #11]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d011      	beq.n	80019a8 <HAL_EXTI_RegisterCallback+0x3c>
 8001984:	2b02      	cmp	r3, #2
 8001986:	dc13      	bgt.n	80019b0 <HAL_EXTI_RegisterCallback+0x44>
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <HAL_EXTI_RegisterCallback+0x26>
 800198c:	2b01      	cmp	r3, #1
 800198e:	d007      	beq.n	80019a0 <HAL_EXTI_RegisterCallback+0x34>
 8001990:	e00e      	b.n	80019b0 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	609a      	str	r2, [r3, #8]
      break;
 800199e:	e00a      	b.n	80019b6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	605a      	str	r2, [r3, #4]
      break;
 80019a6:	e006      	b.n	80019b6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	609a      	str	r2, [r3, #8]
      break;
 80019ae:	e002      	b.n	80019b6 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	75fb      	strb	r3, [r7, #23]
      break;
 80019b4:	bf00      	nop
  }

  return status;
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e003      	b.n	80019e0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80019de:	2300      	movs	r3, #0
  }
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	@ 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80019fe:	e1c2      	b.n	8001d86 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2101      	movs	r1, #1
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 81b2 	beq.w	8001d80 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a55      	ldr	r2, [pc, #340]	@ (8001b74 <HAL_GPIO_Init+0x188>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d15d      	bne.n	8001ae0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0201 	and.w	r2, r3, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001a54:	4a48      	ldr	r2, [pc, #288]	@ (8001b78 <HAL_GPIO_Init+0x18c>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a5c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001a5e:	4a46      	ldr	r2, [pc, #280]	@ (8001b78 <HAL_GPIO_Init+0x18c>)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	3208      	adds	r2, #8
 8001a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a76:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220b      	movs	r2, #11
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	08da      	lsrs	r2, r3, #3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	3208      	adds	r2, #8
 8001aaa:	69f9      	ldr	r1, [r7, #28]
 8001aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2202      	movs	r2, #2
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e067      	b.n	8001bb0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x104>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b12      	cmp	r3, #18
 8001aee:	d145      	bne.n	8001b7c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	220f      	movs	r2, #15
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f003 020f 	and.w	r2, r3, #15
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	69f9      	ldr	r1, [r7, #28]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e01e      	b.n	8001bb0 <HAL_GPIO_Init+0x1c4>
 8001b72:	bf00      	nop
 8001b74:	46020000 	.word	0x46020000
 8001b78:	0800f994 	.word	0x0800f994
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_GPIO_Init+0x1e4>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d007      	beq.n	8001bd0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bc4:	2b11      	cmp	r3, #17
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b12      	cmp	r3, #18
 8001bce:	d130      	bne.n	8001c32 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001c06:	2201      	movs	r2, #1
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f003 0201 	and.w	r2, r3, #1
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d107      	bne.n	8001c4a <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d11b      	bne.n	8001c7a <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d017      	beq.n	8001c7a <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d07c      	beq.n	8001d80 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001c86:	4a47      	ldr	r2, [pc, #284]	@ (8001da4 <HAL_GPIO_Init+0x3b8>)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3318      	adds	r3, #24
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0a9a      	lsrs	r2, r3, #10
 8001cae:	4b3e      	ldr	r3, [pc, #248]	@ (8001da8 <HAL_GPIO_Init+0x3bc>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	f002 0203 	and.w	r2, r2, #3
 8001cb8:	00d2      	lsls	r2, r2, #3
 8001cba:	4093      	lsls	r3, r2
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001cc2:	4938      	ldr	r1, [pc, #224]	@ (8001da4 <HAL_GPIO_Init+0x3b8>)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3318      	adds	r3, #24
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001cd0:	4b34      	ldr	r3, [pc, #208]	@ (8001da4 <HAL_GPIO_Init+0x3b8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8001da4 <HAL_GPIO_Init+0x3b8>)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001da4 <HAL_GPIO_Init+0x3b8>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001d1e:	4a21      	ldr	r2, [pc, #132]	@ (8001da4 <HAL_GPIO_Init+0x3b8>)
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001d24:	4b1f      	ldr	r3, [pc, #124]	@ (8001da4 <HAL_GPIO_Init+0x3b8>)
 8001d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d2a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001d4a:	4a16      	ldr	r2, [pc, #88]	@ (8001da4 <HAL_GPIO_Init+0x3b8>)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001d52:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <HAL_GPIO_Init+0x3b8>)
 8001d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d58:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001d78:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <HAL_GPIO_Init+0x3b8>)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f47f ae35 	bne.w	8001a00 <HAL_GPIO_Init+0x14>
  }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	3724      	adds	r7, #36	@ 0x24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	46022000 	.word	0x46022000
 8001da8:	002f7f7f 	.word	0x002f7f7f

08001dac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	@ 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8001dbe:	e0bc      	b.n	8001f3a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80ad 	beq.w	8001f34 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a5e      	ldr	r2, [pc, #376]	@ (8001f58 <HAL_GPIO_DeInit+0x1ac>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d115      	bne.n	8001e0e <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8001de2:	4a5e      	ldr	r2, [pc, #376]	@ (8001f5c <HAL_GPIO_DeInit+0x1b0>)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001dea:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001dec:	4a5b      	ldr	r2, [pc, #364]	@ (8001f5c <HAL_GPIO_DeInit+0x1b0>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8001df8:	4b57      	ldr	r3, [pc, #348]	@ (8001f58 <HAL_GPIO_DeInit+0x1ac>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	4954      	ldr	r1, [pc, #336]	@ (8001f58 <HAL_GPIO_DeInit+0x1ac>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
 8001e0c:	e053      	b.n	8001eb6 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8001e0e:	4a54      	ldr	r2, [pc, #336]	@ (8001f60 <HAL_GPIO_DeInit+0x1b4>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3318      	adds	r3, #24
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0a9a      	lsrs	r2, r3, #10
 8001e34:	4b4b      	ldr	r3, [pc, #300]	@ (8001f64 <HAL_GPIO_DeInit+0x1b8>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	00d2      	lsls	r2, r2, #3
 8001e40:	4093      	lsls	r3, r2
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d136      	bne.n	8001eb6 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8001e48:	4b45      	ldr	r3, [pc, #276]	@ (8001f60 <HAL_GPIO_DeInit+0x1b4>)
 8001e4a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4943      	ldr	r1, [pc, #268]	@ (8001f60 <HAL_GPIO_DeInit+0x1b4>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8001e5a:	4b41      	ldr	r3, [pc, #260]	@ (8001f60 <HAL_GPIO_DeInit+0x1b4>)
 8001e5c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	493e      	ldr	r1, [pc, #248]	@ (8001f60 <HAL_GPIO_DeInit+0x1b4>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8001e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f60 <HAL_GPIO_DeInit+0x1b4>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	493a      	ldr	r1, [pc, #232]	@ (8001f60 <HAL_GPIO_DeInit+0x1b4>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8001e7a:	4b39      	ldr	r3, [pc, #228]	@ (8001f60 <HAL_GPIO_DeInit+0x1b4>)
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4937      	ldr	r1, [pc, #220]	@ (8001f60 <HAL_GPIO_DeInit+0x1b4>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8001e98:	4a31      	ldr	r2, [pc, #196]	@ (8001f60 <HAL_GPIO_DeInit+0x1b4>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	482d      	ldr	r0, [pc, #180]	@ (8001f60 <HAL_GPIO_DeInit+0x1b4>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	400a      	ands	r2, r1
 8001eb0:	3318      	adds	r3, #24
 8001eb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2103      	movs	r1, #3
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	08da      	lsrs	r2, r3, #3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3208      	adds	r2, #8
 8001ed2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	08d2      	lsrs	r2, r2, #3
 8001eea:	4019      	ands	r1, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3208      	adds	r2, #8
 8001ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2103      	movs	r1, #3
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	401a      	ands	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	401a      	ands	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2103      	movs	r1, #3
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	3301      	adds	r3, #1
 8001f38:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f47f af3c 	bne.w	8001dc0 <HAL_GPIO_DeInit+0x14>
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3724      	adds	r7, #36	@ 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	46020000 	.word	0x46020000
 8001f5c:	0800f994 	.word	0x0800f994
 8001f60:	46022000 	.word	0x46022000
 8001f64:	002f7f7f 	.word	0x002f7f7f

08001f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e001      	b.n	8001f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa8:	787b      	ldrb	r3, [r7, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001fb4:	e002      	b.n	8001fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	041a      	lsls	r2, r3, #16
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	43d9      	mvns	r1, r3
 8001fe6:	887b      	ldrh	r3, [r7, #2]
 8001fe8:	400b      	ands	r3, r1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	619a      	str	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e007      	b.n	800202a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800201a:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 0204 	bic.w	r2, r3, #4
 8002022:	4905      	ldr	r1, [pc, #20]	@ (8002038 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
  }

  return status;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40030400 	.word	0x40030400

0800203c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002040:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <HAL_ICACHE_Enable+0x1c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <HAL_ICACHE_Enable+0x1c>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40030400 	.word	0x40030400

0800205c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002064:	4b39      	ldr	r3, [pc, #228]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800206c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	d10b      	bne.n	800208e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800207c:	d905      	bls.n	800208a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800207e:	4b33      	ldr	r3, [pc, #204]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	4a32      	ldr	r2, [pc, #200]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002088:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e057      	b.n	800213e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002094:	d90a      	bls.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002096:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	4a2a      	ldr	r2, [pc, #168]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a8:	60d3      	str	r3, [r2, #12]
 80020aa:	e007      	b.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80020ac:	4b27      	ldr	r3, [pc, #156]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80020b4:	4925      	ldr	r1, [pc, #148]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80020bc:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a24      	ldr	r2, [pc, #144]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	2232      	movs	r2, #50	@ 0x32
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	4a21      	ldr	r2, [pc, #132]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	3301      	adds	r3, #1
 80020d8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80020da:	e002      	b.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3b01      	subs	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80020e2:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d102      	bne.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f3      	bne.n	80020dc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01b      	beq.n	8002132 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a15      	ldr	r2, [pc, #84]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	2232      	movs	r2, #50	@ 0x32
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	4a11      	ldr	r2, [pc, #68]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	099b      	lsrs	r3, r3, #6
 8002114:	3301      	adds	r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002118:	e002      	b.n	8002120 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3b01      	subs	r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002120:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f3      	bne.n	800211a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e000      	b.n	800213e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	46020800 	.word	0x46020800
 8002150:	20000000 	.word	0x20000000
 8002154:	10624dd3 	.word	0x10624dd3

08002158 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800215c:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <HAL_PWREx_GetVoltageRange+0x18>)
 800215e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	46020800 	.word	0x46020800

08002174 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800217c:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <HAL_PWREx_ConfigSupply+0x94>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a22      	ldr	r2, [pc, #136]	@ (800220c <HAL_PWREx_ConfigSupply+0x98>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	099b      	lsrs	r3, r3, #6
 8002188:	2232      	movs	r2, #50	@ 0x32
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	4a1f      	ldr	r2, [pc, #124]	@ (800220c <HAL_PWREx_ConfigSupply+0x98>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	3301      	adds	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d113      	bne.n	80021c8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80021a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002210 <HAL_PWREx_ConfigSupply+0x9c>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002210 <HAL_PWREx_ConfigSupply+0x9c>)
 80021a6:	f023 0302 	bic.w	r3, r3, #2
 80021aa:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021ac:	e002      	b.n	80021b4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021b4:	4b16      	ldr	r3, [pc, #88]	@ (8002210 <HAL_PWREx_ConfigSupply+0x9c>)
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d116      	bne.n	80021ee <HAL_PWREx_ConfigSupply+0x7a>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f3      	bne.n	80021ae <HAL_PWREx_ConfigSupply+0x3a>
 80021c6:	e012      	b.n	80021ee <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_PWREx_ConfigSupply+0x9c>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a10      	ldr	r2, [pc, #64]	@ (8002210 <HAL_PWREx_ConfigSupply+0x9c>)
 80021ce:	f043 0302 	orr.w	r3, r3, #2
 80021d2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021d4:	e002      	b.n	80021dc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <HAL_PWREx_ConfigSupply+0x9c>)
 80021de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <HAL_PWREx_ConfigSupply+0x7a>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f3      	bne.n	80021d6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e000      	b.n	80021fa <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000000 	.word	0x20000000
 800220c:	10624dd3 	.word	0x10624dd3
 8002210:	46020800 	.word	0x46020800

08002214 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08e      	sub	sp, #56	@ 0x38
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	f000 bec8 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222e:	4b99      	ldr	r3, [pc, #612]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002238:	4b96      	ldr	r3, [pc, #600]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800223a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 816c 	beq.w	8002528 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <HAL_RCC_OscConfig+0x52>
 8002256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002258:	2b0c      	cmp	r3, #12
 800225a:	f040 80de 	bne.w	800241a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800225e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002260:	2b01      	cmp	r3, #1
 8002262:	f040 80da 	bne.w	800241a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d102      	bne.n	8002274 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	f000 bea5 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002278:	4b86      	ldr	r3, [pc, #536]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <HAL_RCC_OscConfig+0x7a>
 8002284:	4b83      	ldr	r3, [pc, #524]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800228c:	e005      	b.n	800229a <HAL_RCC_OscConfig+0x86>
 800228e:	4b81      	ldr	r3, [pc, #516]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800229a:	4293      	cmp	r3, r2
 800229c:	d255      	bcs.n	800234a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800229e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10a      	bne.n	80022ba <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	4618      	mov	r0, r3
 80022aa:	f001 f9d9 	bl	8003660 <RCC_SetFlashLatencyFromMSIRange>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	f000 be82 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80022ba:	4b76      	ldr	r3, [pc, #472]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	4a75      	ldr	r2, [pc, #468]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022c4:	6093      	str	r3, [r2, #8]
 80022c6:	4b73      	ldr	r3, [pc, #460]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	4970      	ldr	r1, [pc, #448]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80022e0:	d309      	bcc.n	80022f6 <HAL_RCC_OscConfig+0xe2>
 80022e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f023 021f 	bic.w	r2, r3, #31
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4969      	ldr	r1, [pc, #420]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60cb      	str	r3, [r1, #12]
 80022f4:	e07e      	b.n	80023f4 <HAL_RCC_OscConfig+0x1e0>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	da0a      	bge.n	8002314 <HAL_RCC_OscConfig+0x100>
 80022fe:	4b65      	ldr	r3, [pc, #404]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	015b      	lsls	r3, r3, #5
 800230c:	4961      	ldr	r1, [pc, #388]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800230e:	4313      	orrs	r3, r2
 8002310:	60cb      	str	r3, [r1, #12]
 8002312:	e06f      	b.n	80023f4 <HAL_RCC_OscConfig+0x1e0>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800231c:	d30a      	bcc.n	8002334 <HAL_RCC_OscConfig+0x120>
 800231e:	4b5d      	ldr	r3, [pc, #372]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	029b      	lsls	r3, r3, #10
 800232c:	4959      	ldr	r1, [pc, #356]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800232e:	4313      	orrs	r3, r2
 8002330:	60cb      	str	r3, [r1, #12]
 8002332:	e05f      	b.n	80023f4 <HAL_RCC_OscConfig+0x1e0>
 8002334:	4b57      	ldr	r3, [pc, #348]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	03db      	lsls	r3, r3, #15
 8002342:	4954      	ldr	r1, [pc, #336]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002344:	4313      	orrs	r3, r2
 8002346:	60cb      	str	r3, [r1, #12]
 8002348:	e054      	b.n	80023f4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800234a:	4b52      	ldr	r3, [pc, #328]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	4a51      	ldr	r2, [pc, #324]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002350:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002354:	6093      	str	r3, [r2, #8]
 8002356:	4b4f      	ldr	r3, [pc, #316]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	494c      	ldr	r1, [pc, #304]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002364:	4313      	orrs	r3, r2
 8002366:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002370:	d309      	bcc.n	8002386 <HAL_RCC_OscConfig+0x172>
 8002372:	4b48      	ldr	r3, [pc, #288]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f023 021f 	bic.w	r2, r3, #31
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4945      	ldr	r1, [pc, #276]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002380:	4313      	orrs	r3, r2
 8002382:	60cb      	str	r3, [r1, #12]
 8002384:	e028      	b.n	80023d8 <HAL_RCC_OscConfig+0x1c4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	2b00      	cmp	r3, #0
 800238c:	da0a      	bge.n	80023a4 <HAL_RCC_OscConfig+0x190>
 800238e:	4b41      	ldr	r3, [pc, #260]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	015b      	lsls	r3, r3, #5
 800239c:	493d      	ldr	r1, [pc, #244]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	60cb      	str	r3, [r1, #12]
 80023a2:	e019      	b.n	80023d8 <HAL_RCC_OscConfig+0x1c4>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ac:	d30a      	bcc.n	80023c4 <HAL_RCC_OscConfig+0x1b0>
 80023ae:	4b39      	ldr	r3, [pc, #228]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	029b      	lsls	r3, r3, #10
 80023bc:	4935      	ldr	r1, [pc, #212]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	60cb      	str	r3, [r1, #12]
 80023c2:	e009      	b.n	80023d8 <HAL_RCC_OscConfig+0x1c4>
 80023c4:	4b33      	ldr	r3, [pc, #204]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	03db      	lsls	r3, r3, #15
 80023d2:	4930      	ldr	r1, [pc, #192]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10a      	bne.n	80023f4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	4618      	mov	r0, r3
 80023e4:	f001 f93c 	bl	8003660 <RCC_SetFlashLatencyFromMSIRange>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f000 bde5 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80023f4:	f001 f8de 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023f8:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <HAL_RCC_OscConfig+0x284>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f867 	bl	80014d0 <HAL_InitTick>
 8002402:	4603      	mov	r3, r0
 8002404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8002408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 808a 	beq.w	8002526 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002412:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002416:	f000 bdd2 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d066      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002422:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1b      	ldr	r2, [pc, #108]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800242e:	f7ff f8d9 	bl	80015e4 <HAL_GetTick>
 8002432:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002434:	e009      	b.n	800244a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002436:	f7ff f8d5 	bl	80015e4 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d902      	bls.n	800244a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	f000 bdba 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800244a:	4b12      	ldr	r3, [pc, #72]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ef      	beq.n	8002436 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002456:	4b0f      	ldr	r3, [pc, #60]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4a0e      	ldr	r2, [pc, #56]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800245c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002460:	6093      	str	r3, [r2, #8]
 8002462:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246e:	4909      	ldr	r1, [pc, #36]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800247c:	d30e      	bcc.n	800249c <HAL_RCC_OscConfig+0x288>
 800247e:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f023 021f 	bic.w	r2, r3, #31
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4902      	ldr	r1, [pc, #8]	@ (8002494 <HAL_RCC_OscConfig+0x280>)
 800248c:	4313      	orrs	r3, r2
 800248e:	60cb      	str	r3, [r1, #12]
 8002490:	e04a      	b.n	8002528 <HAL_RCC_OscConfig+0x314>
 8002492:	bf00      	nop
 8002494:	46020c00 	.word	0x46020c00
 8002498:	20000018 	.word	0x20000018
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da0a      	bge.n	80024ba <HAL_RCC_OscConfig+0x2a6>
 80024a4:	4b98      	ldr	r3, [pc, #608]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	015b      	lsls	r3, r3, #5
 80024b2:	4995      	ldr	r1, [pc, #596]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
 80024b8:	e036      	b.n	8002528 <HAL_RCC_OscConfig+0x314>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c2:	d30a      	bcc.n	80024da <HAL_RCC_OscConfig+0x2c6>
 80024c4:	4b90      	ldr	r3, [pc, #576]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	029b      	lsls	r3, r3, #10
 80024d2:	498d      	ldr	r1, [pc, #564]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
 80024d8:	e026      	b.n	8002528 <HAL_RCC_OscConfig+0x314>
 80024da:	4b8b      	ldr	r3, [pc, #556]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	03db      	lsls	r3, r3, #15
 80024e8:	4987      	ldr	r1, [pc, #540]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60cb      	str	r3, [r1, #12]
 80024ee:	e01b      	b.n	8002528 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80024f0:	4b85      	ldr	r3, [pc, #532]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a84      	ldr	r2, [pc, #528]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80024fc:	f7ff f872 	bl	80015e4 <HAL_GetTick>
 8002500:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002502:	e009      	b.n	8002518 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002504:	f7ff f86e 	bl	80015e4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d902      	bls.n	8002518 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	f000 bd53 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002518:	4b7b      	ldr	r3, [pc, #492]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ef      	bne.n	8002504 <HAL_RCC_OscConfig+0x2f0>
 8002524:	e000      	b.n	8002528 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002526:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 808b 	beq.w	800264c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	2b08      	cmp	r3, #8
 800253a:	d005      	beq.n	8002548 <HAL_RCC_OscConfig+0x334>
 800253c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253e:	2b0c      	cmp	r3, #12
 8002540:	d109      	bne.n	8002556 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002544:	2b03      	cmp	r3, #3
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d17d      	bne.n	800264c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	f000 bd34 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x35a>
 8002560:	4b69      	ldr	r3, [pc, #420]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a68      	ldr	r2, [pc, #416]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	e041      	b.n	80025f2 <HAL_RCC_OscConfig+0x3de>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002576:	d112      	bne.n	800259e <HAL_RCC_OscConfig+0x38a>
 8002578:	4b63      	ldr	r3, [pc, #396]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a62      	ldr	r2, [pc, #392]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b60      	ldr	r3, [pc, #384]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a5f      	ldr	r2, [pc, #380]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b5d      	ldr	r3, [pc, #372]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a5c      	ldr	r2, [pc, #368]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	e029      	b.n	80025f2 <HAL_RCC_OscConfig+0x3de>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80025a6:	d112      	bne.n	80025ce <HAL_RCC_OscConfig+0x3ba>
 80025a8:	4b57      	ldr	r3, [pc, #348]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a56      	ldr	r2, [pc, #344]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b54      	ldr	r3, [pc, #336]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a53      	ldr	r2, [pc, #332]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b51      	ldr	r3, [pc, #324]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a50      	ldr	r2, [pc, #320]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e011      	b.n	80025f2 <HAL_RCC_OscConfig+0x3de>
 80025ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b4b      	ldr	r3, [pc, #300]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a4a      	ldr	r2, [pc, #296]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b48      	ldr	r3, [pc, #288]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a47      	ldr	r2, [pc, #284]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d014      	beq.n	8002624 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80025fa:	f7fe fff3 	bl	80015e4 <HAL_GetTick>
 80025fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002600:	e009      	b.n	8002616 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002602:	f7fe ffef 	bl	80015e4 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b64      	cmp	r3, #100	@ 0x64
 800260e:	d902      	bls.n	8002616 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	f000 bcd4 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002616:	4b3c      	ldr	r3, [pc, #240]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0ef      	beq.n	8002602 <HAL_RCC_OscConfig+0x3ee>
 8002622:	e013      	b.n	800264c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002624:	f7fe ffde 	bl	80015e4 <HAL_GetTick>
 8002628:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800262a:	e009      	b.n	8002640 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800262c:	f7fe ffda 	bl	80015e4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	@ 0x64
 8002638:	d902      	bls.n	8002640 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	f000 bcbf 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002640:	4b31      	ldr	r3, [pc, #196]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ef      	bne.n	800262c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d05f      	beq.n	8002718 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265a:	2b04      	cmp	r3, #4
 800265c:	d005      	beq.n	800266a <HAL_RCC_OscConfig+0x456>
 800265e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002660:	2b0c      	cmp	r3, #12
 8002662:	d114      	bne.n	800268e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002666:	2b02      	cmp	r3, #2
 8002668:	d111      	bne.n	800268e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d102      	bne.n	8002678 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	f000 bca3 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b23      	ldr	r3, [pc, #140]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	041b      	lsls	r3, r3, #16
 8002686:	4920      	ldr	r1, [pc, #128]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800268c:	e044      	b.n	8002718 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d024      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002696:	4b1c      	ldr	r3, [pc, #112]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1b      	ldr	r2, [pc, #108]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80026a2:	f7fe ff9f 	bl	80015e4 <HAL_GetTick>
 80026a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a8:	e009      	b.n	80026be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026aa:	f7fe ff9b 	bl	80015e4 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d902      	bls.n	80026be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	f000 bc80 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026be:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0ef      	beq.n	80026aa <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80026ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	490b      	ldr	r1, [pc, #44]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	610b      	str	r3, [r1, #16]
 80026de:	e01b      	b.n	8002718 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a08      	ldr	r2, [pc, #32]	@ (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80026ec:	f7fe ff7a 	bl	80015e4 <HAL_GetTick>
 80026f0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f4:	f7fe ff76 	bl	80015e4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d904      	bls.n	800270c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	f000 bc5b 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
 8002708:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800270c:	4baf      	ldr	r3, [pc, #700]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ed      	bne.n	80026f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80c8 	beq.w	80028b6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272c:	4ba7      	ldr	r3, [pc, #668]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d111      	bne.n	800275e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4ba4      	ldr	r3, [pc, #656]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 800273c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002740:	4aa2      	ldr	r2, [pc, #648]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800274a:	4ba0      	ldr	r3, [pc, #640]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 800274c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800275e:	4b9c      	ldr	r3, [pc, #624]	@ (80029d0 <HAL_RCC_OscConfig+0x7bc>)
 8002760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d119      	bne.n	800279e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800276a:	4b99      	ldr	r3, [pc, #612]	@ (80029d0 <HAL_RCC_OscConfig+0x7bc>)
 800276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276e:	4a98      	ldr	r2, [pc, #608]	@ (80029d0 <HAL_RCC_OscConfig+0x7bc>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002776:	f7fe ff35 	bl	80015e4 <HAL_GetTick>
 800277a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800277c:	e009      	b.n	8002792 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe ff31 	bl	80015e4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	f000 bc16 	b.w	8002fbe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002792:	4b8f      	ldr	r3, [pc, #572]	@ (80029d0 <HAL_RCC_OscConfig+0x7bc>)
 8002794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ef      	beq.n	800277e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d05f      	beq.n	8002866 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80027a6:	4b89      	ldr	r3, [pc, #548]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 80027a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027ac:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d037      	beq.n	800282c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e3f4      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01b      	beq.n	8002816 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80027de:	4b7b      	ldr	r3, [pc, #492]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 80027e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027e4:	4a79      	ldr	r2, [pc, #484]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 80027e6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80027ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80027ee:	f7fe fef9 	bl	80015e4 <HAL_GetTick>
 80027f2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f6:	f7fe fef5 	bl	80015e4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b05      	cmp	r3, #5
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e3da      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002808:	4b70      	ldr	r3, [pc, #448]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 800280a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800280e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1ef      	bne.n	80027f6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002816:	4b6d      	ldr	r3, [pc, #436]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 8002818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800281c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4969      	ldr	r1, [pc, #420]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800282c:	4b67      	ldr	r3, [pc, #412]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 800282e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002832:	4a66      	ldr	r2, [pc, #408]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 8002834:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002838:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800283c:	f7fe fed2 	bl	80015e4 <HAL_GetTick>
 8002840:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002844:	f7fe fece 	bl	80015e4 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b05      	cmp	r3, #5
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e3b3      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002856:	4b5d      	ldr	r3, [pc, #372]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 8002858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800285c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ef      	beq.n	8002844 <HAL_RCC_OscConfig+0x630>
 8002864:	e01b      	b.n	800289e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002866:	4b59      	ldr	r3, [pc, #356]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 8002868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800286c:	4a57      	ldr	r2, [pc, #348]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 800286e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002872:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002876:	f7fe feb5 	bl	80015e4 <HAL_GetTick>
 800287a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287e:	f7fe feb1 	bl	80015e4 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b05      	cmp	r3, #5
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e396      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002890:	4b4e      	ldr	r3, [pc, #312]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 8002892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ef      	bne.n	800287e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800289e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b49      	ldr	r3, [pc, #292]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 80028a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ac:	4a47      	ldr	r2, [pc, #284]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 80028ae:	f023 0304 	bic.w	r3, r3, #4
 80028b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8111 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ca:	4b40      	ldr	r3, [pc, #256]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 80028cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d111      	bne.n	80028fc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d8:	4b3c      	ldr	r3, [pc, #240]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 80028da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028de:	4a3b      	ldr	r2, [pc, #236]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80028e8:	4b38      	ldr	r3, [pc, #224]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 80028ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028fc:	4b34      	ldr	r3, [pc, #208]	@ (80029d0 <HAL_RCC_OscConfig+0x7bc>)
 80028fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d118      	bne.n	800293a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002908:	4b31      	ldr	r3, [pc, #196]	@ (80029d0 <HAL_RCC_OscConfig+0x7bc>)
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	4a30      	ldr	r2, [pc, #192]	@ (80029d0 <HAL_RCC_OscConfig+0x7bc>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002914:	f7fe fe66 	bl	80015e4 <HAL_GetTick>
 8002918:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291c:	f7fe fe62 	bl	80015e4 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e347      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800292e:	4b28      	ldr	r3, [pc, #160]	@ (80029d0 <HAL_RCC_OscConfig+0x7bc>)
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01f      	beq.n	8002986 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d010      	beq.n	8002974 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002952:	4b1e      	ldr	r3, [pc, #120]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 8002954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002958:	4a1c      	ldr	r2, [pc, #112]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002962:	4b1a      	ldr	r3, [pc, #104]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 8002964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002968:	4a18      	ldr	r2, [pc, #96]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002972:	e018      	b.n	80029a6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002974:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 8002976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800297a:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002984:	e00f      	b.n	80029a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002986:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 8002988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800298c:	4a0f      	ldr	r2, [pc, #60]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002996:	4b0d      	ldr	r3, [pc, #52]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 8002998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800299c:	4a0b      	ldr	r2, [pc, #44]	@ (80029cc <HAL_RCC_OscConfig+0x7b8>)
 800299e:	f023 0304 	bic.w	r3, r3, #4
 80029a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d057      	beq.n	8002a5e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80029ae:	f7fe fe19 	bl	80015e4 <HAL_GetTick>
 80029b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b4:	e00e      	b.n	80029d4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7fe fe15 	bl	80015e4 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d905      	bls.n	80029d4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e2f8      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
 80029cc:	46020c00 	.word	0x46020c00
 80029d0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d4:	4b9c      	ldr	r3, [pc, #624]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 80029d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0e9      	beq.n	80029b6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01b      	beq.n	8002a26 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80029ee:	4b96      	ldr	r3, [pc, #600]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 80029f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029f4:	4a94      	ldr	r2, [pc, #592]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 80029f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7fe fdf0 	bl	80015e4 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e2d3      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002a16:	4b8c      	ldr	r3, [pc, #560]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ed      	beq.n	8002a00 <HAL_RCC_OscConfig+0x7ec>
 8002a24:	e053      	b.n	8002ace <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a26:	4b88      	ldr	r3, [pc, #544]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a2c:	4a86      	ldr	r2, [pc, #536]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7fe fdd4 	bl	80015e4 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e2b7      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a4e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ed      	bne.n	8002a38 <HAL_RCC_OscConfig+0x824>
 8002a5c:	e037      	b.n	8002ace <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fdc1 	bl	80015e4 <HAL_GetTick>
 8002a62:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7fe fdbd 	bl	80015e4 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e2a0      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a7c:	4b72      	ldr	r3, [pc, #456]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1ed      	bne.n	8002a66 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01a      	beq.n	8002ace <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a98:	4b6b      	ldr	r3, [pc, #428]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a9e:	4a6a      	ldr	r2, [pc, #424]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7fe fd9b 	bl	80015e4 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e27e      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ac0:	4b61      	ldr	r3, [pc, #388]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1ed      	bne.n	8002aaa <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ace:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002adc:	4a5a      	ldr	r2, [pc, #360]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002ade:	f023 0304 	bic.w	r3, r3, #4
 8002ae2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d036      	beq.n	8002b60 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d019      	beq.n	8002b2e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002afa:	4b53      	ldr	r3, [pc, #332]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a52      	ldr	r2, [pc, #328]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002b00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b04:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b06:	f7fe fd6d 	bl	80015e4 <HAL_GetTick>
 8002b0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b0e:	f7fe fd69 	bl	80015e4 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e24e      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002b20:	4b49      	ldr	r3, [pc, #292]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x8fa>
 8002b2c:	e018      	b.n	8002b60 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002b2e:	4b46      	ldr	r3, [pc, #280]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a45      	ldr	r2, [pc, #276]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002b34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b38:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b3a:	f7fe fd53 	bl	80015e4 <HAL_GetTick>
 8002b3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b42:	f7fe fd4f 	bl	80015e4 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e234      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002b54:	4b3c      	ldr	r3, [pc, #240]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f0      	bne.n	8002b42 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d036      	beq.n	8002bda <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d019      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002b74:	4b34      	ldr	r3, [pc, #208]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a33      	ldr	r2, [pc, #204]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002b7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b7e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b80:	f7fe fd30 	bl	80015e4 <HAL_GetTick>
 8002b84:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002b88:	f7fe fd2c 	bl	80015e4 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e211      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x974>
 8002ba6:	e018      	b.n	8002bda <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002ba8:	4b27      	ldr	r3, [pc, #156]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a26      	ldr	r2, [pc, #152]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002bae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bb2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002bb4:	f7fe fd16 	bl	80015e4 <HAL_GetTick>
 8002bb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002bbc:	f7fe fd12 	bl	80015e4 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1f7      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002bce:	4b1e      	ldr	r3, [pc, #120]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d07f      	beq.n	8002ce6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d062      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002bee:	4b16      	ldr	r3, [pc, #88]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	4a15      	ldr	r2, [pc, #84]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002bf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bf8:	6093      	str	r3, [r2, #8]
 8002bfa:	4b13      	ldr	r3, [pc, #76]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c06:	4910      	ldr	r1, [pc, #64]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002c14:	d309      	bcc.n	8002c2a <HAL_RCC_OscConfig+0xa16>
 8002c16:	4b0c      	ldr	r3, [pc, #48]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f023 021f 	bic.w	r2, r3, #31
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4909      	ldr	r1, [pc, #36]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60cb      	str	r3, [r1, #12]
 8002c28:	e02a      	b.n	8002c80 <HAL_RCC_OscConfig+0xa6c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	da0c      	bge.n	8002c4c <HAL_RCC_OscConfig+0xa38>
 8002c32:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	015b      	lsls	r3, r3, #5
 8002c40:	4901      	ldr	r1, [pc, #4]	@ (8002c48 <HAL_RCC_OscConfig+0xa34>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60cb      	str	r3, [r1, #12]
 8002c46:	e01b      	b.n	8002c80 <HAL_RCC_OscConfig+0xa6c>
 8002c48:	46020c00 	.word	0x46020c00
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c54:	d30a      	bcc.n	8002c6c <HAL_RCC_OscConfig+0xa58>
 8002c56:	4ba1      	ldr	r3, [pc, #644]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	029b      	lsls	r3, r3, #10
 8002c64:	499d      	ldr	r1, [pc, #628]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60cb      	str	r3, [r1, #12]
 8002c6a:	e009      	b.n	8002c80 <HAL_RCC_OscConfig+0xa6c>
 8002c6c:	4b9b      	ldr	r3, [pc, #620]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	03db      	lsls	r3, r3, #15
 8002c7a:	4998      	ldr	r1, [pc, #608]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002c80:	4b96      	ldr	r3, [pc, #600]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a95      	ldr	r2, [pc, #596]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002c86:	f043 0310 	orr.w	r3, r3, #16
 8002c8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c8c:	f7fe fcaa 	bl	80015e4 <HAL_GetTick>
 8002c90:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002c94:	f7fe fca6 	bl	80015e4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e18b      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002ca6:	4b8d      	ldr	r3, [pc, #564]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0xa80>
 8002cb2:	e018      	b.n	8002ce6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002cb4:	4b89      	ldr	r3, [pc, #548]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a88      	ldr	r2, [pc, #544]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002cba:	f023 0310 	bic.w	r3, r3, #16
 8002cbe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002cc0:	f7fe fc90 	bl	80015e4 <HAL_GetTick>
 8002cc4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002cc8:	f7fe fc8c 	bl	80015e4 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e171      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002cda:	4b80      	ldr	r3, [pc, #512]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8166 	beq.w	8002fbc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf6:	4b79      	ldr	r3, [pc, #484]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	f000 80f2 	beq.w	8002ee8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	f040 80c5 	bne.w	8002e98 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	4b73      	ldr	r3, [pc, #460]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a72      	ldr	r2, [pc, #456]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002d14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d18:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002d1a:	f7fe fc63 	bl	80015e4 <HAL_GetTick>
 8002d1e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d22:	f7fe fc5f 	bl	80015e4 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e144      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002d34:	4b69      	ldr	r3, [pc, #420]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f0      	bne.n	8002d22 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d40:	4b66      	ldr	r3, [pc, #408]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d111      	bne.n	8002d72 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	4b63      	ldr	r3, [pc, #396]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d54:	4a61      	ldr	r2, [pc, #388]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002d72:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee0 <HAL_RCC_OscConfig+0xccc>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002d86:	4b56      	ldr	r3, [pc, #344]	@ (8002ee0 <HAL_RCC_OscConfig+0xccc>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	4a55      	ldr	r2, [pc, #340]	@ (8002ee0 <HAL_RCC_OscConfig+0xccc>)
 8002d8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d90:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002d92:	4b52      	ldr	r3, [pc, #328]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d9a:	f023 0303 	bic.w	r3, r3, #3
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002da6:	3a01      	subs	r2, #1
 8002da8:	0212      	lsls	r2, r2, #8
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002db0:	430a      	orrs	r2, r1
 8002db2:	494a      	ldr	r1, [pc, #296]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	628b      	str	r3, [r1, #40]	@ 0x28
 8002db8:	4b48      	ldr	r3, [pc, #288]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dbc:	4b49      	ldr	r3, [pc, #292]	@ (8002ee4 <HAL_RCC_OscConfig+0xcd0>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002dc4:	3a01      	subs	r2, #1
 8002dc6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002dce:	3a01      	subs	r2, #1
 8002dd0:	0252      	lsls	r2, r2, #9
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	4311      	orrs	r1, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dda:	3a01      	subs	r2, #1
 8002ddc:	0412      	lsls	r2, r2, #16
 8002dde:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002de2:	4311      	orrs	r1, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002de8:	3a01      	subs	r2, #1
 8002dea:	0612      	lsls	r2, r2, #24
 8002dec:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002df0:	430a      	orrs	r2, r1
 8002df2:	493a      	ldr	r1, [pc, #232]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002df8:	4b38      	ldr	r3, [pc, #224]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfc:	4a37      	ldr	r2, [pc, #220]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002dfe:	f023 0310 	bic.w	r3, r3, #16
 8002e02:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e08:	4a34      	ldr	r2, [pc, #208]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002e0e:	4b33      	ldr	r3, [pc, #204]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e12:	4a32      	ldr	r2, [pc, #200]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e14:	f043 0310 	orr.w	r3, r3, #16
 8002e18:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002e1a:	4b30      	ldr	r3, [pc, #192]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1e:	f023 020c 	bic.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	492d      	ldr	r1, [pc, #180]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002e34:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee0 <HAL_RCC_OscConfig+0xccc>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a29      	ldr	r2, [pc, #164]	@ (8002ee0 <HAL_RCC_OscConfig+0xccc>)
 8002e3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e3e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002e40:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d107      	bne.n	8002e58 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002e48:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e4e:	4a23      	ldr	r2, [pc, #140]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e50:	f023 0304 	bic.w	r3, r3, #4
 8002e54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e64:	f7fe fbbe 	bl	80015e4 <HAL_GetTick>
 8002e68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe fbba 	bl	80015e4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e09f      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e7e:	4b17      	ldr	r3, [pc, #92]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e8a:	4b14      	ldr	r3, [pc, #80]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	4a13      	ldr	r2, [pc, #76]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e94:	6293      	str	r3, [r2, #40]	@ 0x28
 8002e96:	e091      	b.n	8002fbc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002e98:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002e9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ea2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ea4:	f7fe fb9e 	bl	80015e4 <HAL_GetTick>
 8002ea8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe fb9a 	bl	80015e4 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e07f      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ebe:	4b07      	ldr	r3, [pc, #28]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002eca:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	4a03      	ldr	r2, [pc, #12]	@ (8002edc <HAL_RCC_OscConfig+0xcc8>)
 8002ed0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002ed4:	f023 0303 	bic.w	r3, r3, #3
 8002ed8:	6293      	str	r3, [r2, #40]	@ 0x28
 8002eda:	e06f      	b.n	8002fbc <HAL_RCC_OscConfig+0xda8>
 8002edc:	46020c00 	.word	0x46020c00
 8002ee0:	46020800 	.word	0x46020800
 8002ee4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002ee8:	4b37      	ldr	r3, [pc, #220]	@ (8002fc8 <HAL_RCC_OscConfig+0xdb4>)
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002eee:	4b36      	ldr	r3, [pc, #216]	@ (8002fc8 <HAL_RCC_OscConfig+0xdb4>)
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d039      	beq.n	8002f70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0203 	and.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d132      	bne.n	8002f70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d129      	bne.n	8002f70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d122      	bne.n	8002f70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f34:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d11a      	bne.n	8002f70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	0a5b      	lsrs	r3, r3, #9
 8002f3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d111      	bne.n	8002f70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f58:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d108      	bne.n	8002f70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	0e1b      	lsrs	r3, r3, #24
 8002f62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e024      	b.n	8002fbe <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f74:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <HAL_RCC_OscConfig+0xdb4>)
 8002f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f78:	08db      	lsrs	r3, r3, #3
 8002f7a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d01a      	beq.n	8002fbc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002f86:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <HAL_RCC_OscConfig+0xdb4>)
 8002f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc8 <HAL_RCC_OscConfig+0xdb4>)
 8002f8c:	f023 0310 	bic.w	r3, r3, #16
 8002f90:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fe fb27 	bl	80015e4 <HAL_GetTick>
 8002f96:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002f98:	bf00      	nop
 8002f9a:	f7fe fb23 	bl	80015e4 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d0f9      	beq.n	8002f9a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002faa:	4a07      	ldr	r2, [pc, #28]	@ (8002fc8 <HAL_RCC_OscConfig+0xdb4>)
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_RCC_OscConfig+0xdb4>)
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb4:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <HAL_RCC_OscConfig+0xdb4>)
 8002fb6:	f043 0310 	orr.w	r3, r3, #16
 8002fba:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3738      	adds	r7, #56	@ 0x38
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	46020c00 	.word	0x46020c00

08002fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e1d9      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b9b      	ldr	r3, [pc, #620]	@ (8003250 <HAL_RCC_ClockConfig+0x284>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d910      	bls.n	8003010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b98      	ldr	r3, [pc, #608]	@ (8003250 <HAL_RCC_ClockConfig+0x284>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 020f 	bic.w	r2, r3, #15
 8002ff6:	4996      	ldr	r1, [pc, #600]	@ (8003250 <HAL_RCC_ClockConfig+0x284>)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b94      	ldr	r3, [pc, #592]	@ (8003250 <HAL_RCC_ClockConfig+0x284>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e1c1      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	4b8c      	ldr	r3, [pc, #560]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003028:	429a      	cmp	r2, r3
 800302a:	d908      	bls.n	800303e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800302c:	4b89      	ldr	r3, [pc, #548]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	4986      	ldr	r1, [pc, #536]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 800303a:	4313      	orrs	r3, r2
 800303c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	4b81      	ldr	r3, [pc, #516]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003058:	429a      	cmp	r2, r3
 800305a:	d909      	bls.n	8003070 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800305c:	4b7d      	ldr	r3, [pc, #500]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	497a      	ldr	r1, [pc, #488]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 800306c:	4313      	orrs	r3, r2
 800306e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d010      	beq.n	800309e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4b74      	ldr	r3, [pc, #464]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003088:	429a      	cmp	r2, r3
 800308a:	d908      	bls.n	800309e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800308c:	4b71      	ldr	r3, [pc, #452]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	496e      	ldr	r1, [pc, #440]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 800309a:	4313      	orrs	r3, r2
 800309c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d010      	beq.n	80030cc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	4b69      	ldr	r3, [pc, #420]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d908      	bls.n	80030cc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80030ba:	4b66      	ldr	r3, [pc, #408]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f023 020f 	bic.w	r2, r3, #15
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	4963      	ldr	r1, [pc, #396]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80d2 	beq.w	800327e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d143      	bne.n	800316e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 80030e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d110      	bne.n	8003116 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80030f4:	4b57      	ldr	r3, [pc, #348]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 80030f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030fa:	4a56      	ldr	r2, [pc, #344]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 80030fc:	f043 0304 	orr.w	r3, r3, #4
 8003100:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003104:	4b53      	ldr	r3, [pc, #332]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 8003106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003116:	f7fe fa65 	bl	80015e4 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800311c:	4b4e      	ldr	r3, [pc, #312]	@ (8003258 <HAL_RCC_ClockConfig+0x28c>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00f      	beq.n	8003148 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003128:	e008      	b.n	800313c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800312a:	f7fe fa5b 	bl	80015e4 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e12b      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800313c:	4b46      	ldr	r3, [pc, #280]	@ (8003258 <HAL_RCC_ClockConfig+0x28c>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800314e:	4b41      	ldr	r3, [pc, #260]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 8003150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003154:	4a3f      	ldr	r2, [pc, #252]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 8003156:	f023 0304 	bic.w	r3, r3, #4
 800315a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800315e:	4b3d      	ldr	r3, [pc, #244]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d121      	bne.n	80031ae <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e112      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003176:	4b37      	ldr	r3, [pc, #220]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d115      	bne.n	80031ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e106      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800318e:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0fa      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800319e:	4b2d      	ldr	r3, [pc, #180]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e0f2      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b29      	ldr	r3, [pc, #164]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4926      	ldr	r1, [pc, #152]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80031c0:	f7fe fa10 	bl	80015e4 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d112      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7fe fa08 	bl	80015e4 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0d6      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b0c      	cmp	r3, #12
 80031f0:	d1ee      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x204>
 80031f2:	e044      	b.n	800327e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d112      	bne.n	8003222 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031fc:	e00a      	b.n	8003214 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fe:	f7fe f9f1 	bl	80015e4 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e0bf      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003214:	4b0f      	ldr	r3, [pc, #60]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d1ee      	bne.n	80031fe <HAL_RCC_ClockConfig+0x232>
 8003220:	e02d      	b.n	800327e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d123      	bne.n	8003272 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800322a:	e00a      	b.n	8003242 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800322c:	f7fe f9da 	bl	80015e4 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e0a8      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003242:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <HAL_RCC_ClockConfig+0x288>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1ee      	bne.n	800322c <HAL_RCC_ClockConfig+0x260>
 800324e:	e016      	b.n	800327e <HAL_RCC_ClockConfig+0x2b2>
 8003250:	40022000 	.word	0x40022000
 8003254:	46020c00 	.word	0x46020c00
 8003258:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325c:	f7fe f9c2 	bl	80015e4 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e090      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003272:	4b4a      	ldr	r3, [pc, #296]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b04      	cmp	r3, #4
 800327c:	d1ee      	bne.n	800325c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d010      	beq.n	80032ac <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	4b43      	ldr	r3, [pc, #268]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	429a      	cmp	r2, r3
 8003298:	d208      	bcs.n	80032ac <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800329a:	4b40      	ldr	r3, [pc, #256]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f023 020f 	bic.w	r2, r3, #15
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	493d      	ldr	r1, [pc, #244]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b3c      	ldr	r3, [pc, #240]	@ (80033a0 <HAL_RCC_ClockConfig+0x3d4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d210      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b39      	ldr	r3, [pc, #228]	@ (80033a0 <HAL_RCC_ClockConfig+0x3d4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 020f 	bic.w	r2, r3, #15
 80032c2:	4937      	ldr	r1, [pc, #220]	@ (80033a0 <HAL_RCC_ClockConfig+0x3d4>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b35      	ldr	r3, [pc, #212]	@ (80033a0 <HAL_RCC_ClockConfig+0x3d4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e05b      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d010      	beq.n	800330a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	4b2b      	ldr	r3, [pc, #172]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d208      	bcs.n	800330a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80032f8:	4b28      	ldr	r3, [pc, #160]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4925      	ldr	r1, [pc, #148]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 8003306:	4313      	orrs	r3, r2
 8003308:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d012      	beq.n	800333c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	4b20      	ldr	r3, [pc, #128]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003324:	429a      	cmp	r2, r3
 8003326:	d209      	bcs.n	800333c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003328:	4b1c      	ldr	r3, [pc, #112]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	4919      	ldr	r1, [pc, #100]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 8003338:	4313      	orrs	r3, r2
 800333a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	d010      	beq.n	800336a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	4b13      	ldr	r3, [pc, #76]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003354:	429a      	cmp	r2, r3
 8003356:	d208      	bcs.n	800336a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003358:	4b10      	ldr	r3, [pc, #64]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	490d      	ldr	r1, [pc, #52]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 8003366:	4313      	orrs	r3, r2
 8003368:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800336a:	f000 f821 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 800336e:	4602      	mov	r2, r0
 8003370:	4b0a      	ldr	r3, [pc, #40]	@ (800339c <HAL_RCC_ClockConfig+0x3d0>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	490a      	ldr	r1, [pc, #40]	@ (80033a4 <HAL_RCC_ClockConfig+0x3d8>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
 8003380:	4a09      	ldr	r2, [pc, #36]	@ (80033a8 <HAL_RCC_ClockConfig+0x3dc>)
 8003382:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003384:	4b09      	ldr	r3, [pc, #36]	@ (80033ac <HAL_RCC_ClockConfig+0x3e0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe f8a1 	bl	80014d0 <HAL_InitTick>
 800338e:	4603      	mov	r3, r0
 8003390:	73fb      	strb	r3, [r7, #15]

  return status;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	46020c00 	.word	0x46020c00
 80033a0:	40022000 	.word	0x40022000
 80033a4:	0800f938 	.word	0x0800f938
 80033a8:	20000000 	.word	0x20000000
 80033ac:	20000018 	.word	0x20000018

080033b0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b08b      	sub	sp, #44	@ 0x2c
 80033b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033be:	4b78      	ldr	r3, [pc, #480]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c8:	4b75      	ldr	r3, [pc, #468]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x34>
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	d121      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d11e      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80033e4:	4b6e      	ldr	r3, [pc, #440]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80033f0:	4b6b      	ldr	r3, [pc, #428]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033f6:	0b1b      	lsrs	r3, r3, #12
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033fe:	e005      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003400:	4b67      	ldr	r3, [pc, #412]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	0f1b      	lsrs	r3, r3, #28
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800340c:	4a65      	ldr	r2, [pc, #404]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d110      	bne.n	800343e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003420:	e00d      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003422:	4b5f      	ldr	r3, [pc, #380]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b04      	cmp	r3, #4
 800342c:	d102      	bne.n	8003434 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800342e:	4b5e      	ldr	r3, [pc, #376]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003430:	623b      	str	r3, [r7, #32]
 8003432:	e004      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b08      	cmp	r3, #8
 8003438:	d101      	bne.n	800343e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800343a:	4b5b      	ldr	r3, [pc, #364]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800343c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b0c      	cmp	r3, #12
 8003442:	f040 80a5 	bne.w	8003590 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003446:	4b56      	ldr	r3, [pc, #344]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003450:	4b53      	ldr	r3, [pc, #332]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3301      	adds	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800345e:	4b50      	ldr	r3, [pc, #320]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800346a:	4b4d      	ldr	r3, [pc, #308]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	08db      	lsrs	r3, r3, #3
 8003470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003482:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d003      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0xe4>
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d022      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x128>
 8003492:	e043      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80035ac <HAL_RCC_GetSysClockFreq+0x1fc>
 80034a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034a6:	4b3e      	ldr	r3, [pc, #248]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034b6:	ed97 6a01 	vldr	s12, [r7, #4]
 80034ba:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80035b0 <HAL_RCC_GetSysClockFreq+0x200>
 80034be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034d6:	e046      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80035ac <HAL_RCC_GetSysClockFreq+0x1fc>
 80034e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ea:	4b2d      	ldr	r3, [pc, #180]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034fa:	ed97 6a01 	vldr	s12, [r7, #4]
 80034fe:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80035b0 <HAL_RCC_GetSysClockFreq+0x200>
 8003502:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003506:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800350a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800350e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800351a:	e024      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003534:	4b1a      	ldr	r3, [pc, #104]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353c:	ee07 3a90 	vmov	s15, r3
 8003540:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003544:	ed97 6a01 	vldr	s12, [r7, #4]
 8003548:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80035b0 <HAL_RCC_GetSysClockFreq+0x200>
 800354c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003550:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003554:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003558:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800355c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003560:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003564:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003566:	4b0e      	ldr	r3, [pc, #56]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356a:	0e1b      	lsrs	r3, r3, #24
 800356c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003570:	3301      	adds	r3, #1
 8003572:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800357e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800358a:	ee17 3a90 	vmov	r3, s15
 800358e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003590:	6a3b      	ldr	r3, [r7, #32]
}
 8003592:	4618      	mov	r0, r3
 8003594:	372c      	adds	r7, #44	@ 0x2c
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	46020c00 	.word	0x46020c00
 80035a4:	0800f950 	.word	0x0800f950
 80035a8:	00f42400 	.word	0x00f42400
 80035ac:	4b742400 	.word	0x4b742400
 80035b0:	46000000 	.word	0x46000000

080035b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80035b8:	f7ff fefa 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b07      	ldr	r3, [pc, #28]	@ (80035dc <HAL_RCC_GetHCLKFreq+0x28>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	4906      	ldr	r1, [pc, #24]	@ (80035e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80035c8:	5ccb      	ldrb	r3, [r1, r3]
 80035ca:	fa22 f303 	lsr.w	r3, r2, r3
 80035ce:	4a05      	ldr	r2, [pc, #20]	@ (80035e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80035d0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80035d2:	4b04      	ldr	r3, [pc, #16]	@ (80035e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80035d4:	681b      	ldr	r3, [r3, #0]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	46020c00 	.word	0x46020c00
 80035e0:	0800f938 	.word	0x0800f938
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80035ec:	f7ff ffe2 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	@ (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	46020c00 	.word	0x46020c00
 800360c:	0800f948 	.word	0x0800f948

08003610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003614:	f7ff ffce 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	@ (8003634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	46020c00 	.word	0x46020c00
 8003634:	0800f948 	.word	0x0800f948

08003638 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800363c:	f7ff ffba 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <HAL_RCC_GetPCLK3Freq+0x20>)
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	@ (800365c <HAL_RCC_GetPCLK3Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	46020c00 	.word	0x46020c00
 800365c:	0800f948 	.word	0x0800f948

08003660 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003668:	4b3e      	ldr	r3, [pc, #248]	@ (8003764 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800366a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003676:	f7fe fd6f 	bl	8002158 <HAL_PWREx_GetVoltageRange>
 800367a:	6178      	str	r0, [r7, #20]
 800367c:	e019      	b.n	80036b2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	4b39      	ldr	r3, [pc, #228]	@ (8003764 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003680:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003684:	4a37      	ldr	r2, [pc, #220]	@ (8003764 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800368e:	4b35      	ldr	r3, [pc, #212]	@ (8003764 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003690:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800369c:	f7fe fd5c 	bl	8002158 <HAL_PWREx_GetVoltageRange>
 80036a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036a2:	4b30      	ldr	r3, [pc, #192]	@ (8003764 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003764 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036aa:	f023 0304 	bic.w	r3, r3, #4
 80036ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036b8:	d003      	beq.n	80036c2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036c0:	d109      	bne.n	80036d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036c8:	d202      	bcs.n	80036d0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80036ca:	2301      	movs	r3, #1
 80036cc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80036ce:	e033      	b.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80036d4:	e030      	b.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036dc:	d208      	bcs.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e4:	d102      	bne.n	80036ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80036e6:	2303      	movs	r3, #3
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	e025      	b.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e035      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036f6:	d90f      	bls.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003704:	d902      	bls.n	800370c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	e015      	b.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800370c:	2301      	movs	r3, #1
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	e012      	b.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	e00f      	b.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800371e:	d109      	bne.n	8003734 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003726:	d102      	bne.n	800372e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003728:	2301      	movs	r3, #1
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	e004      	b.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800372e:	2302      	movs	r3, #2
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	e001      	b.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003734:	2301      	movs	r3, #1
 8003736:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003738:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f023 020f 	bic.w	r2, r3, #15
 8003740:	4909      	ldr	r1, [pc, #36]	@ (8003768 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003748:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	429a      	cmp	r2, r3
 8003754:	d001      	beq.n	800375a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	46020c00 	.word	0x46020c00
 8003768:	40022000 	.word	0x40022000

0800376c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800376c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003770:	b0b6      	sub	sp, #216	@ 0xd8
 8003772:	af00      	add	r7, sp, #0
 8003774:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003778:	2300      	movs	r3, #0
 800377a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800377e:	2300      	movs	r3, #0
 8003780:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f002 0401 	and.w	r4, r2, #1
 8003790:	2500      	movs	r5, #0
 8003792:	ea54 0305 	orrs.w	r3, r4, r5
 8003796:	d00b      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003798:	4bc5      	ldr	r3, [pc, #788]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800379a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800379e:	f023 0103 	bic.w	r1, r3, #3
 80037a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a8:	4ac1      	ldr	r2, [pc, #772]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037aa:	430b      	orrs	r3, r1
 80037ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f002 0804 	and.w	r8, r2, #4
 80037bc:	f04f 0900 	mov.w	r9, #0
 80037c0:	ea58 0309 	orrs.w	r3, r8, r9
 80037c4:	d00b      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80037c6:	4bba      	ldr	r3, [pc, #744]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037cc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d6:	4ab6      	ldr	r2, [pc, #728]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037d8:	430b      	orrs	r3, r1
 80037da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f002 0a08 	and.w	sl, r2, #8
 80037ea:	f04f 0b00 	mov.w	fp, #0
 80037ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80037f2:	d00b      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80037f4:	4bae      	ldr	r3, [pc, #696]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003804:	4aaa      	ldr	r2, [pc, #680]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003806:	430b      	orrs	r3, r1
 8003808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800380c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f002 0310 	and.w	r3, r2, #16
 8003818:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800381c:	2300      	movs	r3, #0
 800381e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003822:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003826:	460b      	mov	r3, r1
 8003828:	4313      	orrs	r3, r2
 800382a:	d00b      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800382c:	4ba0      	ldr	r3, [pc, #640]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800382e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003832:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003836:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800383a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383c:	4a9c      	ldr	r2, [pc, #624]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800383e:	430b      	orrs	r3, r1
 8003840:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003844:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	f002 0320 	and.w	r3, r2, #32
 8003850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003854:	2300      	movs	r3, #0
 8003856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800385a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800385e:	460b      	mov	r3, r1
 8003860:	4313      	orrs	r3, r2
 8003862:	d00b      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003864:	4b92      	ldr	r3, [pc, #584]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800386a:	f023 0107 	bic.w	r1, r3, #7
 800386e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003874:	4a8e      	ldr	r2, [pc, #568]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003876:	430b      	orrs	r3, r1
 8003878:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800387c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003888:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003892:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003896:	460b      	mov	r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	d00b      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800389c:	4b84      	ldr	r3, [pc, #528]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800389e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038a2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80038a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038ac:	4a80      	ldr	r2, [pc, #512]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038ae:	430b      	orrs	r3, r1
 80038b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80038c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80038ca:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4313      	orrs	r3, r2
 80038d2:	d00b      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80038d4:	4b76      	ldr	r3, [pc, #472]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e4:	4a72      	ldr	r2, [pc, #456]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038e6:	430b      	orrs	r3, r1
 80038e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80038f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003902:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d00b      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800390c:	4b68      	ldr	r3, [pc, #416]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800390e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003912:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003916:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800391a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800391c:	4a64      	ldr	r2, [pc, #400]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800391e:	430b      	orrs	r3, r1
 8003920:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003924:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003930:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003934:	2300      	movs	r3, #0
 8003936:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800393a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800393e:	460b      	mov	r3, r1
 8003940:	4313      	orrs	r3, r2
 8003942:	d00b      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003944:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800394a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800394e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003954:	4a56      	ldr	r2, [pc, #344]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003956:	430b      	orrs	r3, r1
 8003958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800395c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003968:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003972:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003976:	460b      	mov	r3, r1
 8003978:	4313      	orrs	r3, r2
 800397a:	d00b      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800397c:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800397e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003982:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003986:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800398a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398c:	4a48      	ldr	r2, [pc, #288]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800398e:	430b      	orrs	r3, r1
 8003990:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80039a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039ae:	460b      	mov	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	d00b      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80039b4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039ba:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80039be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039c4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039c6:	430b      	orrs	r3, r1
 80039c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80039cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80039d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039da:	2300      	movs	r3, #0
 80039dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039de:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80039e2:	460b      	mov	r3, r1
 80039e4:	4313      	orrs	r3, r2
 80039e6:	d00b      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80039e8:	4b31      	ldr	r3, [pc, #196]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039f8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039fa:	430b      	orrs	r3, r1
 80039fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a0e:	2300      	movs	r3, #0
 8003a10:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a12:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003a16:	460b      	mov	r3, r1
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	d04f      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a24:	2b80      	cmp	r3, #128	@ 0x80
 8003a26:	d02d      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003a28:	2b80      	cmp	r3, #128	@ 0x80
 8003a2a:	d827      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a2c:	2b60      	cmp	r3, #96	@ 0x60
 8003a2e:	d02b      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003a30:	2b60      	cmp	r3, #96	@ 0x60
 8003a32:	d823      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a34:	2b40      	cmp	r3, #64	@ 0x40
 8003a36:	d006      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003a38:	2b40      	cmp	r3, #64	@ 0x40
 8003a3a:	d81f      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d009      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d011      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003a44:	e01a      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a46:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4a:	4a19      	ldr	r2, [pc, #100]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a50:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a52:	e01a      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a58:	3308      	adds	r3, #8
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f002 f914 	bl	8005c88 <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a66:	e010      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a6c:	332c      	adds	r3, #44	@ 0x2c
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f002 f9a2 	bl	8005db8 <RCCEx_PLL3_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a7a:	e006      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003a82:	e002      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003a84:	bf00      	nop
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d110      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003a92:	4b07      	ldr	r3, [pc, #28]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a98:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003a9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aa4:	4a02      	ldr	r2, [pc, #8]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003aac:	e006      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003aae:	bf00      	nop
 8003ab0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003ab8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003abc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aca:	2300      	movs	r3, #0
 8003acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ace:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	d046      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003adc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ae0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003ae4:	d028      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003ae6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003aea:	d821      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003aec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003af0:	d022      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003af2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003af6:	d81b      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003af8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003afc:	d01c      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003afe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b02:	d815      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b08:	d008      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b0e:	d80f      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d011      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b18:	d00e      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003b1a:	e009      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b20:	3308      	adds	r3, #8
 8003b22:	4618      	mov	r0, r3
 8003b24:	f002 f8b0 	bl	8005c88 <RCCEx_PLL2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003b2e:	e004      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003b36:	e000      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8003b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10d      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003b42:	4bb6      	ldr	r3, [pc, #728]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b48:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b54:	4ab1      	ldr	r2, [pc, #708]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003b56:	430b      	orrs	r3, r1
 8003b58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b5c:	e003      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003b62:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003b66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003b72:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b74:	2300      	movs	r3, #0
 8003b76:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	d03e      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d81d      	bhi.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b94 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003bd3 	.word	0x08003bd3
 8003b98:	08003ba9 	.word	0x08003ba9
 8003b9c:	08003bb7 	.word	0x08003bb7
 8003ba0:	08003bd3 	.word	0x08003bd3
 8003ba4:	08003bd3 	.word	0x08003bd3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ba8:	4b9c      	ldr	r3, [pc, #624]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	4a9b      	ldr	r2, [pc, #620]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003bb4:	e00e      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bba:	332c      	adds	r3, #44	@ 0x2c
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f002 f8fb 	bl	8005db8 <RCCEx_PLL3_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8003bd2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003bd4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003bdc:	4b8f      	ldr	r3, [pc, #572]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003bde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003be2:	f023 0107 	bic.w	r1, r3, #7
 8003be6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bee:	4a8b      	ldr	r2, [pc, #556]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003bf6:	e003      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003bfc:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003c00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003c0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c0e:	2300      	movs	r3, #0
 8003c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003c16:	460b      	mov	r3, r1
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	d04a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c28:	d028      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003c2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c2e:	d821      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003c30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c34:	d024      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c3a:	d81b      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003c3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c40:	d00e      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003c42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c46:	d815      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01b      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c50:	d110      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c52:	4b72      	ldr	r3, [pc, #456]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c56:	4a71      	ldr	r2, [pc, #452]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003c5e:	e012      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c64:	332c      	adds	r3, #44	@ 0x2c
 8003c66:	4618      	mov	r0, r3
 8003c68:	f002 f8a6 	bl	8005db8 <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003c72:	e008      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003c7a:	e004      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003c7c:	bf00      	nop
 8003c7e:	e002      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003c80:	bf00      	nop
 8003c82:	e000      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003c84:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003c86:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003c8e:	4b63      	ldr	r3, [pc, #396]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003c98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca0:	4a5e      	ldr	r2, [pc, #376]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003cae:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003cbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cc4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f000 80ba 	beq.w	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd6:	4b51      	ldr	r3, [pc, #324]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d113      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cea:	4a4c      	ldr	r2, [pc, #304]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003cec:	f043 0304 	orr.w	r3, r3, #4
 8003cf0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003cf4:	4b49      	ldr	r3, [pc, #292]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003d0c:	4b44      	ldr	r3, [pc, #272]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d10:	4a43      	ldr	r2, [pc, #268]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d18:	f7fd fc64 	bl	80015e4 <HAL_GetTick>
 8003d1c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d20:	e00b      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d22:	f7fd fc5f 	bl	80015e4 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d903      	bls.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003d38:	e005      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d3a:	4b39      	ldr	r3, [pc, #228]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0ed      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8003d46:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d16a      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d4e:	4b33      	ldr	r3, [pc, #204]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d023      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x640>
 8003d64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d68:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003d6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d01b      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d74:	4b29      	ldr	r3, [pc, #164]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d82:	4b26      	ldr	r3, [pc, #152]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d88:	4a24      	ldr	r2, [pc, #144]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d92:	4b22      	ldr	r3, [pc, #136]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d98:	4a20      	ldr	r2, [pc, #128]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003da2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003da4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003da8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d019      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fd fc14 	bl	80015e4 <HAL_GetTick>
 8003dbc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc0:	e00d      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fd fc0f 	bl	80015e4 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003dcc:	1ad2      	subs	r2, r2, r3
 8003dce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d903      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8003ddc:	e006      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dde:	4b0f      	ldr	r3, [pc, #60]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ea      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8003dec:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10d      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003df4:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dfa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003dfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e02:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003e06:	4a05      	ldr	r2, [pc, #20]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e0e:	e00d      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e10:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003e14:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8003e18:	e008      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003e1a:	bf00      	nop
 8003e1c:	46020c00 	.word	0x46020c00
 8003e20:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e24:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003e28:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e2c:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d107      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e34:	4bb2      	ldr	r3, [pc, #712]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e3a:	4ab1      	ldr	r2, [pc, #708]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e52:	2300      	movs	r3, #0
 8003e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e56:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	d042      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e68:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003e6c:	d022      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003e6e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003e72:	d81b      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003e74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e78:	d011      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x732>
 8003e7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e7e:	d815      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d019      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e88:	d110      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e8e:	3308      	adds	r3, #8
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 fef9 	bl	8005c88 <RCCEx_PLL2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003e9c:	e00d      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9e:	4b98      	ldr	r3, [pc, #608]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea2:	4a97      	ldr	r2, [pc, #604]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003eaa:	e006      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003eb2:	e002      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8003eb4:	bf00      	nop
 8003eb6:	e000      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8003eb8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003eba:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003ec2:	4b8f      	ldr	r3, [pc, #572]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ec8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ed4:	4a8a      	ldr	r2, [pc, #552]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003edc:	e003      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003ee2:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ee6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ef2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ef8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003efc:	460b      	mov	r3, r1
 8003efe:	4313      	orrs	r3, r2
 8003f00:	d02d      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003f02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f0e:	d00b      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f14:	d804      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1e:	d007      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8003f26:	e004      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003f28:	bf00      	nop
 8003f2a:	e002      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003f2c:	bf00      	nop
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003f30:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003f32:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10d      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003f3a:	4b71      	ldr	r3, [pc, #452]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f40:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4c:	4a6c      	ldr	r2, [pc, #432]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003f5a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003f5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f70:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f74:	460b      	mov	r3, r1
 8003f76:	4313      	orrs	r3, r2
 8003f78:	d00c      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003f7a:	4b61      	ldr	r3, [pc, #388]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f80:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8003f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f8c:	4a5c      	ldr	r2, [pc, #368]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003f8e:	430b      	orrs	r3, r1
 8003f90:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d019      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fbc:	d105      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fbe:	4b50      	ldr	r3, [pc, #320]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	4a4f      	ldr	r2, [pc, #316]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc8:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003fca:	4b4d      	ldr	r3, [pc, #308]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fd0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fdc:	4a48      	ldr	r2, [pc, #288]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	d00c      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004000:	4b3f      	ldr	r3, [pc, #252]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004006:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800400a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800400e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004012:	493b      	ldr	r1, [pc, #236]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800401a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	2300      	movs	r3, #0
 800402a:	627b      	str	r3, [r7, #36]	@ 0x24
 800402c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004030:	460b      	mov	r3, r1
 8004032:	4313      	orrs	r3, r2
 8004034:	d00c      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004036:	4b32      	ldr	r3, [pc, #200]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800403c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004044:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004048:	492d      	ldr	r1, [pc, #180]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004050:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004066:	460b      	mov	r3, r1
 8004068:	4313      	orrs	r3, r2
 800406a:	d00c      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800406c:	4b24      	ldr	r3, [pc, #144]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800406e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004072:	f023 0218 	bic.w	r2, r3, #24
 8004076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800407a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800407e:	4920      	ldr	r1, [pc, #128]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004086:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800409c:	460b      	mov	r3, r1
 800409e:	4313      	orrs	r3, r2
 80040a0:	d034      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80040a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040ae:	d105      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b0:	4b13      	ldr	r3, [pc, #76]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80040b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b4:	4a12      	ldr	r2, [pc, #72]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80040b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ba:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80040bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040c8:	d108      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040ce:	3308      	adds	r3, #8
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 fdd9 	bl	8005c88 <RCCEx_PLL2_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 80040dc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10f      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80040e4:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80040e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040f6:	4902      	ldr	r1, [pc, #8]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80040fe:	e005      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004100:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004108:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800410c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004122:	460b      	mov	r3, r1
 8004124:	4313      	orrs	r3, r2
 8004126:	d03a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800412c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004130:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004134:	d00e      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004136:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800413a:	d815      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d017      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004144:	d110      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004146:	4b27      	ldr	r3, [pc, #156]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414a:	4a26      	ldr	r2, [pc, #152]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800414c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004150:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004152:	e00e      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004158:	3308      	adds	r3, #8
 800415a:	4618      	mov	r0, r3
 800415c:	f001 fd94 	bl	8005c88 <RCCEx_PLL2_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004166:	e004      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800416e:	e000      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8004170:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004172:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10d      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800417a:	4b1a      	ldr	r3, [pc, #104]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800417c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004180:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004184:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800418c:	4915      	ldr	r1, [pc, #84]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004194:	e003      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004196:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800419a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800419e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	2300      	movs	r3, #0
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041b4:	460b      	mov	r3, r1
 80041b6:	4313      	orrs	r3, r2
 80041b8:	d00c      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80041ba:	4b0a      	ldr	r3, [pc, #40]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80041bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041c0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80041c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041cc:	4905      	ldr	r1, [pc, #20]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80041d4:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 80041d8:	4618      	mov	r0, r3
 80041da:	37d8      	adds	r7, #216	@ 0xd8
 80041dc:	46bd      	mov	sp, r7
 80041de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e2:	bf00      	nop
 80041e4:	46020c00 	.word	0x46020c00

080041e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	@ 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80041f0:	4ba6      	ldr	r3, [pc, #664]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80041f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80041fa:	4ba4      	ldr	r3, [pc, #656]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004204:	4ba1      	ldr	r3, [pc, #644]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004208:	0a1b      	lsrs	r3, r3, #8
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	3301      	adds	r3, #1
 8004210:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004212:	4b9e      	ldr	r3, [pc, #632]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800421e:	4b9b      	ldr	r3, [pc, #620]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004222:	08db      	lsrs	r3, r3, #3
 8004224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004236:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d062      	beq.n	8004306 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b03      	cmp	r3, #3
 8004244:	f200 8081 	bhi.w	800434a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d024      	beq.n	8004298 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d17a      	bne.n	800434a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004490 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004266:	4b89      	ldr	r3, [pc, #548]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004276:	ed97 6a02 	vldr	s12, [r7, #8]
 800427a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004494 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800427e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004282:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800428a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800428e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004292:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004296:	e08f      	b.n	80043b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004298:	4b7c      	ldr	r3, [pc, #496]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80042a4:	4b79      	ldr	r3, [pc, #484]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	0f1b      	lsrs	r3, r3, #28
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	e006      	b.n	80042be <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80042b0:	4b76      	ldr	r3, [pc, #472]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	0f1b      	lsrs	r3, r3, #28
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	4a76      	ldr	r2, [pc, #472]	@ (8004498 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80042c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80042e8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004494 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80042ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80042fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004300:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004304:	e058      	b.n	80043b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004310:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004490 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004318:	4b5c      	ldr	r3, [pc, #368]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800431a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004328:	ed97 6a02 	vldr	s12, [r7, #8]
 800432c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004494 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004330:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004334:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004338:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800433c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004344:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004348:	e036      	b.n	80043b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800434a:	4b50      	ldr	r3, [pc, #320]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8004356:	4b4d      	ldr	r3, [pc, #308]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	0f1b      	lsrs	r3, r3, #28
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8004362:	4b4a      	ldr	r3, [pc, #296]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	0f1b      	lsrs	r3, r3, #28
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	4a49      	ldr	r2, [pc, #292]	@ (8004498 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004396:	ed97 6a02 	vldr	s12, [r7, #8]
 800439a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004494 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800439e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80043ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043b6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80043b8:	4b34      	ldr	r3, [pc, #208]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d017      	beq.n	80043f4 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80043c4:	4b31      	ldr	r3, [pc, #196]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c8:	0a5b      	lsrs	r3, r3, #9
 80043ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80043d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043da:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80043de:	edd7 6a07 	vldr	s13, [r7, #28]
 80043e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ea:	ee17 2a90 	vmov	r2, s15
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80043fa:	4b24      	ldr	r3, [pc, #144]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d017      	beq.n	8004436 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004406:	4b21      	ldr	r3, [pc, #132]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004410:	ee07 3a90 	vmov	s15, r3
 8004414:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004418:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800441c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004420:	edd7 6a07 	vldr	s13, [r7, #28]
 8004424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442c:	ee17 2a90 	vmov	r2, s15
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	e002      	b.n	800443c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d017      	beq.n	8004478 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004448:	4b10      	ldr	r3, [pc, #64]	@ (800448c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800444a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444c:	0e1b      	lsrs	r3, r3, #24
 800444e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800445a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800445e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004462:	edd7 6a07 	vldr	s13, [r7, #28]
 8004466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800446e:	ee17 2a90 	vmov	r2, s15
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004476:	e002      	b.n	800447e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	609a      	str	r2, [r3, #8]
}
 800447e:	bf00      	nop
 8004480:	3724      	adds	r7, #36	@ 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	46020c00 	.word	0x46020c00
 8004490:	4b742400 	.word	0x4b742400
 8004494:	46000000 	.word	0x46000000
 8004498:	0800f950 	.word	0x0800f950

0800449c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	@ 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80044a4:	4ba6      	ldr	r3, [pc, #664]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ac:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80044ae:	4ba4      	ldr	r3, [pc, #656]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80044b8:	4ba1      	ldr	r3, [pc, #644]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	0a1b      	lsrs	r3, r3, #8
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	3301      	adds	r3, #1
 80044c4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80044c6:	4b9e      	ldr	r3, [pc, #632]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80044d2:	4b9b      	ldr	r3, [pc, #620]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	08db      	lsrs	r3, r3, #3
 80044d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ea:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d062      	beq.n	80045ba <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	f200 8081 	bhi.w	80045fe <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d024      	beq.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d17a      	bne.n	80045fe <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451a:	4b89      	ldr	r3, [pc, #548]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800451c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800452a:	ed97 6a02 	vldr	s12, [r7, #8]
 800452e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004748 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004532:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800453a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800454a:	e08f      	b.n	800466c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800454c:	4b7c      	ldr	r3, [pc, #496]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004558:	4b79      	ldr	r3, [pc, #484]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	0f1b      	lsrs	r3, r3, #28
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	e006      	b.n	8004572 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8004564:	4b76      	ldr	r3, [pc, #472]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800456a:	041b      	lsls	r3, r3, #16
 800456c:	0f1b      	lsrs	r3, r3, #28
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	4a76      	ldr	r2, [pc, #472]	@ (800474c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004578:	ee07 3a90 	vmov	s15, r3
 800457c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	ee07 3a90 	vmov	s15, r3
 8004594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004598:	ed97 6a02 	vldr	s12, [r7, #8]
 800459c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004748 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80045a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80045b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045b8:	e058      	b.n	800466c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80045c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045cc:	4b5c      	ldr	r3, [pc, #368]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80045ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80045dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004748 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80045e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80045e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80045ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80045f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045fc:	e036      	b.n	800466c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80045fe:	4b50      	ldr	r3, [pc, #320]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800460a:	4b4d      	ldr	r3, [pc, #308]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	0f1b      	lsrs	r3, r3, #28
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	e006      	b.n	8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8004616:	4b4a      	ldr	r3, [pc, #296]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	0f1b      	lsrs	r3, r3, #28
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	4a49      	ldr	r2, [pc, #292]	@ (800474c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464a:	ed97 6a02 	vldr	s12, [r7, #8]
 800464e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004748 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800465e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800466a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800466c:	4b34      	ldr	r3, [pc, #208]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800466e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004670:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d017      	beq.n	80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004678:	4b31      	ldr	r3, [pc, #196]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800467a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467c:	0a5b      	lsrs	r3, r3, #9
 800467e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800468a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800468e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004692:	edd7 6a07 	vldr	s13, [r7, #28]
 8004696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800469a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469e:	ee17 2a90 	vmov	r2, s15
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e002      	b.n	80046ae <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80046ae:	4b24      	ldr	r3, [pc, #144]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d017      	beq.n	80046ea <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80046ba:	4b21      	ldr	r3, [pc, #132]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046be:	0c1b      	lsrs	r3, r3, #16
 80046c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046c4:	ee07 3a90 	vmov	s15, r3
 80046c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80046cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046d0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80046d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e0:	ee17 2a90 	vmov	r2, s15
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	e002      	b.n	80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80046f0:	4b13      	ldr	r3, [pc, #76]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d017      	beq.n	800472c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80046fc:	4b10      	ldr	r3, [pc, #64]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004700:	0e1b      	lsrs	r3, r3, #24
 8004702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800470e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004712:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004716:	edd7 6a07 	vldr	s13, [r7, #28]
 800471a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800471e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004722:	ee17 2a90 	vmov	r2, s15
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800472a:	e002      	b.n	8004732 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
}
 8004732:	bf00      	nop
 8004734:	3724      	adds	r7, #36	@ 0x24
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	46020c00 	.word	0x46020c00
 8004744:	4b742400 	.word	0x4b742400
 8004748:	46000000 	.word	0x46000000
 800474c:	0800f950 	.word	0x0800f950

08004750 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004750:	b480      	push	{r7}
 8004752:	b089      	sub	sp, #36	@ 0x24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004758:	4ba6      	ldr	r3, [pc, #664]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800475a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004760:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004762:	4ba4      	ldr	r3, [pc, #656]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800476c:	4ba1      	ldr	r3, [pc, #644]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	3301      	adds	r3, #1
 8004778:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800477a:	4b9e      	ldr	r3, [pc, #632]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800477c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004786:	4b9b      	ldr	r3, [pc, #620]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800478a:	08db      	lsrs	r3, r3, #3
 800478c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d062      	beq.n	800486e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	f200 8081 	bhi.w	80048b2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d024      	beq.n	8004800 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d17a      	bne.n	80048b2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80049f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80047ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ce:	4b89      	ldr	r3, [pc, #548]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80047de:	ed97 6a02 	vldr	s12, [r7, #8]
 80047e2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80049fc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80047e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80047ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80047ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80047f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fa:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80047fe:	e08f      	b.n	8004920 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004800:	4b7c      	ldr	r3, [pc, #496]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800480c:	4b79      	ldr	r3, [pc, #484]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	0f1b      	lsrs	r3, r3, #28
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	e006      	b.n	8004826 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8004818:	4b76      	ldr	r3, [pc, #472]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800481a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800481e:	041b      	lsls	r3, r3, #16
 8004820:	0f1b      	lsrs	r3, r3, #28
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	4a76      	ldr	r2, [pc, #472]	@ (8004a00 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004850:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80049fc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004860:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004868:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800486c:	e058      	b.n	8004920 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004878:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800487c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004880:	4b5c      	ldr	r3, [pc, #368]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004888:	ee07 3a90 	vmov	s15, r3
 800488c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004890:	ed97 6a02 	vldr	s12, [r7, #8]
 8004894:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80049fc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004898:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800489c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80048a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80048a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048b0:	e036      	b.n	8004920 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80048b2:	4b50      	ldr	r3, [pc, #320]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80048be:	4b4d      	ldr	r3, [pc, #308]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	0f1b      	lsrs	r3, r3, #28
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	e006      	b.n	80048d8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80048ca:	4b4a      	ldr	r3, [pc, #296]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048d0:	041b      	lsls	r3, r3, #16
 80048d2:	0f1b      	lsrs	r3, r3, #28
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	4a49      	ldr	r2, [pc, #292]	@ (8004a00 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80048da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	ee07 3a90 	vmov	s15, r3
 80048ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004902:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80049fc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004912:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800491e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004920:	4b34      	ldr	r3, [pc, #208]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d017      	beq.n	800495c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800492c:	4b31      	ldr	r3, [pc, #196]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800492e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004930:	0a5b      	lsrs	r3, r3, #9
 8004932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800493e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004942:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004946:	edd7 6a07 	vldr	s13, [r7, #28]
 800494a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800494e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004952:	ee17 2a90 	vmov	r2, s15
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e002      	b.n	8004962 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004962:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d017      	beq.n	800499e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800496e:	4b21      	ldr	r3, [pc, #132]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004972:	0c1b      	lsrs	r3, r3, #16
 8004974:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004980:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004984:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004988:	edd7 6a07 	vldr	s13, [r7, #28]
 800498c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004994:	ee17 2a90 	vmov	r2, s15
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	605a      	str	r2, [r3, #4]
 800499c:	e002      	b.n	80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80049a4:	4b13      	ldr	r3, [pc, #76]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d017      	beq.n	80049e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80049b0:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b4:	0e1b      	lsrs	r3, r3, #24
 80049b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80049c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049c6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80049ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d6:	ee17 2a90 	vmov	r2, s15
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049de:	e002      	b.n	80049e6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	609a      	str	r2, [r3, #8]
}
 80049e6:	bf00      	nop
 80049e8:	3724      	adds	r7, #36	@ 0x24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	46020c00 	.word	0x46020c00
 80049f8:	4b742400 	.word	0x4b742400
 80049fc:	46000000 	.word	0x46000000
 8004a00:	0800f950 	.word	0x0800f950

08004a04 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08e      	sub	sp, #56	@ 0x38
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a12:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004a16:	430b      	orrs	r3, r1
 8004a18:	d145      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004a1a:	4b9b      	ldr	r3, [pc, #620]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a24:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004a26:	4b98      	ldr	r3, [pc, #608]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d108      	bne.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a3a:	d104      	bne.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004a3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a42:	f001 b912 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004a46:	4b90      	ldr	r3, [pc, #576]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a54:	d114      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a5c:	d110      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004a5e:	4b8a      	ldr	r3, [pc, #552]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a6c:	d103      	bne.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004a6e:	23fa      	movs	r3, #250	@ 0xfa
 8004a70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004a72:	f001 b8fa 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004a76:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004a7a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004a7c:	f001 b8f5 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004a80:	4b81      	ldr	r3, [pc, #516]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a8c:	d107      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a94:	d103      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004a96:	4b7d      	ldr	r3, [pc, #500]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a9a:	f001 b8e6 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa2:	f001 b8e2 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aaa:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	d151      	bne.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004ab2:	4b75      	ldr	r3, [pc, #468]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ab4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ab8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004abc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	2b80      	cmp	r3, #128	@ 0x80
 8004ac2:	d035      	beq.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac6:	2b80      	cmp	r3, #128	@ 0x80
 8004ac8:	d841      	bhi.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	2b60      	cmp	r3, #96	@ 0x60
 8004ace:	d02a      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad2:	2b60      	cmp	r3, #96	@ 0x60
 8004ad4:	d83b      	bhi.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad8:	2b40      	cmp	r3, #64	@ 0x40
 8004ada:	d009      	beq.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ade:	2b40      	cmp	r3, #64	@ 0x40
 8004ae0:	d835      	bhi.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00c      	beq.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d012      	beq.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004aee:	e02e      	b.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fb77 	bl	80041e8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004afe:	f001 b8b4 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b02:	f107 0318 	add.w	r3, r7, #24
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fcc8 	bl	800449c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b10:	f001 b8ab 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b14:	f107 030c 	add.w	r3, r7, #12
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fe19 	bl	8004750 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b22:	f001 b8a2 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004b26:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004b2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b2c:	f001 b89d 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b30:	4b55      	ldr	r3, [pc, #340]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b3c:	d103      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004b3e:	4b54      	ldr	r3, [pc, #336]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b42:	f001 b892 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b4a:	f001 b88e 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b52:	f001 b88a 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b5a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	d126      	bne.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004b62:	4b49      	ldr	r3, [pc, #292]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004b64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004b6e:	4b46      	ldr	r3, [pc, #280]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b7a:	d106      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d103      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8004b82:	4b43      	ldr	r3, [pc, #268]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b86:	f001 b870 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b9e:	d103      	bne.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8004ba0:	4b3c      	ldr	r3, [pc, #240]	@ (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ba4:	f001 b861 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bac:	f001 b85d 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bb4:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	d171      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004bbc:	4b32      	ldr	r3, [pc, #200]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bc2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004bc6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004bce:	d034      	beq.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004bd6:	d853      	bhi.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bde:	d00b      	beq.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004be6:	d84b      	bhi.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d016      	beq.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8004bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bf4:	d009      	beq.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8004bf6:	e043      	b.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff faf3 	bl	80041e8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c06:	f001 b830 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c0a:	f107 0318 	add.w	r3, r7, #24
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fc44 	bl	800449c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c18:	f001 b827 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c28:	d103      	bne.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004c2c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c2e:	f001 b81c 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c36:	f001 b818 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c3a:	4b13      	ldr	r3, [pc, #76]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d118      	bne.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c46:	4b10      	ldr	r3, [pc, #64]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004c52:	4b0d      	ldr	r3, [pc, #52]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	0e1b      	lsrs	r3, r3, #24
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	e006      	b.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c64:	041b      	lsls	r3, r3, #16
 8004c66:	0e1b      	lsrs	r3, r3, #24
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c74:	f000 bff9 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c7c:	f000 bff5 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c84:	f000 bff1 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004c88:	46020c00 	.word	0x46020c00
 8004c8c:	0007a120 	.word	0x0007a120
 8004c90:	00f42400 	.word	0x00f42400
 8004c94:	007a1200 	.word	0x007a1200
 8004c98:	02dc6c00 	.word	0x02dc6c00
 8004c9c:	0800f950 	.word	0x0800f950
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca4:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	d17f      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004cac:	4ba8      	ldr	r3, [pc, #672]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004cae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d165      	bne.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004cbe:	4ba4      	ldr	r3, [pc, #656]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cc4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004cc8:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004cd0:	d034      	beq.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004cd8:	d853      	bhi.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ce0:	d00b      	beq.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ce8:	d84b      	bhi.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d016      	beq.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cf6:	d009      	beq.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8004cf8:	e043      	b.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff fa72 	bl	80041e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d06:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004d08:	f000 bfaf 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d0c:	f107 0318 	add.w	r3, r7, #24
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff fbc3 	bl	800449c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004d1a:	f000 bfa6 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004d1e:	4b8c      	ldr	r3, [pc, #560]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d2a:	d103      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8004d2c:	4b89      	ldr	r3, [pc, #548]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8004d2e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004d30:	f000 bf9b 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004d38:	f000 bf97 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d3c:	4b84      	ldr	r3, [pc, #528]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d118      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d48:	4b81      	ldr	r3, [pc, #516]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8004d54:	4b7e      	ldr	r3, [pc, #504]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	0e1b      	lsrs	r3, r3, #24
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	e006      	b.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8004d60:	4b7b      	ldr	r3, [pc, #492]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d66:	041b      	lsls	r3, r3, #16
 8004d68:	0e1b      	lsrs	r3, r3, #24
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	4a7a      	ldr	r2, [pc, #488]	@ (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d74:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004d76:	f000 bf78 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004d7e:	f000 bf74 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004d86:	f000 bf70 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d90:	d108      	bne.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fa26 	bl	80041e8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004da0:	f000 bf63 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004da8:	f000 bf5f 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004db0:	1e51      	subs	r1, r2, #1
 8004db2:	430b      	orrs	r3, r1
 8004db4:	d136      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004db6:	4b66      	ldr	r3, [pc, #408]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d104      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004dc8:	f7fe fc22 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 8004dcc:	6378      	str	r0, [r7, #52]	@ 0x34
 8004dce:	f000 bf4c 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d104      	bne.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004dd8:	f7fe faea 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8004ddc:	6378      	str	r0, [r7, #52]	@ 0x34
 8004dde:	f000 bf44 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004de2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dee:	d106      	bne.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d103      	bne.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8004df6:	4b59      	ldr	r3, [pc, #356]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dfa:	f000 bf36 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004dfe:	4b54      	ldr	r3, [pc, #336]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d107      	bne.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d104      	bne.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8004e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e18:	f000 bf27 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e20:	f000 bf23 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e28:	1f11      	subs	r1, r2, #4
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	d136      	bne.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004e2e:	4b48      	ldr	r3, [pc, #288]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e38:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d104      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e40:	f7fe fbd2 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8004e44:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e46:	f000 bf10 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d104      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e50:	f7fe faae 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8004e54:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e56:	f000 bf08 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e66:	d106      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d103      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8004e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e72:	f000 befa 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004e76:	4b36      	ldr	r3, [pc, #216]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d107      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	2b30      	cmp	r3, #48	@ 0x30
 8004e88:	d104      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8004e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e90:	f000 beeb 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e98:	f000 bee7 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ea0:	f1a2 0108 	sub.w	r1, r2, #8
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	d136      	bne.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004ea8:	4b29      	ldr	r3, [pc, #164]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004eb2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d104      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004eba:	f7fe fb95 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8004ebe:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ec0:	f000 bed3 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	2b40      	cmp	r3, #64	@ 0x40
 8004ec8:	d104      	bne.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004eca:	f7fe fa71 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8004ece:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ed0:	f000 becb 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee0:	d106      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee4:	2b80      	cmp	r3, #128	@ 0x80
 8004ee6:	d103      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8004ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eec:	f000 bebd 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004ef0:	4b17      	ldr	r3, [pc, #92]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d107      	bne.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f00:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f02:	d104      	bne.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8004f04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f0a:	f000 beae 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f12:	f000 beaa 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f1a:	f1a2 0110 	sub.w	r1, r2, #16
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	d141      	bne.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004f22:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d104      	bne.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004f34:	f7fe fb58 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8004f38:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f3a:	f000 be96 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f46:	f7fe fa33 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8004f4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f4c:	f000 be8d 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004f50:	46020c00 	.word	0x46020c00
 8004f54:	02dc6c00 	.word	0x02dc6c00
 8004f58:	0800f950 	.word	0x0800f950
 8004f5c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004f60:	4baa      	ldr	r3, [pc, #680]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f74:	d103      	bne.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8004f76:	4ba6      	ldr	r3, [pc, #664]	@ (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f7a:	f000 be76 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004f7e:	4ba3      	ldr	r3, [pc, #652]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d108      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f92:	d104      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8004f94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f9a:	f000 be66 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa2:	f000 be62 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004faa:	f1a2 0120 	sub.w	r1, r2, #32
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	d158      	bne.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004fb2:	4b96      	ldr	r3, [pc, #600]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d104      	bne.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004fc4:	f7fe fb38 	bl	8003638 <HAL_RCC_GetPCLK3Freq>
 8004fc8:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fca:	f000 be4e 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d104      	bne.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004fd4:	f7fe f9ec 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8004fd8:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fda:	f000 be46 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004fde:	4b8b      	ldr	r3, [pc, #556]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fea:	d106      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d103      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8004ff2:	4b87      	ldr	r3, [pc, #540]	@ (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ff6:	f000 be38 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004ffa:	4b84      	ldr	r3, [pc, #528]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b02      	cmp	r3, #2
 8005006:	d107      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	2b03      	cmp	r3, #3
 800500c:	d104      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 800500e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005012:	637b      	str	r3, [r7, #52]	@ 0x34
 8005014:	f000 be29 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005018:	4b7c      	ldr	r3, [pc, #496]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b20      	cmp	r3, #32
 8005022:	d11b      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005026:	2b04      	cmp	r3, #4
 8005028:	d118      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800502a:	4b78      	ldr	r3, [pc, #480]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8005036:	4b75      	ldr	r3, [pc, #468]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	0e1b      	lsrs	r3, r3, #24
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	e006      	b.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005042:	4b72      	ldr	r3, [pc, #456]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005048:	041b      	lsls	r3, r3, #16
 800504a:	0e1b      	lsrs	r3, r3, #24
 800504c:	f003 030f 	and.w	r3, r3, #15
 8005050:	4a70      	ldr	r2, [pc, #448]	@ (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
 8005058:	f000 be07 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005060:	f000 be03 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005068:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800506c:	430b      	orrs	r3, r1
 800506e:	d16c      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005070:	4b66      	ldr	r3, [pc, #408]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005072:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005076:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800507a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005082:	d104      	bne.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005084:	f7fe f994 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8005088:	6378      	str	r0, [r7, #52]	@ 0x34
 800508a:	f000 bdee 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800508e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005094:	d108      	bne.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005096:	f107 0318 	add.w	r3, r7, #24
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff f9fe 	bl	800449c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050a4:	f000 bde1 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80050a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d104      	bne.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80050ae:	f7fe fa81 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80050b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80050b4:	f000 bdd9 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050be:	d122      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80050c0:	4b52      	ldr	r3, [pc, #328]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d118      	bne.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050cc:	4b4f      	ldr	r3, [pc, #316]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80050d8:	4b4c      	ldr	r3, [pc, #304]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	0e1b      	lsrs	r3, r3, #24
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	e006      	b.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80050e4:	4b49      	ldr	r3, [pc, #292]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80050e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	0e1b      	lsrs	r3, r3, #24
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	4a48      	ldr	r2, [pc, #288]	@ (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80050f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050fa:	f000 bdb6 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	637b      	str	r3, [r7, #52]	@ 0x34
 8005102:	f000 bdb2 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005106:	4b41      	ldr	r3, [pc, #260]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005112:	d107      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800511a:	d103      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 800511c:	4b3c      	ldr	r3, [pc, #240]	@ (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800511e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005120:	f000 bda3 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005124:	4b39      	ldr	r3, [pc, #228]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800512c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005130:	d107      	bne.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8005132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005134:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005138:	d103      	bne.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 800513a:	4b35      	ldr	r3, [pc, #212]	@ (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800513c:	637b      	str	r3, [r7, #52]	@ 0x34
 800513e:	f000 bd94 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	637b      	str	r3, [r7, #52]	@ 0x34
 8005146:	f000 bd90 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800514a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800514e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005152:	430b      	orrs	r3, r1
 8005154:	d160      	bne.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005156:	4b2d      	ldr	r3, [pc, #180]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005158:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005164:	2b04      	cmp	r3, #4
 8005166:	d84c      	bhi.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8005168:	a201      	add	r2, pc, #4	@ (adr r2, 8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516e:	bf00      	nop
 8005170:	080051a9 	.word	0x080051a9
 8005174:	08005185 	.word	0x08005185
 8005178:	08005197 	.word	0x08005197
 800517c:	080051b3 	.word	0x080051b3
 8005180:	080051bd 	.word	0x080051bd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff f82d 	bl	80041e8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005192:	f000 bd6a 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005196:	f107 030c 	add.w	r3, r7, #12
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fad8 	bl	8004750 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051a4:	f000 bd61 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80051a8:	f7fe fa04 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80051ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80051ae:	f000 bd5c 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80051b2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80051b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051b8:	f000 bd57 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80051bc:	4b13      	ldr	r3, [pc, #76]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d118      	bne.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051c8:	4b10      	ldr	r3, [pc, #64]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80051d4:	4b0d      	ldr	r3, [pc, #52]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	0e1b      	lsrs	r3, r3, #24
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	e006      	b.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80051e0:	4b0a      	ldr	r3, [pc, #40]	@ (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80051e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051e6:	041b      	lsls	r3, r3, #16
 80051e8:	0e1b      	lsrs	r3, r3, #24
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	4a09      	ldr	r2, [pc, #36]	@ (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80051f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80051f6:	f000 bd38 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051fe:	f000 bd34 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005206:	f000 bd30 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800520a:	bf00      	nop
 800520c:	46020c00 	.word	0x46020c00
 8005210:	00f42400 	.word	0x00f42400
 8005214:	0800f950 	.word	0x0800f950
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521c:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8005220:	430b      	orrs	r3, r1
 8005222:	d167      	bne.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005224:	4ba0      	ldr	r3, [pc, #640]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800522a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800522e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005232:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005236:	d036      	beq.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800523e:	d855      	bhi.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005242:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005246:	d029      	beq.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800524e:	d84d      	bhi.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005256:	d013      	beq.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800525e:	d845      	bhi.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005262:	2b00      	cmp	r3, #0
 8005264:	d015      	beq.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526c:	d13e      	bne.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800526e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005272:	4618      	mov	r0, r3
 8005274:	f7fe ffb8 	bl	80041e8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800527c:	f000 bcf5 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005280:	f107 030c 	add.w	r3, r7, #12
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff fa63 	bl	8004750 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800528e:	f000 bcec 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005292:	f7fe f98f 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8005296:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005298:	f000 bce7 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800529c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80052a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052a2:	f000 bce2 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80052a6:	4b80      	ldr	r3, [pc, #512]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d118      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052b2:	4b7d      	ldr	r3, [pc, #500]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80052be:	4b7a      	ldr	r3, [pc, #488]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	0e1b      	lsrs	r3, r3, #24
 80052c4:	f003 030f 	and.w	r3, r3, #15
 80052c8:	e006      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 80052ca:	4b77      	ldr	r3, [pc, #476]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80052cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052d0:	041b      	lsls	r3, r3, #16
 80052d2:	0e1b      	lsrs	r3, r3, #24
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	4a74      	ldr	r2, [pc, #464]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80052da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80052e0:	f000 bcc3 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052e8:	f000 bcbf 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052f0:	f000 bcbb 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80052f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052f8:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80052fc:	430b      	orrs	r3, r1
 80052fe:	d14c      	bne.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005300:	4b69      	ldr	r3, [pc, #420]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005306:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800530a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800530c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530e:	2b00      	cmp	r3, #0
 8005310:	d104      	bne.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005312:	f7fe f969 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8005316:	6378      	str	r0, [r7, #52]	@ 0x34
 8005318:	f000 bca7 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005322:	d104      	bne.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005324:	f7fe f844 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8005328:	6378      	str	r0, [r7, #52]	@ 0x34
 800532a:	f000 bc9e 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800532e:	4b5e      	ldr	r3, [pc, #376]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800533a:	d107      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 800533c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005342:	d103      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8005344:	4b5a      	ldr	r3, [pc, #360]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005346:	637b      	str	r3, [r7, #52]	@ 0x34
 8005348:	f000 bc8f 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800534c:	4b56      	ldr	r3, [pc, #344]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b20      	cmp	r3, #32
 8005356:	d11c      	bne.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800535e:	d118      	bne.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005360:	4b51      	ldr	r3, [pc, #324]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 800536c:	4b4e      	ldr	r3, [pc, #312]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	0e1b      	lsrs	r3, r3, #24
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	e006      	b.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8005378:	4b4b      	ldr	r3, [pc, #300]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800537a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	0e1b      	lsrs	r3, r3, #24
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	4a49      	ldr	r2, [pc, #292]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800538c:	637b      	str	r3, [r7, #52]	@ 0x34
 800538e:	f000 bc6c 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	637b      	str	r3, [r7, #52]	@ 0x34
 8005396:	f000 bc68 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800539a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800539e:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80053a2:	430b      	orrs	r3, r1
 80053a4:	d14c      	bne.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80053a6:	4b40      	ldr	r3, [pc, #256]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80053a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ac:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80053b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d104      	bne.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80053b8:	f7fe f916 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 80053bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80053be:	f000 bc54 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053c8:	d104      	bne.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80053ca:	f7fd fff1 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 80053ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80053d0:	f000 bc4b 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80053d4:	4b34      	ldr	r3, [pc, #208]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053e0:	d107      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e8:	d103      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 80053ea:	4b31      	ldr	r3, [pc, #196]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80053ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ee:	f000 bc3c 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80053f2:	4b2d      	ldr	r3, [pc, #180]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d11c      	bne.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005404:	d118      	bne.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005406:	4b28      	ldr	r3, [pc, #160]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005412:	4b25      	ldr	r3, [pc, #148]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	0e1b      	lsrs	r3, r3, #24
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	e006      	b.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 800541e:	4b22      	ldr	r3, [pc, #136]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005420:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005424:	041b      	lsls	r3, r3, #16
 8005426:	0e1b      	lsrs	r3, r3, #24
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	4a1f      	ldr	r2, [pc, #124]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800542e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005432:	637b      	str	r3, [r7, #52]	@ 0x34
 8005434:	f000 bc19 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	637b      	str	r3, [r7, #52]	@ 0x34
 800543c:	f000 bc15 	b.w	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005444:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005448:	430b      	orrs	r3, r1
 800544a:	d157      	bne.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800544c:	4b16      	ldr	r3, [pc, #88]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800544e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005452:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005456:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	2bc0      	cmp	r3, #192	@ 0xc0
 800545c:	d02a      	beq.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	2bc0      	cmp	r3, #192	@ 0xc0
 8005462:	d848      	bhi.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005466:	2b80      	cmp	r3, #128	@ 0x80
 8005468:	d00d      	beq.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	2b80      	cmp	r3, #128	@ 0x80
 800546e:	d842      	bhi.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	2b40      	cmp	r3, #64	@ 0x40
 800547a:	d011      	beq.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800547c:	e03b      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800547e:	f7fe f8db 	bl	8003638 <HAL_RCC_GetPCLK3Freq>
 8005482:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005484:	e3f1      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005486:	4b08      	ldr	r3, [pc, #32]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800548e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005492:	d102      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8005494:	4b06      	ldr	r3, [pc, #24]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005496:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005498:	e3e7      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800549e:	e3e4      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80054a0:	f7fd ff86 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 80054a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80054a6:	e3e0      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80054a8:	46020c00 	.word	0x46020c00
 80054ac:	0800f950 	.word	0x0800f950
 80054b0:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80054b4:	4ba3      	ldr	r3, [pc, #652]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d117      	bne.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054c0:	4ba0      	ldr	r3, [pc, #640]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 80054cc:	4b9d      	ldr	r3, [pc, #628]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	0e1b      	lsrs	r3, r3, #24
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	e006      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80054d8:	4b9a      	ldr	r3, [pc, #616]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80054da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054de:	041b      	lsls	r3, r3, #16
 80054e0:	0e1b      	lsrs	r3, r3, #24
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	4a98      	ldr	r2, [pc, #608]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80054e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054ee:	e3bc      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054f4:	e3b9      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054fa:	e3b6      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80054fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005500:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8005504:	430b      	orrs	r3, r1
 8005506:	d147      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005508:	4b8e      	ldr	r3, [pc, #568]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800550a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800550e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005512:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005516:	2b00      	cmp	r3, #0
 8005518:	d103      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800551a:	f7fe f865 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 800551e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005520:	e3a3      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005528:	d103      	bne.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800552a:	f7fd ff41 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 800552e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005530:	e39b      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005532:	4b84      	ldr	r3, [pc, #528]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800553a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800553e:	d106      	bne.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005546:	d102      	bne.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8005548:	4b80      	ldr	r3, [pc, #512]	@ (800574c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
 800554c:	e38d      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800554e:	4b7d      	ldr	r3, [pc, #500]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b20      	cmp	r3, #32
 8005558:	d11b      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005560:	d117      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005562:	4b78      	ldr	r3, [pc, #480]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 800556e:	4b75      	ldr	r3, [pc, #468]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	0e1b      	lsrs	r3, r3, #24
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	e006      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800557a:	4b72      	ldr	r3, [pc, #456]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800557c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005580:	041b      	lsls	r3, r3, #16
 8005582:	0e1b      	lsrs	r3, r3, #24
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	4a6f      	ldr	r2, [pc, #444]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800558a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005590:	e36b      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	637b      	str	r3, [r7, #52]	@ 0x34
 8005596:	e368      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800559c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80055a0:	430b      	orrs	r3, r1
 80055a2:	d164      	bne.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80055a4:	4b67      	ldr	r3, [pc, #412]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80055a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d120      	bne.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055b6:	4b63      	ldr	r3, [pc, #396]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d117      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055c2:	4b60      	ldr	r3, [pc, #384]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 80055ce:	4b5d      	ldr	r3, [pc, #372]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	0e1b      	lsrs	r3, r3, #24
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	e006      	b.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 80055da:	4b5a      	ldr	r3, [pc, #360]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80055dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055e0:	041b      	lsls	r3, r3, #16
 80055e2:	0e1b      	lsrs	r3, r3, #24
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	4a57      	ldr	r2, [pc, #348]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80055ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f0:	e33b      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f6:	e338      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80055f8:	4b52      	ldr	r3, [pc, #328]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80055fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005606:	d112      	bne.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8005608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800560e:	d10e      	bne.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005610:	4b4c      	ldr	r3, [pc, #304]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800561a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800561e:	d102      	bne.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8005620:	23fa      	movs	r3, #250	@ 0xfa
 8005622:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005624:	e321      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005626:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800562a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800562c:	e31d      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800562e:	4b45      	ldr	r3, [pc, #276]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800563a:	d106      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005642:	d102      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8005644:	4b41      	ldr	r3, [pc, #260]	@ (800574c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005646:	637b      	str	r3, [r7, #52]	@ 0x34
 8005648:	e30f      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800564a:	4b3e      	ldr	r3, [pc, #248]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800564c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b02      	cmp	r3, #2
 8005656:	d107      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800565e:	d103      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8005660:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005664:	637b      	str	r3, [r7, #52]	@ 0x34
 8005666:	e300      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	637b      	str	r3, [r7, #52]	@ 0x34
 800566c:	e2fd      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800566e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005672:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005676:	430b      	orrs	r3, r1
 8005678:	d16a      	bne.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800567a:	4b32      	ldr	r3, [pc, #200]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800567c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005680:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005684:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005688:	2b00      	cmp	r3, #0
 800568a:	d120      	bne.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800568c:	4b2d      	ldr	r3, [pc, #180]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b20      	cmp	r3, #32
 8005696:	d117      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005698:	4b2a      	ldr	r3, [pc, #168]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80056a4:	4b27      	ldr	r3, [pc, #156]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	0e1b      	lsrs	r3, r3, #24
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	e006      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80056b0:	4b24      	ldr	r3, [pc, #144]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80056b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056b6:	041b      	lsls	r3, r3, #16
 80056b8:	0e1b      	lsrs	r3, r3, #24
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	4a22      	ldr	r2, [pc, #136]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80056c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80056c6:	e2d0      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80056cc:	e2cd      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80056ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80056d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056dc:	d112      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e4:	d10e      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80056e6:	4b17      	ldr	r3, [pc, #92]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80056e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056f4:	d102      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80056f6:	23fa      	movs	r3, #250	@ 0xfa
 80056f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80056fa:	e2b6      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80056fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005700:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005702:	e2b2      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005704:	4b0f      	ldr	r3, [pc, #60]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800570c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005710:	d106      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005718:	d102      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800571a:	4b0c      	ldr	r3, [pc, #48]	@ (800574c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800571c:	637b      	str	r3, [r7, #52]	@ 0x34
 800571e:	e2a4      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005720:	4b08      	ldr	r3, [pc, #32]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d107      	bne.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800572e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005730:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005734:	d103      	bne.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8005736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800573a:	637b      	str	r3, [r7, #52]	@ 0x34
 800573c:	e295      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	637b      	str	r3, [r7, #52]	@ 0x34
 8005742:	e292      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005744:	46020c00 	.word	0x46020c00
 8005748:	0800f950 	.word	0x0800f950
 800574c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005754:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005758:	430b      	orrs	r3, r1
 800575a:	d147      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800575c:	4b9a      	ldr	r3, [pc, #616]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800575e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005762:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005766:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576a:	2b00      	cmp	r3, #0
 800576c:	d103      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800576e:	f7fd ff3b 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8005772:	6378      	str	r0, [r7, #52]	@ 0x34
 8005774:	e279      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005776:	4b94      	ldr	r3, [pc, #592]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800577c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005780:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005784:	d112      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800578c:	d10e      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800578e:	4b8e      	ldr	r3, [pc, #568]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800579c:	d102      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 800579e:	23fa      	movs	r3, #250	@ 0xfa
 80057a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057a2:	e262      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80057a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80057a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057aa:	e25e      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80057ac:	4b86      	ldr	r3, [pc, #536]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b8:	d106      	bne.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 80057ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057c0:	d102      	bne.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 80057c2:	4b82      	ldr	r3, [pc, #520]	@ (80059cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80057c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c6:	e250      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80057c8:	4b7f      	ldr	r3, [pc, #508]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80057ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d107      	bne.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 80057d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80057dc:	d103      	bne.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 80057de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057e4:	e241      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ea:	e23e      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80057ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80057f4:	430b      	orrs	r3, r1
 80057f6:	d12d      	bne.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80057f8:	4b73      	ldr	r3, [pc, #460]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80057fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057fe:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005802:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005804:	4b70      	ldr	r3, [pc, #448]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800580c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005810:	d105      	bne.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	2b00      	cmp	r3, #0
 8005816:	d102      	bne.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8005818:	4b6c      	ldr	r3, [pc, #432]	@ (80059cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800581a:	637b      	str	r3, [r7, #52]	@ 0x34
 800581c:	e225      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800581e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005824:	d107      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe fcdc 	bl	80041e8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005832:	637b      	str	r3, [r7, #52]	@ 0x34
 8005834:	e219      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005838:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800583c:	d107      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800583e:	f107 0318 	add.w	r3, r7, #24
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fe2a 	bl	800449c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	637b      	str	r3, [r7, #52]	@ 0x34
 800584c:	e20d      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	637b      	str	r3, [r7, #52]	@ 0x34
 8005852:	e20a      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005858:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800585c:	430b      	orrs	r3, r1
 800585e:	d156      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005860:	4b59      	ldr	r3, [pc, #356]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005866:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800586a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800586c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005872:	d028      	beq.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8005874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005876:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800587a:	d845      	bhi.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 800587c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005882:	d013      	beq.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800588a:	d83d      	bhi.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 800588c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8005892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005898:	d004      	beq.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 800589a:	e035      	b.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800589c:	f7fd feb8 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 80058a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058a2:	e1e2      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80058a4:	f7fd fd84 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 80058a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058aa:	e1de      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058ac:	4b46      	ldr	r3, [pc, #280]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b8:	d102      	bne.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 80058ba:	4b44      	ldr	r3, [pc, #272]	@ (80059cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80058bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80058be:	e1d4      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058c4:	e1d1      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80058c6:	4b40      	ldr	r3, [pc, #256]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d117      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058d2:	4b3d      	ldr	r3, [pc, #244]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 80058de:	4b3a      	ldr	r3, [pc, #232]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	0e1b      	lsrs	r3, r3, #24
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	e006      	b.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80058ea:	4b37      	ldr	r3, [pc, #220]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80058ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058f0:	041b      	lsls	r3, r3, #16
 80058f2:	0e1b      	lsrs	r3, r3, #24
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	4a35      	ldr	r2, [pc, #212]	@ (80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80058fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005900:	e1b3      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005906:	e1b0      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800590c:	e1ad      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800590e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005912:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8005916:	430b      	orrs	r3, r1
 8005918:	d15c      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800591a:	4b2b      	ldr	r3, [pc, #172]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800591c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005920:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005924:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005928:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800592c:	d028      	beq.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005934:	d845      	bhi.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800593c:	d013      	beq.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005944:	d83d      	bhi.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 800594c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005952:	d004      	beq.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8005954:	e035      	b.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005956:	f7fd fe47 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 800595a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800595c:	e185      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800595e:	f7fd fd27 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8005962:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005964:	e181      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005966:	4b18      	ldr	r3, [pc, #96]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800596e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005972:	d102      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8005974:	4b15      	ldr	r3, [pc, #84]	@ (80059cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005976:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005978:	e177      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800597e:	e174      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005980:	4b11      	ldr	r3, [pc, #68]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b20      	cmp	r3, #32
 800598a:	d117      	bne.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800598c:	4b0e      	ldr	r3, [pc, #56]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8005998:	4b0b      	ldr	r3, [pc, #44]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	0e1b      	lsrs	r3, r3, #24
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	e006      	b.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 80059a4:	4b08      	ldr	r3, [pc, #32]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80059a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	0e1b      	lsrs	r3, r3, #24
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	4a07      	ldr	r2, [pc, #28]	@ (80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80059b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80059ba:	e156      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059c0:	e153      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059c6:	e150      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80059c8:	46020c00 	.word	0x46020c00
 80059cc:	00f42400 	.word	0x00f42400
 80059d0:	0800f950 	.word	0x0800f950
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80059d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d8:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80059dc:	430b      	orrs	r3, r1
 80059de:	d176      	bne.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80059e0:	4ba4      	ldr	r3, [pc, #656]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80059e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059e6:	f003 0318 	and.w	r3, r3, #24
 80059ea:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	2b18      	cmp	r3, #24
 80059f0:	d86a      	bhi.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80059f2:	a201      	add	r2, pc, #4	@ (adr r2, 80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a5d 	.word	0x08005a5d
 80059fc:	08005ac9 	.word	0x08005ac9
 8005a00:	08005ac9 	.word	0x08005ac9
 8005a04:	08005ac9 	.word	0x08005ac9
 8005a08:	08005ac9 	.word	0x08005ac9
 8005a0c:	08005ac9 	.word	0x08005ac9
 8005a10:	08005ac9 	.word	0x08005ac9
 8005a14:	08005ac9 	.word	0x08005ac9
 8005a18:	08005a65 	.word	0x08005a65
 8005a1c:	08005ac9 	.word	0x08005ac9
 8005a20:	08005ac9 	.word	0x08005ac9
 8005a24:	08005ac9 	.word	0x08005ac9
 8005a28:	08005ac9 	.word	0x08005ac9
 8005a2c:	08005ac9 	.word	0x08005ac9
 8005a30:	08005ac9 	.word	0x08005ac9
 8005a34:	08005ac9 	.word	0x08005ac9
 8005a38:	08005a6d 	.word	0x08005a6d
 8005a3c:	08005ac9 	.word	0x08005ac9
 8005a40:	08005ac9 	.word	0x08005ac9
 8005a44:	08005ac9 	.word	0x08005ac9
 8005a48:	08005ac9 	.word	0x08005ac9
 8005a4c:	08005ac9 	.word	0x08005ac9
 8005a50:	08005ac9 	.word	0x08005ac9
 8005a54:	08005ac9 	.word	0x08005ac9
 8005a58:	08005a87 	.word	0x08005a87
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005a5c:	f7fd fdec 	bl	8003638 <HAL_RCC_GetPCLK3Freq>
 8005a60:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005a62:	e102      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005a64:	f7fd fca4 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8005a68:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005a6a:	e0fe      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a6c:	4b81      	ldr	r3, [pc, #516]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a78:	d102      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8005a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005a7c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a7e:	e0f4      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a84:	e0f1      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a86:	4b7b      	ldr	r3, [pc, #492]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	d117      	bne.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a92:	4b78      	ldr	r3, [pc, #480]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8005a9e:	4b75      	ldr	r3, [pc, #468]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	0e1b      	lsrs	r3, r3, #24
 8005aa4:	f003 030f 	and.w	r3, r3, #15
 8005aa8:	e006      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8005aaa:	4b72      	ldr	r3, [pc, #456]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	0e1b      	lsrs	r3, r3, #24
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	4a70      	ldr	r2, [pc, #448]	@ (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005abe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ac0:	e0d3      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ac6:	e0d0      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005acc:	e0cd      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	d155      	bne.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005ada:	4b66      	ldr	r3, [pc, #408]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005adc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ae0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005ae4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005aec:	d013      	beq.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005af4:	d844      	bhi.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005afc:	d013      	beq.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b04:	d83c      	bhi.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d014      	beq.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b12:	d014      	beq.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8005b14:	e034      	b.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b16:	f107 0318 	add.w	r3, r7, #24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe fcbe 	bl	800449c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b24:	e0a1      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe fb5c 	bl	80041e8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b34:	e099      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005b36:	f7fd fc3b 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8005b3a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005b3c:	e095      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b3e:	4b4d      	ldr	r3, [pc, #308]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d117      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8005b56:	4b47      	ldr	r3, [pc, #284]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	0e1b      	lsrs	r3, r3, #24
 8005b5c:	f003 030f 	and.w	r3, r3, #15
 8005b60:	e006      	b.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8005b62:	4b44      	ldr	r3, [pc, #272]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005b64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b68:	041b      	lsls	r3, r3, #16
 8005b6a:	0e1b      	lsrs	r3, r3, #24
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	4a42      	ldr	r2, [pc, #264]	@ (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b76:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b78:	e077      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b7e:	e074      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b84:	e071      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005b86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b8a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	d131      	bne.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005b92:	4b38      	ldr	r3, [pc, #224]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b9c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005b9e:	4b35      	ldr	r3, [pc, #212]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d106      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d103      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8005bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bb8:	e057      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005bba:	4b2e      	ldr	r3, [pc, #184]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bc8:	d112      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8005bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005bd2:	4b28      	ldr	r3, [pc, #160]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005be0:	d102      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8005be2:	23fa      	movs	r3, #250	@ 0xfa
 8005be4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005be6:	e040      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005be8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005bec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005bee:	e03c      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bf4:	e039      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005bf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bfa:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	d131      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005c02:	4b1c      	ldr	r3, [pc, #112]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005c04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c08:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c0c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005c0e:	4b19      	ldr	r3, [pc, #100]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c1a:	d105      	bne.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8005c22:	4b17      	ldr	r3, [pc, #92]	@ (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8005c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c26:	e020      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005c28:	4b12      	ldr	r3, [pc, #72]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c34:	d106      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3c:	d102      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005c3e:	4b11      	ldr	r3, [pc, #68]	@ (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c42:	e012      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005c44:	4b0b      	ldr	r3, [pc, #44]	@ (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c50:	d106      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8005c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c58:	d102      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8005c5a:	4b07      	ldr	r3, [pc, #28]	@ (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c5e:	e004      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c64:	e001      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3738      	adds	r7, #56	@ 0x38
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	46020c00 	.word	0x46020c00
 8005c78:	00f42400 	.word	0x00f42400
 8005c7c:	0800f950 	.word	0x0800f950
 8005c80:	02dc6c00 	.word	0x02dc6c00
 8005c84:	016e3600 	.word	0x016e3600

08005c88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005c90:	4b47      	ldr	r3, [pc, #284]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a46      	ldr	r2, [pc, #280]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005c96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c9c:	f7fb fca2 	bl	80015e4 <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ca2:	e008      	b.n	8005cb6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ca4:	f7fb fc9e 	bl	80015e4 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e077      	b.n	8005da6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f0      	bne.n	8005ca4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005cca:	f023 0303 	bic.w	r3, r3, #3
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6811      	ldr	r1, [r2, #0]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6852      	ldr	r2, [r2, #4]
 8005cd6:	3a01      	subs	r2, #1
 8005cd8:	0212      	lsls	r2, r2, #8
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	4934      	ldr	r1, [pc, #208]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005ce2:	4b33      	ldr	r3, [pc, #204]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005ce4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ce6:	4b33      	ldr	r3, [pc, #204]	@ (8005db4 <RCCEx_PLL2_Config+0x12c>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6892      	ldr	r2, [r2, #8]
 8005cee:	3a01      	subs	r2, #1
 8005cf0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	68d2      	ldr	r2, [r2, #12]
 8005cf8:	3a01      	subs	r2, #1
 8005cfa:	0252      	lsls	r2, r2, #9
 8005cfc:	b292      	uxth	r2, r2
 8005cfe:	4311      	orrs	r1, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6912      	ldr	r2, [r2, #16]
 8005d04:	3a01      	subs	r2, #1
 8005d06:	0412      	lsls	r2, r2, #16
 8005d08:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005d0c:	4311      	orrs	r1, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6952      	ldr	r2, [r2, #20]
 8005d12:	3a01      	subs	r2, #1
 8005d14:	0612      	lsls	r2, r2, #24
 8005d16:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	4924      	ldr	r1, [pc, #144]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005d22:	4b23      	ldr	r3, [pc, #140]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d26:	f023 020c 	bic.w	r2, r3, #12
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	4920      	ldr	r1, [pc, #128]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005d34:	4b1e      	ldr	r3, [pc, #120]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	491c      	ldr	r1, [pc, #112]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005d42:	4b1b      	ldr	r3, [pc, #108]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d46:	4a1a      	ldr	r2, [pc, #104]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d48:	f023 0310 	bic.w	r3, r3, #16
 8005d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d4e:	4b18      	ldr	r3, [pc, #96]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d56:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	69d2      	ldr	r2, [r2, #28]
 8005d5e:	00d2      	lsls	r2, r2, #3
 8005d60:	4913      	ldr	r1, [pc, #76]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005d66:	4b12      	ldr	r3, [pc, #72]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6a:	4a11      	ldr	r2, [pc, #68]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d6c:	f043 0310 	orr.w	r3, r3, #16
 8005d70:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005d72:	4b0f      	ldr	r3, [pc, #60]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a0e      	ldr	r2, [pc, #56]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d7c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d7e:	f7fb fc31 	bl	80015e4 <HAL_GetTick>
 8005d82:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d84:	e008      	b.n	8005d98 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d86:	f7fb fc2d 	bl	80015e4 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d901      	bls.n	8005d98 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e006      	b.n	8005da6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d98:	4b05      	ldr	r3, [pc, #20]	@ (8005db0 <RCCEx_PLL2_Config+0x128>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0f0      	beq.n	8005d86 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0

}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	46020c00 	.word	0x46020c00
 8005db4:	80800000 	.word	0x80800000

08005db8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005dc0:	4b47      	ldr	r3, [pc, #284]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a46      	ldr	r2, [pc, #280]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005dcc:	f7fb fc0a 	bl	80015e4 <HAL_GetTick>
 8005dd0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dd2:	e008      	b.n	8005de6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005dd4:	f7fb fc06 	bl	80015e4 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e077      	b.n	8005ed6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005de6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f0      	bne.n	8005dd4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005df2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005dfa:	f023 0303 	bic.w	r3, r3, #3
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6811      	ldr	r1, [r2, #0]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6852      	ldr	r2, [r2, #4]
 8005e06:	3a01      	subs	r2, #1
 8005e08:	0212      	lsls	r2, r2, #8
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	4934      	ldr	r1, [pc, #208]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	630b      	str	r3, [r1, #48]	@ 0x30
 8005e12:	4b33      	ldr	r3, [pc, #204]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e16:	4b33      	ldr	r3, [pc, #204]	@ (8005ee4 <RCCEx_PLL3_Config+0x12c>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6892      	ldr	r2, [r2, #8]
 8005e1e:	3a01      	subs	r2, #1
 8005e20:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68d2      	ldr	r2, [r2, #12]
 8005e28:	3a01      	subs	r2, #1
 8005e2a:	0252      	lsls	r2, r2, #9
 8005e2c:	b292      	uxth	r2, r2
 8005e2e:	4311      	orrs	r1, r2
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6912      	ldr	r2, [r2, #16]
 8005e34:	3a01      	subs	r2, #1
 8005e36:	0412      	lsls	r2, r2, #16
 8005e38:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005e3c:	4311      	orrs	r1, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6952      	ldr	r2, [r2, #20]
 8005e42:	3a01      	subs	r2, #1
 8005e44:	0612      	lsls	r2, r2, #24
 8005e46:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	4924      	ldr	r1, [pc, #144]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005e52:	4b23      	ldr	r3, [pc, #140]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	f023 020c 	bic.w	r2, r3, #12
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	4920      	ldr	r1, [pc, #128]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005e64:	4b1e      	ldr	r3, [pc, #120]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	491c      	ldr	r1, [pc, #112]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005e72:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e76:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e78:	f023 0310 	bic.w	r3, r3, #16
 8005e7c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e7e:	4b18      	ldr	r3, [pc, #96]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e86:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	69d2      	ldr	r2, [r2, #28]
 8005e8e:	00d2      	lsls	r2, r2, #3
 8005e90:	4913      	ldr	r1, [pc, #76]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005e96:	4b12      	ldr	r3, [pc, #72]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9a:	4a11      	ldr	r2, [pc, #68]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005e9c:	f043 0310 	orr.w	r3, r3, #16
 8005ea0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005eae:	f7fb fb99 	bl	80015e4 <HAL_GetTick>
 8005eb2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005eb4:	e008      	b.n	8005ec8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005eb6:	f7fb fb95 	bl	80015e4 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e006      	b.n	8005ed6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ec8:	4b05      	ldr	r3, [pc, #20]	@ (8005ee0 <RCCEx_PLL3_Config+0x128>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f0      	beq.n	8005eb6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	46020c00 	.word	0x46020c00
 8005ee4:	80800000 	.word	0x80800000

08005ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e042      	b.n	8005f80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d106      	bne.n	8005f12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f83b 	bl	8005f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2224      	movs	r2, #36	@ 0x24
 8005f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0201 	bic.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fb9e 	bl	8006674 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fa03 	bl	8006344 <UART_SetConfig>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e01b      	b.n	8005f80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fc1d 	bl	80067b8 <UART_CheckIdleState>
 8005f7e:	4603      	mov	r3, r0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	@ 0x28
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d17b      	bne.n	80060ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <HAL_UART_Transmit+0x26>
 8005fbc:	88fb      	ldrh	r3, [r7, #6]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e074      	b.n	80060b0 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2221      	movs	r2, #33	@ 0x21
 8005fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fd6:	f7fb fb05 	bl	80015e4 <HAL_GetTick>
 8005fda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	88fa      	ldrh	r2, [r7, #6]
 8005fe0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	88fa      	ldrh	r2, [r7, #6]
 8005fe8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff4:	d108      	bne.n	8006008 <HAL_UART_Transmit+0x6c>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d104      	bne.n	8006008 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	61bb      	str	r3, [r7, #24]
 8006006:	e003      	b.n	8006010 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006010:	e030      	b.n	8006074 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	2180      	movs	r1, #128	@ 0x80
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 fc75 	bl	800690c <UART_WaitOnFlagUntilTimeout>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e03d      	b.n	80060b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006048:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	3302      	adds	r3, #2
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	e007      	b.n	8006062 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	781a      	ldrb	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	3301      	adds	r3, #1
 8006060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800607a:	b29b      	uxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1c8      	bne.n	8006012 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2200      	movs	r2, #0
 8006088:	2140      	movs	r1, #64	@ 0x40
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fc3e 	bl	800690c <UART_WaitOnFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d005      	beq.n	80060a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e006      	b.n	80060b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e000      	b.n	80060b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80060ae:	2302      	movs	r3, #2
  }
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	@ 0x28
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	4613      	mov	r3, r2
 80060c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	f040 80b5 	bne.w	800623e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <HAL_UART_Receive+0x28>
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0ad      	b.n	8006240 <HAL_UART_Receive+0x188>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2222      	movs	r2, #34	@ 0x22
 80060f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060fa:	f7fb fa73 	bl	80015e4 <HAL_GetTick>
 80060fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	88fa      	ldrh	r2, [r7, #6]
 8006104:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	88fa      	ldrh	r2, [r7, #6]
 800610c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006118:	d10e      	bne.n	8006138 <HAL_UART_Receive+0x80>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d105      	bne.n	800612e <HAL_UART_Receive+0x76>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006128:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800612c:	e02d      	b.n	800618a <HAL_UART_Receive+0xd2>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	22ff      	movs	r2, #255	@ 0xff
 8006132:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006136:	e028      	b.n	800618a <HAL_UART_Receive+0xd2>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10d      	bne.n	800615c <HAL_UART_Receive+0xa4>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d104      	bne.n	8006152 <HAL_UART_Receive+0x9a>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	22ff      	movs	r2, #255	@ 0xff
 800614c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006150:	e01b      	b.n	800618a <HAL_UART_Receive+0xd2>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	227f      	movs	r2, #127	@ 0x7f
 8006156:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800615a:	e016      	b.n	800618a <HAL_UART_Receive+0xd2>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006164:	d10d      	bne.n	8006182 <HAL_UART_Receive+0xca>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <HAL_UART_Receive+0xc0>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	227f      	movs	r2, #127	@ 0x7f
 8006172:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006176:	e008      	b.n	800618a <HAL_UART_Receive+0xd2>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	223f      	movs	r2, #63	@ 0x3f
 800617c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006180:	e003      	b.n	800618a <HAL_UART_Receive+0xd2>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006190:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619a:	d108      	bne.n	80061ae <HAL_UART_Receive+0xf6>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d104      	bne.n	80061ae <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	61bb      	str	r3, [r7, #24]
 80061ac:	e003      	b.n	80061b6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80061b6:	e036      	b.n	8006226 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	2200      	movs	r2, #0
 80061c0:	2120      	movs	r1, #32
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fba2 	bl	800690c <UART_WaitOnFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e032      	b.n	8006240 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10c      	bne.n	80061fa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	8a7b      	ldrh	r3, [r7, #18]
 80061ea:	4013      	ands	r3, r2
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	3302      	adds	r3, #2
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	e00c      	b.n	8006214 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	b2da      	uxtb	r2, r3
 8006202:	8a7b      	ldrh	r3, [r7, #18]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	4013      	ands	r3, r2
 8006208:	b2da      	uxtb	r2, r3
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	3301      	adds	r3, #1
 8006212:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1c2      	bne.n	80061b8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e000      	b.n	8006240 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800623e:	2302      	movs	r3, #2
  }
}
 8006240:	4618      	mov	r0, r3
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	@ 0x28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800625c:	2b20      	cmp	r3, #32
 800625e:	d13c      	bne.n	80062da <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_UART_Receive_IT+0x24>
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e035      	b.n	80062dc <HAL_UART_Receive_IT+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	66da      	str	r2, [r3, #108]	@ 0x6c
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1a      	ldr	r2, [pc, #104]	@ (80062e4 <HAL_UART_Receive_IT+0x9c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d024      	beq.n	80062ca <HAL_UART_Receive_IT+0x82>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a18      	ldr	r2, [pc, #96]	@ (80062e8 <HAL_UART_Receive_IT+0xa0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01f      	beq.n	80062ca <HAL_UART_Receive_IT+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d018      	beq.n	80062ca <HAL_UART_Receive_IT+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	613b      	str	r3, [r7, #16]
   return(result);
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	623b      	str	r3, [r7, #32]
 80062b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	69f9      	ldr	r1, [r7, #28]
 80062bc:	6a3a      	ldr	r2, [r7, #32]
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e6      	bne.n	8006298 <HAL_UART_Receive_IT+0x50>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	461a      	mov	r2, r3
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 fb89 	bl	80069e8 <UART_Start_Receive_IT>
 80062d6:	4603      	mov	r3, r0
 80062d8:	e000      	b.n	80062dc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062da:	2302      	movs	r3, #2
  }
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3728      	adds	r7, #40	@ 0x28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	46002400 	.word	0x46002400
 80062e8:	56002400 	.word	0x56002400

080062ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006326:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800632e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4313      	orrs	r3, r2
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
	...

08006344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006348:	b094      	sub	sp, #80	@ 0x50
 800634a:	af00      	add	r7, sp, #0
 800634c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	4b9b      	ldr	r3, [pc, #620]	@ (80065c8 <UART_SetConfig+0x284>)
 800635a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800635c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	431a      	orrs	r2, r3
 8006366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	431a      	orrs	r2, r3
 800636c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	4313      	orrs	r3, r2
 8006372:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4994      	ldr	r1, [pc, #592]	@ (80065cc <UART_SetConfig+0x288>)
 800637c:	4019      	ands	r1, r3
 800637e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006384:	430b      	orrs	r3, r1
 8006386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006394:	68d9      	ldr	r1, [r3, #12]
 8006396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	ea40 0301 	orr.w	r3, r0, r1
 800639e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b87      	ldr	r3, [pc, #540]	@ (80065c8 <UART_SetConfig+0x284>)
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d009      	beq.n	80063c4 <UART_SetConfig+0x80>
 80063b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	4b86      	ldr	r3, [pc, #536]	@ (80065d0 <UART_SetConfig+0x28c>)
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d004      	beq.n	80063c4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063bc:	6a1a      	ldr	r2, [r3, #32]
 80063be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063c0:	4313      	orrs	r3, r2
 80063c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80063ce:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80063d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d8:	430b      	orrs	r3, r1
 80063da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e2:	f023 000f 	bic.w	r0, r3, #15
 80063e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80063ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	ea40 0301 	orr.w	r3, r0, r1
 80063f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b76      	ldr	r3, [pc, #472]	@ (80065d4 <UART_SetConfig+0x290>)
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d102      	bne.n	8006404 <UART_SetConfig+0xc0>
 80063fe:	2301      	movs	r3, #1
 8006400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006402:	e021      	b.n	8006448 <UART_SetConfig+0x104>
 8006404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	4b73      	ldr	r3, [pc, #460]	@ (80065d8 <UART_SetConfig+0x294>)
 800640a:	429a      	cmp	r2, r3
 800640c:	d102      	bne.n	8006414 <UART_SetConfig+0xd0>
 800640e:	2304      	movs	r3, #4
 8006410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006412:	e019      	b.n	8006448 <UART_SetConfig+0x104>
 8006414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	4b70      	ldr	r3, [pc, #448]	@ (80065dc <UART_SetConfig+0x298>)
 800641a:	429a      	cmp	r2, r3
 800641c:	d102      	bne.n	8006424 <UART_SetConfig+0xe0>
 800641e:	2308      	movs	r3, #8
 8006420:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006422:	e011      	b.n	8006448 <UART_SetConfig+0x104>
 8006424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	4b6d      	ldr	r3, [pc, #436]	@ (80065e0 <UART_SetConfig+0x29c>)
 800642a:	429a      	cmp	r2, r3
 800642c:	d102      	bne.n	8006434 <UART_SetConfig+0xf0>
 800642e:	2310      	movs	r3, #16
 8006430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006432:	e009      	b.n	8006448 <UART_SetConfig+0x104>
 8006434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	4b63      	ldr	r3, [pc, #396]	@ (80065c8 <UART_SetConfig+0x284>)
 800643a:	429a      	cmp	r2, r3
 800643c:	d102      	bne.n	8006444 <UART_SetConfig+0x100>
 800643e:	2320      	movs	r3, #32
 8006440:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006442:	e001      	b.n	8006448 <UART_SetConfig+0x104>
 8006444:	2300      	movs	r3, #0
 8006446:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	4b5e      	ldr	r3, [pc, #376]	@ (80065c8 <UART_SetConfig+0x284>)
 800644e:	429a      	cmp	r2, r3
 8006450:	d004      	beq.n	800645c <UART_SetConfig+0x118>
 8006452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	4b5e      	ldr	r3, [pc, #376]	@ (80065d0 <UART_SetConfig+0x28c>)
 8006458:	429a      	cmp	r2, r3
 800645a:	d172      	bne.n	8006542 <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800645c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800645e:	2200      	movs	r2, #0
 8006460:	623b      	str	r3, [r7, #32]
 8006462:	627a      	str	r2, [r7, #36]	@ 0x24
 8006464:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006468:	f7fe facc 	bl	8004a04 <HAL_RCCEx_GetPeriphCLKFreq>
 800646c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800646e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 80e7 	beq.w	8006644 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647a:	4a5a      	ldr	r2, [pc, #360]	@ (80065e4 <UART_SetConfig+0x2a0>)
 800647c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006480:	461a      	mov	r2, r3
 8006482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006484:	fbb3 f3f2 	udiv	r3, r3, r2
 8006488:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800648a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	4613      	mov	r3, r2
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	4413      	add	r3, r2
 8006494:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006496:	429a      	cmp	r2, r3
 8006498:	d305      	bcc.n	80064a6 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800649a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d903      	bls.n	80064ae <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80064ac:	e048      	b.n	8006540 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064b0:	2200      	movs	r2, #0
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	61fa      	str	r2, [r7, #28]
 80064b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ba:	4a4a      	ldr	r2, [pc, #296]	@ (80065e4 <UART_SetConfig+0x2a0>)
 80064bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2200      	movs	r2, #0
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	617a      	str	r2, [r7, #20]
 80064c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80064cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80064d0:	f7fa f8de 	bl	8000690 <__aeabi_uldivmod>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4610      	mov	r0, r2
 80064da:	4619      	mov	r1, r3
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	020b      	lsls	r3, r1, #8
 80064e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064ea:	0202      	lsls	r2, r0, #8
 80064ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064ee:	6849      	ldr	r1, [r1, #4]
 80064f0:	0849      	lsrs	r1, r1, #1
 80064f2:	2000      	movs	r0, #0
 80064f4:	460c      	mov	r4, r1
 80064f6:	4605      	mov	r5, r0
 80064f8:	eb12 0804 	adds.w	r8, r2, r4
 80064fc:	eb43 0905 	adc.w	r9, r3, r5
 8006500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	60bb      	str	r3, [r7, #8]
 8006508:	60fa      	str	r2, [r7, #12]
 800650a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800650e:	4640      	mov	r0, r8
 8006510:	4649      	mov	r1, r9
 8006512:	f7fa f8bd 	bl	8000690 <__aeabi_uldivmod>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4613      	mov	r3, r2
 800651c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800651e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006520:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006524:	d308      	bcc.n	8006538 <UART_SetConfig+0x1f4>
 8006526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006528:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800652c:	d204      	bcs.n	8006538 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 800652e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006534:	60da      	str	r2, [r3, #12]
 8006536:	e003      	b.n	8006540 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800653e:	e081      	b.n	8006644 <UART_SetConfig+0x300>
 8006540:	e080      	b.n	8006644 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800654a:	d14d      	bne.n	80065e8 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800654c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800654e:	2200      	movs	r2, #0
 8006550:	603b      	str	r3, [r7, #0]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006558:	f7fe fa54 	bl	8004a04 <HAL_RCCEx_GetPeriphCLKFreq>
 800655c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800655e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006560:	2b00      	cmp	r3, #0
 8006562:	d06f      	beq.n	8006644 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	4a1e      	ldr	r2, [pc, #120]	@ (80065e4 <UART_SetConfig+0x2a0>)
 800656a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800656e:	461a      	mov	r2, r3
 8006570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006572:	fbb3 f3f2 	udiv	r3, r3, r2
 8006576:	005a      	lsls	r2, r3, #1
 8006578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	085b      	lsrs	r3, r3, #1
 800657e:	441a      	add	r2, r3
 8006580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	fbb2 f3f3 	udiv	r3, r2, r3
 8006588:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800658a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800658c:	2b0f      	cmp	r3, #15
 800658e:	d916      	bls.n	80065be <UART_SetConfig+0x27a>
 8006590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006596:	d212      	bcs.n	80065be <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800659a:	b29b      	uxth	r3, r3
 800659c:	f023 030f 	bic.w	r3, r3, #15
 80065a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a4:	085b      	lsrs	r3, r3, #1
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80065b0:	4313      	orrs	r3, r2
 80065b2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80065b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80065ba:	60da      	str	r2, [r3, #12]
 80065bc:	e042      	b.n	8006644 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80065c4:	e03e      	b.n	8006644 <UART_SetConfig+0x300>
 80065c6:	bf00      	nop
 80065c8:	46002400 	.word	0x46002400
 80065cc:	cfff69f3 	.word	0xcfff69f3
 80065d0:	56002400 	.word	0x56002400
 80065d4:	40013800 	.word	0x40013800
 80065d8:	40004800 	.word	0x40004800
 80065dc:	40004c00 	.word	0x40004c00
 80065e0:	40005000 	.word	0x40005000
 80065e4:	0800fa14 	.word	0x0800fa14
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80065e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ea:	2200      	movs	r2, #0
 80065ec:	469a      	mov	sl, r3
 80065ee:	4693      	mov	fp, r2
 80065f0:	4650      	mov	r0, sl
 80065f2:	4659      	mov	r1, fp
 80065f4:	f7fe fa06 	bl	8004a04 <HAL_RCCEx_GetPeriphCLKFreq>
 80065f8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80065fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d021      	beq.n	8006644 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006604:	4a1a      	ldr	r2, [pc, #104]	@ (8006670 <UART_SetConfig+0x32c>)
 8006606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800660a:	461a      	mov	r2, r3
 800660c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800660e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	441a      	add	r2, r3
 800661a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006622:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006626:	2b0f      	cmp	r3, #15
 8006628:	d909      	bls.n	800663e <UART_SetConfig+0x2fa>
 800662a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800662c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006630:	d205      	bcs.n	800663e <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006634:	b29a      	uxth	r2, r3
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60da      	str	r2, [r3, #12]
 800663c:	e002      	b.n	8006644 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006646:	2201      	movs	r2, #1
 8006648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800664c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664e:	2201      	movs	r2, #1
 8006650:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006656:	2200      	movs	r2, #0
 8006658:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800665a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665c:	2200      	movs	r2, #0
 800665e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006660:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006664:	4618      	mov	r0, r3
 8006666:	3750      	adds	r7, #80	@ 0x50
 8006668:	46bd      	mov	sp, r7
 800666a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800666e:	bf00      	nop
 8006670:	0800fa14 	.word	0x0800fa14

08006674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006708:	f003 0310 	and.w	r3, r3, #16
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01a      	beq.n	800678a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800676e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006772:	d10a      	bne.n	800678a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	605a      	str	r2, [r3, #4]
  }
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b098      	sub	sp, #96	@ 0x60
 80067bc:	af02      	add	r7, sp, #8
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067c8:	f7fa ff0c 	bl	80015e4 <HAL_GetTick>
 80067cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0308 	and.w	r3, r3, #8
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d12f      	bne.n	800683c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067e4:	2200      	movs	r2, #0
 80067e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f88e 	bl	800690c <UART_WaitOnFlagUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d022      	beq.n	800683c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800680a:	653b      	str	r3, [r7, #80]	@ 0x50
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006814:	647b      	str	r3, [r7, #68]	@ 0x44
 8006816:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800681a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e6      	bne.n	80067f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e063      	b.n	8006904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b04      	cmp	r3, #4
 8006848:	d149      	bne.n	80068de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800684a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006852:	2200      	movs	r2, #0
 8006854:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f857 	bl	800690c <UART_WaitOnFlagUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d03c      	beq.n	80068de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	623b      	str	r3, [r7, #32]
   return(result);
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006882:	633b      	str	r3, [r7, #48]	@ 0x30
 8006884:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e6      	bne.n	8006864 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3308      	adds	r3, #8
 80068b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068b6:	61fa      	str	r2, [r7, #28]
 80068b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	69b9      	ldr	r1, [r7, #24]
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	617b      	str	r3, [r7, #20]
   return(result);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e5      	bne.n	8006896 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e012      	b.n	8006904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3758      	adds	r7, #88	@ 0x58
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	4613      	mov	r3, r2
 800691a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800691c:	e04f      	b.n	80069be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d04b      	beq.n	80069be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006926:	f7fa fe5d 	bl	80015e4 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	429a      	cmp	r2, r3
 8006934:	d302      	bcc.n	800693c <UART_WaitOnFlagUntilTimeout+0x30>
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e04e      	b.n	80069de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d037      	beq.n	80069be <UART_WaitOnFlagUntilTimeout+0xb2>
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b80      	cmp	r3, #128	@ 0x80
 8006952:	d034      	beq.n	80069be <UART_WaitOnFlagUntilTimeout+0xb2>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b40      	cmp	r3, #64	@ 0x40
 8006958:	d031      	beq.n	80069be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b08      	cmp	r3, #8
 8006966:	d110      	bne.n	800698a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2208      	movs	r2, #8
 800696e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f95b 	bl	8006c2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2208      	movs	r2, #8
 800697a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e029      	b.n	80069de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006998:	d111      	bne.n	80069be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 f941 	bl	8006c2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e00f      	b.n	80069de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69da      	ldr	r2, [r3, #28]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4013      	ands	r3, r2
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	bf0c      	ite	eq
 80069ce:	2301      	moveq	r3, #1
 80069d0:	2300      	movne	r3, #0
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d0a0      	beq.n	800691e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b0a3      	sub	sp, #140	@ 0x8c
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	88fa      	ldrh	r2, [r7, #6]
 8006a00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	88fa      	ldrh	r2, [r7, #6]
 8006a08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a1a:	d10e      	bne.n	8006a3a <UART_Start_Receive_IT+0x52>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d105      	bne.n	8006a30 <UART_Start_Receive_IT+0x48>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006a2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a2e:	e02d      	b.n	8006a8c <UART_Start_Receive_IT+0xa4>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	22ff      	movs	r2, #255	@ 0xff
 8006a34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a38:	e028      	b.n	8006a8c <UART_Start_Receive_IT+0xa4>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10d      	bne.n	8006a5e <UART_Start_Receive_IT+0x76>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <UART_Start_Receive_IT+0x6c>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	22ff      	movs	r2, #255	@ 0xff
 8006a4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a52:	e01b      	b.n	8006a8c <UART_Start_Receive_IT+0xa4>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	227f      	movs	r2, #127	@ 0x7f
 8006a58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a5c:	e016      	b.n	8006a8c <UART_Start_Receive_IT+0xa4>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a66:	d10d      	bne.n	8006a84 <UART_Start_Receive_IT+0x9c>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <UART_Start_Receive_IT+0x92>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	227f      	movs	r2, #127	@ 0x7f
 8006a74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a78:	e008      	b.n	8006a8c <UART_Start_Receive_IT+0xa4>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	223f      	movs	r2, #63	@ 0x3f
 8006a7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a82:	e003      	b.n	8006a8c <UART_Start_Receive_IT+0xa4>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2222      	movs	r2, #34	@ 0x22
 8006a98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006aac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aae:	f043 0301 	orr.w	r3, r3, #1
 8006ab2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006ac0:	673a      	str	r2, [r7, #112]	@ 0x70
 8006ac2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006ac6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006ace:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e3      	bne.n	8006a9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006adc:	d14f      	bne.n	8006b7e <UART_Start_Receive_IT+0x196>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ae4:	88fa      	ldrh	r2, [r7, #6]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d349      	bcc.n	8006b7e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006af2:	d107      	bne.n	8006b04 <UART_Start_Receive_IT+0x11c>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d103      	bne.n	8006b04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4a47      	ldr	r2, [pc, #284]	@ (8006c1c <UART_Start_Receive_IT+0x234>)
 8006b00:	675a      	str	r2, [r3, #116]	@ 0x74
 8006b02:	e002      	b.n	8006b0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a46      	ldr	r2, [pc, #280]	@ (8006c20 <UART_Start_Receive_IT+0x238>)
 8006b08:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d01a      	beq.n	8006b48 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b36:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006b3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e4      	bne.n	8006b12 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3308      	adds	r3, #8
 8006b66:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006b68:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006b6a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e5      	bne.n	8006b48 <UART_Start_Receive_IT+0x160>
 8006b7c:	e046      	b.n	8006c0c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b86:	d107      	bne.n	8006b98 <UART_Start_Receive_IT+0x1b0>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4a24      	ldr	r2, [pc, #144]	@ (8006c24 <UART_Start_Receive_IT+0x23c>)
 8006b94:	675a      	str	r2, [r3, #116]	@ 0x74
 8006b96:	e002      	b.n	8006b9e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4a23      	ldr	r2, [pc, #140]	@ (8006c28 <UART_Start_Receive_IT+0x240>)
 8006b9c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d019      	beq.n	8006bda <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006bba:	677b      	str	r3, [r7, #116]	@ 0x74
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e6      	bne.n	8006ba6 <UART_Start_Receive_IT+0x1be>
 8006bd8:	e018      	b.n	8006c0c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	613b      	str	r3, [r7, #16]
   return(result);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f043 0320 	orr.w	r3, r3, #32
 8006bee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bf8:	623b      	str	r3, [r7, #32]
 8006bfa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	69f9      	ldr	r1, [r7, #28]
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e6      	bne.n	8006bda <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	378c      	adds	r7, #140	@ 0x8c
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	080073f1 	.word	0x080073f1
 8006c20:	08007081 	.word	0x08007081
 8006c24:	08006ebd 	.word	0x08006ebd
 8006c28:	08006cf9 	.word	0x08006cf9

08006c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b095      	sub	sp, #84	@ 0x54
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c52:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e6      	bne.n	8006c34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c7c:	f023 0301 	bic.w	r3, r3, #1
 8006c80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3308      	adds	r3, #8
 8006c88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e3      	bne.n	8006c66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d118      	bne.n	8006cd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f023 0310 	bic.w	r3, r3, #16
 8006cba:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc4:	61bb      	str	r3, [r7, #24]
 8006cc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6979      	ldr	r1, [r7, #20]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e6      	bne.n	8006ca6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006cec:	bf00      	nop
 8006cee:	3754      	adds	r7, #84	@ 0x54
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b09c      	sub	sp, #112	@ 0x70
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d06:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d10:	2b22      	cmp	r3, #34	@ 0x22
 8006d12:	f040 80c3 	bne.w	8006e9c <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006d24:	b2d9      	uxtb	r1, r3
 8006d26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d30:	400a      	ands	r2, r1
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f040 80a6 	bne.w	8006eac <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e6      	bne.n	8006d60 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3308      	adds	r3, #8
 8006d98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3308      	adds	r3, #8
 8006db0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006db2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006db4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006db8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e5      	bne.n	8006d92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a35      	ldr	r2, [pc, #212]	@ (8006eb4 <UART_RxISR_8BIT+0x1bc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d024      	beq.n	8006e2e <UART_RxISR_8BIT+0x136>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a33      	ldr	r2, [pc, #204]	@ (8006eb8 <UART_RxISR_8BIT+0x1c0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01f      	beq.n	8006e2e <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d018      	beq.n	8006e2e <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	623b      	str	r3, [r7, #32]
   return(result);
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e10:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e6      	bne.n	8006dfc <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d12e      	bne.n	8006e94 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f023 0310 	bic.w	r3, r3, #16
 8006e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e5a:	61fb      	str	r3, [r7, #28]
 8006e5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	69b9      	ldr	r1, [r7, #24]
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	617b      	str	r3, [r7, #20]
   return(result);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e6      	bne.n	8006e3c <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d103      	bne.n	8006e84 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2210      	movs	r2, #16
 8006e82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff fa37 	bl	8006300 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e92:	e00b      	b.n	8006eac <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f007 fcf9 	bl	800e88c <HAL_UART_RxCpltCallback>
}
 8006e9a:	e007      	b.n	8006eac <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0208 	orr.w	r2, r2, #8
 8006eaa:	619a      	str	r2, [r3, #24]
}
 8006eac:	bf00      	nop
 8006eae:	3770      	adds	r7, #112	@ 0x70
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	46002400 	.word	0x46002400
 8006eb8:	56002400 	.word	0x56002400

08006ebc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b09c      	sub	sp, #112	@ 0x70
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006eca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ed4:	2b22      	cmp	r3, #34	@ 0x22
 8006ed6:	f040 80c3 	bne.w	8007060 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006eea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006eee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ef8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006efe:	1c9a      	adds	r2, r3, #2
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f040 80a6 	bne.w	8007070 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f38:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f42:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f44:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e6      	bne.n	8006f24 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	f023 0301 	bic.w	r3, r3, #1
 8006f6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3308      	adds	r3, #8
 8006f74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f76:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e5      	bne.n	8006f56 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a35      	ldr	r2, [pc, #212]	@ (8007078 <UART_RxISR_16BIT+0x1bc>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d024      	beq.n	8006ff2 <UART_RxISR_16BIT+0x136>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a33      	ldr	r2, [pc, #204]	@ (800707c <UART_RxISR_16BIT+0x1c0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d01f      	beq.n	8006ff2 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d018      	beq.n	8006ff2 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fe0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fe4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e6      	bne.n	8006fc0 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d12e      	bne.n	8007058 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	60bb      	str	r3, [r7, #8]
   return(result);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f023 0310 	bic.w	r3, r3, #16
 8007014:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6979      	ldr	r1, [r7, #20]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	613b      	str	r3, [r7, #16]
   return(result);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e6      	bne.n	8007000 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	f003 0310 	and.w	r3, r3, #16
 800703c:	2b10      	cmp	r3, #16
 800703e:	d103      	bne.n	8007048 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2210      	movs	r2, #16
 8007046:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff f955 	bl	8006300 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007056:	e00b      	b.n	8007070 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f007 fc17 	bl	800e88c <HAL_UART_RxCpltCallback>
}
 800705e:	e007      	b.n	8007070 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0208 	orr.w	r2, r2, #8
 800706e:	619a      	str	r2, [r3, #24]
}
 8007070:	bf00      	nop
 8007072:	3770      	adds	r7, #112	@ 0x70
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	46002400 	.word	0x46002400
 800707c:	56002400 	.word	0x56002400

08007080 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b0ac      	sub	sp, #176	@ 0xb0
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800708e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070b6:	2b22      	cmp	r3, #34	@ 0x22
 80070b8:	f040 8188 	bne.w	80073cc <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80070c2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070c6:	e12b      	b.n	8007320 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ce:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80070d6:	b2d9      	uxtb	r1, r3
 80070d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e2:	400a      	ands	r2, r1
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800710e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	2b00      	cmp	r3, #0
 8007118:	d053      	beq.n	80071c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800711a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d011      	beq.n	800714a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800712a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2201      	movs	r2, #1
 8007138:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007140:	f043 0201 	orr.w	r2, r3, #1
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800714a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d011      	beq.n	800717a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00b      	beq.n	800717a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2202      	movs	r2, #2
 8007168:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007170:	f043 0204 	orr.w	r2, r3, #4
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800717a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800717e:	f003 0304 	and.w	r3, r3, #4
 8007182:	2b00      	cmp	r3, #0
 8007184:	d011      	beq.n	80071aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00b      	beq.n	80071aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2204      	movs	r2, #4
 8007198:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071a0:	f043 0202 	orr.w	r2, r3, #2
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d006      	beq.n	80071c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff f899 	bl	80062ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f040 80a8 	bne.w	8007320 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80071de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071f4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80071f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007200:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e4      	bne.n	80071d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3308      	adds	r3, #8
 800720c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007216:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3308      	adds	r3, #8
 800722a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800722e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007230:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007234:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800723c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e1      	bne.n	8007206 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a62      	ldr	r2, [pc, #392]	@ (80073e4 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d026      	beq.n	80072ae <UART_RxISR_8BIT_FIFOEN+0x22e>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a60      	ldr	r2, [pc, #384]	@ (80073e8 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d021      	beq.n	80072ae <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01a      	beq.n	80072ae <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007288:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800728c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800729a:	657b      	str	r3, [r7, #84]	@ 0x54
 800729c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80072a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e4      	bne.n	8007278 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d130      	bne.n	8007318 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	f023 0310 	bic.w	r3, r3, #16
 80072d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072de:	643b      	str	r3, [r7, #64]	@ 0x40
 80072e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e4      	bne.n	80072bc <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	f003 0310 	and.w	r3, r3, #16
 80072fc:	2b10      	cmp	r3, #16
 80072fe:	d103      	bne.n	8007308 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2210      	movs	r2, #16
 8007306:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7fe fff5 	bl	8006300 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007316:	e00e      	b.n	8007336 <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f007 fab7 	bl	800e88c <HAL_UART_RxCpltCallback>
        break;
 800731e:	e00a      	b.n	8007336 <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007320:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007324:	2b00      	cmp	r3, #0
 8007326:	d006      	beq.n	8007336 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 8007328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800732c:	f003 0320 	and.w	r3, r3, #32
 8007330:	2b00      	cmp	r3, #0
 8007332:	f47f aec9 	bne.w	80070c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800733c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007340:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007344:	2b00      	cmp	r3, #0
 8007346:	d049      	beq.n	80073dc <UART_RxISR_8BIT_FIFOEN+0x35c>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800734e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007352:	429a      	cmp	r2, r3
 8007354:	d242      	bcs.n	80073dc <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3308      	adds	r3, #8
 800735c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	61fb      	str	r3, [r7, #28]
   return(result);
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800736c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3308      	adds	r3, #8
 8007376:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800737a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800737c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e3      	bne.n	8007356 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a16      	ldr	r2, [pc, #88]	@ (80073ec <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8007392:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f043 0320 	orr.w	r3, r3, #32
 80073a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073b6:	61bb      	str	r3, [r7, #24]
 80073b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	6979      	ldr	r1, [r7, #20]
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	613b      	str	r3, [r7, #16]
   return(result);
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e4      	bne.n	8007394 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073ca:	e007      	b.n	80073dc <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	699a      	ldr	r2, [r3, #24]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0208 	orr.w	r2, r2, #8
 80073da:	619a      	str	r2, [r3, #24]
}
 80073dc:	bf00      	nop
 80073de:	37b0      	adds	r7, #176	@ 0xb0
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	46002400 	.word	0x46002400
 80073e8:	56002400 	.word	0x56002400
 80073ec:	08006cf9 	.word	0x08006cf9

080073f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b0ae      	sub	sp, #184	@ 0xb8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80073fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007426:	2b22      	cmp	r3, #34	@ 0x22
 8007428:	f040 818c 	bne.w	8007744 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007432:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007436:	e12f      	b.n	8007698 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800744a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800744e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007452:	4013      	ands	r3, r2
 8007454:	b29a      	uxth	r2, r3
 8007456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800745a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007460:	1c9a      	adds	r2, r3, #2
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	b29a      	uxth	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	2b00      	cmp	r3, #0
 800748c:	d053      	beq.n	8007536 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800748e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d011      	beq.n	80074be <UART_RxISR_16BIT_FIFOEN+0xce>
 800749a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800749e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00b      	beq.n	80074be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2201      	movs	r2, #1
 80074ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b4:	f043 0201 	orr.w	r2, r3, #1
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d011      	beq.n	80074ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 80074ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00b      	beq.n	80074ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2202      	movs	r2, #2
 80074dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e4:	f043 0204 	orr.w	r2, r3, #4
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074f2:	f003 0304 	and.w	r3, r3, #4
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d011      	beq.n	800751e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80074fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00b      	beq.n	800751e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2204      	movs	r2, #4
 800750c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007514:	f043 0202 	orr.w	r2, r3, #2
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007524:	2b00      	cmp	r3, #0
 8007526:	d006      	beq.n	8007536 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7fe fedf 	bl	80062ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	f040 80aa 	bne.w	8007698 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007552:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	461a      	mov	r2, r3
 8007562:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007566:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800756a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800756e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007578:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e2      	bne.n	8007544 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3308      	adds	r3, #8
 8007584:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007588:	e853 3f00 	ldrex	r3, [r3]
 800758c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800758e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007594:	f023 0301 	bic.w	r3, r3, #1
 8007598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3308      	adds	r3, #8
 80075a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80075a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80075a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80075ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80075b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e1      	bne.n	800757e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2220      	movs	r2, #32
 80075be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a62      	ldr	r2, [pc, #392]	@ (800775c <UART_RxISR_16BIT_FIFOEN+0x36c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d026      	beq.n	8007626 <UART_RxISR_16BIT_FIFOEN+0x236>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a60      	ldr	r2, [pc, #384]	@ (8007760 <UART_RxISR_16BIT_FIFOEN+0x370>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d021      	beq.n	8007626 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01a      	beq.n	8007626 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007600:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007604:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007612:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007614:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007618:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e4      	bne.n	80075f0 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800762a:	2b01      	cmp	r3, #1
 800762c:	d130      	bne.n	8007690 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007644:	f023 0310 	bic.w	r3, r3, #16
 8007648:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007656:	647b      	str	r3, [r7, #68]	@ 0x44
 8007658:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800765c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e4      	bne.n	8007634 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b10      	cmp	r3, #16
 8007676:	d103      	bne.n	8007680 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2210      	movs	r2, #16
 800767e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7fe fe39 	bl	8006300 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800768e:	e00e      	b.n	80076ae <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f007 f8fb 	bl	800e88c <HAL_UART_RxCpltCallback>
        break;
 8007696:	e00a      	b.n	80076ae <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007698:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800769c:	2b00      	cmp	r3, #0
 800769e:	d006      	beq.n	80076ae <UART_RxISR_16BIT_FIFOEN+0x2be>
 80076a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80076a4:	f003 0320 	and.w	r3, r3, #32
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f47f aec5 	bne.w	8007438 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076b4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80076b8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d049      	beq.n	8007754 <UART_RxISR_16BIT_FIFOEN+0x364>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80076c6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d242      	bcs.n	8007754 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3308      	adds	r3, #8
 80076d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	623b      	str	r3, [r7, #32]
   return(result);
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80076f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80076f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e3      	bne.n	80076ce <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a16      	ldr	r2, [pc, #88]	@ (8007764 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800770a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	60fb      	str	r3, [r7, #12]
   return(result);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f043 0320 	orr.w	r3, r3, #32
 8007720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800772e:	61fb      	str	r3, [r7, #28]
 8007730:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	69b9      	ldr	r1, [r7, #24]
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	617b      	str	r3, [r7, #20]
   return(result);
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e4      	bne.n	800770c <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007742:	e007      	b.n	8007754 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0208 	orr.w	r2, r2, #8
 8007752:	619a      	str	r2, [r3, #24]
}
 8007754:	bf00      	nop
 8007756:	37b8      	adds	r7, #184	@ 0xb8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	46002400 	.word	0x46002400
 8007760:	56002400 	.word	0x56002400
 8007764:	08006ebd 	.word	0x08006ebd

08007768 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007776:	2b01      	cmp	r3, #1
 8007778:	d101      	bne.n	800777e <HAL_UARTEx_DisableFifoMode+0x16>
 800777a:	2302      	movs	r3, #2
 800777c:	e027      	b.n	80077ce <HAL_UARTEx_DisableFifoMode+0x66>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2224      	movs	r2, #36	@ 0x24
 800778a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0201 	bic.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80077ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2220      	movs	r2, #32
 80077c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d101      	bne.n	80077f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077ee:	2302      	movs	r3, #2
 80077f0:	e02d      	b.n	800784e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2224      	movs	r2, #36	@ 0x24
 80077fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0201 	bic.w	r2, r2, #1
 8007818:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f850 	bl	80078d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007866:	2b01      	cmp	r3, #1
 8007868:	d101      	bne.n	800786e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800786a:	2302      	movs	r3, #2
 800786c:	e02d      	b.n	80078ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2224      	movs	r2, #36	@ 0x24
 800787a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0201 	bic.w	r2, r2, #1
 8007894:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f812 	bl	80078d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d108      	bne.n	80078f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078f4:	e031      	b.n	800795a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078f6:	2308      	movs	r3, #8
 80078f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078fa:	2308      	movs	r3, #8
 80078fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	0e5b      	lsrs	r3, r3, #25
 8007906:	b2db      	uxtb	r3, r3
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	0f5b      	lsrs	r3, r3, #29
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	7b3a      	ldrb	r2, [r7, #12]
 8007922:	4911      	ldr	r1, [pc, #68]	@ (8007968 <UARTEx_SetNbDataToProcess+0x94>)
 8007924:	5c8a      	ldrb	r2, [r1, r2]
 8007926:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800792a:	7b3a      	ldrb	r2, [r7, #12]
 800792c:	490f      	ldr	r1, [pc, #60]	@ (800796c <UARTEx_SetNbDataToProcess+0x98>)
 800792e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007930:	fb93 f3f2 	sdiv	r3, r3, r2
 8007934:	b29a      	uxth	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	7b7a      	ldrb	r2, [r7, #13]
 8007940:	4909      	ldr	r1, [pc, #36]	@ (8007968 <UARTEx_SetNbDataToProcess+0x94>)
 8007942:	5c8a      	ldrb	r2, [r1, r2]
 8007944:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007948:	7b7a      	ldrb	r2, [r7, #13]
 800794a:	4908      	ldr	r1, [pc, #32]	@ (800796c <UARTEx_SetNbDataToProcess+0x98>)
 800794c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800794e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007952:	b29a      	uxth	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	0800fa2c 	.word	0x0800fa2c
 800796c:	0800fa34 	.word	0x0800fa34

08007970 <aci_gap_init>:
#include "stm32wb05n_gap_aci.h"
#include "hci_tl.h"

tBleStatus aci_gap_init(uint8_t Privacy_Type,
                        uint8_t Identity_Address_Type)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8007976:	af00      	add	r7, sp, #0
 8007978:	4602      	mov	r2, r0
 800797a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800797e:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007988:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 800798c:	460a      	mov	r2, r1
 800798e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007990:	f107 0310 	add.w	r3, r7, #16
 8007994:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  tBleStatus status = 0;
 8007998:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800799c:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 80079a0:	2200      	movs	r2, #0
 80079a2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Privacy_Type = htob(Privacy_Type, 1);
 80079aa:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80079ae:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 80079b2:	f2a2 2241 	subw	r2, r2, #577	@ 0x241
 80079b6:	7812      	ldrb	r2, [r2, #0]
 80079b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80079ba:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 80079be:	3301      	adds	r3, #1
 80079c0:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 80079c4:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80079c8:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 80079cc:	f2a2 2242 	subw	r2, r2, #578	@ 0x242
 80079d0:	7812      	ldrb	r2, [r2, #0]
 80079d2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80079d4:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 80079d8:	3301      	adds	r3, #1
 80079da:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  STM32WB_memset(&rq, 0, sizeof(rq));
 80079de:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80079e2:	221c      	movs	r2, #28
 80079e4:	2100      	movs	r1, #0
 80079e6:	4618      	mov	r0, r3
 80079e8:	f007 f8db 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
  rq.ogf = 0x3f;
 80079f2:	233f      	movs	r3, #63	@ 0x3f
 80079f4:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
  rq.ocf = 0x081;
 80079f8:	2381      	movs	r3, #129	@ 0x81
 80079fa:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
  rq.cparam = cmd_buffer;
 80079fe:	f107 0310 	add.w	r3, r7, #16
 8007a02:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  rq.clen = index_input;
 8007a06:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007a0a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  rq.rparam = &status;
 8007a0e:	f107 030f 	add.w	r3, r7, #15
 8007a12:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.rlen = 1;
 8007a16:	2301      	movs	r3, #1
 8007a18:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  if (hci_send_req(&rq, FALSE) < 0)
 8007a1c:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8007a20:	2100      	movs	r1, #0
 8007a22:	4618      	mov	r0, r3
 8007a24:	f004 fba4 	bl	800c170 <hci_send_req>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	da01      	bge.n	8007a32 <aci_gap_init+0xc2>
    return BLE_STATUS_TIMEOUT;
 8007a2e:	23ff      	movs	r3, #255	@ 0xff
 8007a30:	e00d      	b.n	8007a4e <aci_gap_init+0xde>
  if (status) {
 8007a32:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007a36:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <aci_gap_init+0xdc>
    return status;
 8007a40:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007a44:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	e000      	b.n	8007a4e <aci_gap_init+0xde>
  }
  return BLE_STATUS_SUCCESS;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <aci_gap_set_io_capability>:
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	4602      	mov	r2, r0
 8007a62:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007a66:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8007a6a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007a6c:	f107 0310 	add.w	r3, r7, #16
 8007a70:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  tBleStatus status = 0;
 8007a74:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007a78:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8007a80:	2300      	movs	r3, #0
 8007a82:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->IO_Capability = htob(IO_Capability, 1);
 8007a86:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007a8a:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007a8e:	f2a2 2241 	subw	r2, r2, #577	@ 0x241
 8007a92:	7812      	ldrb	r2, [r2, #0]
 8007a94:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007a96:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  STM32WB_memset(&rq, 0, sizeof(rq));
 8007aa0:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8007aa4:	221c      	movs	r2, #28
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f007 f87a 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
  rq.ogf = 0x3f;
 8007ab4:	233f      	movs	r3, #63	@ 0x3f
 8007ab6:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
  rq.ocf = 0x085;
 8007aba:	2385      	movs	r3, #133	@ 0x85
 8007abc:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
  rq.cparam = cmd_buffer;
 8007ac0:	f107 0310 	add.w	r3, r7, #16
 8007ac4:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  rq.clen = index_input;
 8007ac8:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007acc:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  rq.rparam = &status;
 8007ad0:	f107 030f 	add.w	r3, r7, #15
 8007ad4:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.rlen = 1;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  if (hci_send_req(&rq, FALSE) < 0)
 8007ade:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f004 fb43 	bl	800c170 <hci_send_req>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	da01      	bge.n	8007af4 <aci_gap_set_io_capability+0x9c>
    return BLE_STATUS_TIMEOUT;
 8007af0:	23ff      	movs	r3, #255	@ 0xff
 8007af2:	e00d      	b.n	8007b10 <aci_gap_set_io_capability+0xb8>
  if (status) {
 8007af4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007af8:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d005      	beq.n	8007b0e <aci_gap_set_io_capability+0xb6>
    return status;
 8007b02:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007b06:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	e000      	b.n	8007b10 <aci_gap_set_io_capability+0xb8>
  }
  return BLE_STATUS_SUCCESS;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <aci_gap_set_security_requirements>:
                                             uint8_t SC_Support,
                                             uint8_t KeyPress_Notification_Support,
                                             uint8_t Min_Encryption_Key_Size,
                                             uint8_t Max_Encryption_Key_Size,
                                             uint8_t Pairing_Response)
{
 8007b1a:	b5b0      	push	{r4, r5, r7, lr}
 8007b1c:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4605      	mov	r5, r0
 8007b24:	460c      	mov	r4, r1
 8007b26:	4610      	mov	r0, r2
 8007b28:	4619      	mov	r1, r3
 8007b2a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007b2e:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8007b32:	462a      	mov	r2, r5
 8007b34:	701a      	strb	r2, [r3, #0]
 8007b36:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007b3a:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 8007b3e:	4622      	mov	r2, r4
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007b46:	f2a3 2343 	subw	r3, r3, #579	@ 0x243
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007b52:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007b56:	460a      	mov	r2, r1
 8007b58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gap_set_security_requirements_cp0 *cp0 = (aci_gap_set_security_requirements_cp0*)(cmd_buffer);
 8007b5a:	f107 0310 	add.w	r3, r7, #16
 8007b5e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  tBleStatus status = 0;
 8007b62:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007b66:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8007b74:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007b78:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007b7c:	f2a2 2241 	subw	r2, r2, #577	@ 0x241
 8007b80:	7812      	ldrb	r2, [r2, #0]
 8007b82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b84:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007b88:	3301      	adds	r3, #1
 8007b8a:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 8007b8e:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007b92:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007b96:	f2a2 2242 	subw	r2, r2, #578	@ 0x242
 8007b9a:	7812      	ldrb	r2, [r2, #0]
 8007b9c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b9e:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->SC_Support = htob(SC_Support, 1);
 8007ba8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007bac:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007bb0:	f2a2 2243 	subw	r2, r2, #579	@ 0x243
 8007bb4:	7812      	ldrb	r2, [r2, #0]
 8007bb6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007bb8:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8007bc2:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007bc6:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007bca:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8007bce:	7812      	ldrb	r2, [r2, #0]
 8007bd0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007bd2:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8007bdc:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007be0:	f897 2258 	ldrb.w	r2, [r7, #600]	@ 0x258
 8007be4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007be6:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007bea:	3301      	adds	r3, #1
 8007bec:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8007bf0:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007bf4:	f897 225c 	ldrb.w	r2, [r7, #604]	@ 0x25c
 8007bf8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007bfa:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007bfe:	3301      	adds	r3, #1
 8007c00:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Pairing_Response = htob(Pairing_Response, 1);
 8007c04:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007c08:	f897 2260 	ldrb.w	r2, [r7, #608]	@ 0x260
 8007c0c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007c0e:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007c12:	3301      	adds	r3, #1
 8007c14:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  STM32WB_memset(&rq, 0, sizeof(rq));
 8007c18:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8007c1c:	221c      	movs	r2, #28
 8007c1e:	2100      	movs	r1, #0
 8007c20:	4618      	mov	r0, r3
 8007c22:	f006 ffbe 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 8007c26:	2301      	movs	r3, #1
 8007c28:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
  rq.ogf = 0x3f;
 8007c2c:	233f      	movs	r3, #63	@ 0x3f
 8007c2e:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
  rq.ocf = 0x086;
 8007c32:	2386      	movs	r3, #134	@ 0x86
 8007c34:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
  rq.cparam = cmd_buffer;
 8007c38:	f107 0310 	add.w	r3, r7, #16
 8007c3c:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  rq.clen = index_input;
 8007c40:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007c44:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  rq.rparam = &status;
 8007c48:	f107 030f 	add.w	r3, r7, #15
 8007c4c:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.rlen = 1;
 8007c50:	2301      	movs	r3, #1
 8007c52:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  if (hci_send_req(&rq, FALSE) < 0)
 8007c56:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f004 fa87 	bl	800c170 <hci_send_req>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	da01      	bge.n	8007c6c <aci_gap_set_security_requirements+0x152>
    return BLE_STATUS_TIMEOUT;
 8007c68:	23ff      	movs	r3, #255	@ 0xff
 8007c6a:	e00d      	b.n	8007c88 <aci_gap_set_security_requirements+0x16e>
  if (status) {
 8007c6c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007c70:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d005      	beq.n	8007c86 <aci_gap_set_security_requirements+0x16c>
    return status;
 8007c7a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007c7e:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	e000      	b.n	8007c88 <aci_gap_set_security_requirements+0x16e>
  }
  return BLE_STATUS_SUCCESS;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bdb0      	pop	{r4, r5, r7, pc}

08007c92 <aci_gap_profile_init>:
tBleStatus aci_gap_profile_init(uint8_t Role,
                                uint8_t Privacy_Type,
                                uint16_t *Dev_Name_Char_Handle,
                                uint16_t *Appearance_Char_Handle,
                                uint16_t *Periph_Pref_Conn_Param_Char_Handle)
{
 8007c92:	b590      	push	{r4, r7, lr}
 8007c94:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007ca2:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 8007ca6:	600a      	str	r2, [r1, #0]
 8007ca8:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007cac:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007cb6:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8007cba:	4622      	mov	r2, r4
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007cc2:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gap_profile_init_cp0 *cp0 = (aci_gap_profile_init_cp0*)(cmd_buffer);
 8007cca:	f107 0318 	add.w	r3, r7, #24
 8007cce:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
  aci_gap_profile_init_rp0 resp;
  STM32WB_memset(&resp, 0, sizeof(resp));
 8007cd2:	f107 0310 	add.w	r3, r7, #16
 8007cd6:	2207      	movs	r2, #7
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f006 ff61 	bl	800eba2 <memset>
  uint8_t index_input = 0;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
  cp0->Role = htob(Role, 1);
 8007ce6:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8007cea:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007cee:	f2a2 2241 	subw	r2, r2, #577	@ 0x241
 8007cf2:	7812      	ldrb	r2, [r2, #0]
 8007cf4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007cf6:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
  cp0->Privacy_Type = htob(Privacy_Type, 1);
 8007d00:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8007d04:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007d08:	f2a2 2242 	subw	r2, r2, #578	@ 0x242
 8007d0c:	7812      	ldrb	r2, [r2, #0]
 8007d0e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d10:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8007d14:	3301      	adds	r3, #1
 8007d16:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
  STM32WB_memset(&rq, 0, sizeof(rq));
 8007d1a:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8007d1e:	221c      	movs	r2, #28
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f006 ff3d 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
  rq.ogf = 0x3f;
 8007d2e:	233f      	movs	r3, #63	@ 0x3f
 8007d30:	f8a7 322e 	strh.w	r3, [r7, #558]	@ 0x22e
  rq.ocf = 0x08a;
 8007d34:	238a      	movs	r3, #138	@ 0x8a
 8007d36:	f8a7 3230 	strh.w	r3, [r7, #560]	@ 0x230
  rq.cparam = cmd_buffer;
 8007d3a:	f107 0318 	add.w	r3, r7, #24
 8007d3e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.clen = index_input;
 8007d42:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8007d46:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  rq.rparam = &resp;
 8007d4a:	f107 0310 	add.w	r3, r7, #16
 8007d4e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  rq.rlen = sizeof(resp);
 8007d52:	2307      	movs	r3, #7
 8007d54:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  if (hci_send_req(&rq, FALSE) < 0)
 8007d58:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f004 fa06 	bl	800c170 <hci_send_req>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	da01      	bge.n	8007d6e <aci_gap_profile_init+0xdc>
    return BLE_STATUS_TIMEOUT;
 8007d6a:	23ff      	movs	r3, #255	@ 0xff
 8007d6c:	e031      	b.n	8007dd2 <aci_gap_profile_init+0x140>
  if (resp.Status) {
 8007d6e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007d72:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <aci_gap_profile_init+0xf6>
    return resp.Status;
 8007d7c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007d80:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	e024      	b.n	8007dd2 <aci_gap_profile_init+0x140>
  }
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8007d88:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007d8c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8007d90:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007d9a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8007da2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007da6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8007daa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007db4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	801a      	strh	r2, [r3, #0]
  *Periph_Pref_Conn_Param_Char_Handle = btoh(resp.Periph_Pref_Conn_Param_Char_Handle, 2);
 8007dbc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007dc0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8007dc4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8007dce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd90      	pop	{r4, r7, pc}

08007ddc <aci_gap_set_security>:
tBleStatus aci_gap_set_security(uint16_t Connection_Handle,
                                uint8_t Security_Level,
                                uint8_t Force_Pairing)
{
 8007ddc:	b590      	push	{r4, r7, lr}
 8007dde:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	4604      	mov	r4, r0
 8007de6:	4608      	mov	r0, r1
 8007de8:	4611      	mov	r1, r2
 8007dea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007dee:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 8007df2:	4622      	mov	r2, r4
 8007df4:	801a      	strh	r2, [r3, #0]
 8007df6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007dfa:	f2a3 2343 	subw	r3, r3, #579	@ 0x243
 8007dfe:	4602      	mov	r2, r0
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007e06:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gap_set_security_cp0 *cp0 = (aci_gap_set_security_cp0*)(cmd_buffer);
 8007e0e:	f107 0310 	add.w	r3, r7, #16
 8007e12:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  tBleStatus status = 0;
 8007e16:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007e1a:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8007e1e:	2200      	movs	r2, #0
 8007e20:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8007e28:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007e2c:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007e30:	f2a2 2242 	subw	r2, r2, #578	@ 0x242
 8007e34:	8812      	ldrh	r2, [r2, #0]
 8007e36:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007e38:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007e3c:	3302      	adds	r3, #2
 8007e3e:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Security_Level = htob(Security_Level, 1);
 8007e42:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007e46:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007e4a:	f2a2 2243 	subw	r2, r2, #579	@ 0x243
 8007e4e:	7812      	ldrb	r2, [r2, #0]
 8007e50:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007e52:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007e56:	3301      	adds	r3, #1
 8007e58:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Force_Pairing = htob(Force_Pairing, 1);
 8007e5c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007e60:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007e64:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8007e68:	7812      	ldrb	r2, [r2, #0]
 8007e6a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007e6c:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007e70:	3301      	adds	r3, #1
 8007e72:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  STM32WB_memset(&rq, 0, sizeof(rq));
 8007e76:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8007e7a:	221c      	movs	r2, #28
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f006 fe8f 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 8007e84:	2301      	movs	r3, #1
 8007e86:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
  rq.ogf = 0x3f;
 8007e8a:	233f      	movs	r3, #63	@ 0x3f
 8007e8c:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
  rq.ocf = 0x08d;
 8007e90:	238d      	movs	r3, #141	@ 0x8d
 8007e92:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
  rq.cparam = cmd_buffer;
 8007e96:	f107 0310 	add.w	r3, r7, #16
 8007e9a:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  rq.clen = index_input;
 8007e9e:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007ea2:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  rq.rparam = &status;
 8007ea6:	f107 030f 	add.w	r3, r7, #15
 8007eaa:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.rlen = 1;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  if (hci_send_req(&rq, FALSE) < 0)
 8007eb4:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8007eb8:	2100      	movs	r1, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f004 f958 	bl	800c170 <hci_send_req>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	da01      	bge.n	8007eca <aci_gap_set_security+0xee>
    return BLE_STATUS_TIMEOUT;
 8007ec6:	23ff      	movs	r3, #255	@ 0xff
 8007ec8:	e00d      	b.n	8007ee6 <aci_gap_set_security+0x10a>
  if (status) {
 8007eca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007ece:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <aci_gap_set_security+0x108>
    return status;
 8007ed8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007edc:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	e000      	b.n	8007ee6 <aci_gap_set_security+0x10a>
  }
  return BLE_STATUS_SUCCESS;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f507 7713 	add.w	r7, r7, #588	@ 0x24c
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd90      	pop	{r4, r7, pc}

08007ef0 <aci_gap_clear_security_db>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_clear_security_db(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	70fb      	strb	r3, [r7, #3]
  STM32WB_memset(&rq, 0, sizeof(rq));
 8007efa:	1d3b      	adds	r3, r7, #4
 8007efc:	221c      	movs	r2, #28
 8007efe:	2100      	movs	r1, #0
 8007f00:	4618      	mov	r0, r3
 8007f02:	f006 fe4e 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 8007f06:	2301      	movs	r3, #1
 8007f08:	713b      	strb	r3, [r7, #4]
  rq.ogf = 0x3f;
 8007f0a:	233f      	movs	r3, #63	@ 0x3f
 8007f0c:	80fb      	strh	r3, [r7, #6]
  rq.ocf = 0x094;
 8007f0e:	2394      	movs	r3, #148	@ 0x94
 8007f10:	813b      	strh	r3, [r7, #8]
  rq.rparam = &status;
 8007f12:	1cfb      	adds	r3, r7, #3
 8007f14:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007f16:	2301      	movs	r3, #1
 8007f18:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007f1a:	1d3b      	adds	r3, r7, #4
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f004 f926 	bl	800c170 <hci_send_req>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	da01      	bge.n	8007f2e <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007f2a:	23ff      	movs	r3, #255	@ 0xff
 8007f2c:	e005      	b.n	8007f3a <aci_gap_clear_security_db+0x4a>
  if (status) {
 8007f2e:	78fb      	ldrb	r3, [r7, #3]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <aci_gap_clear_security_db+0x48>
    return status;
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	e000      	b.n	8007f3a <aci_gap_clear_security_db+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3720      	adds	r7, #32
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <aci_gap_set_advertising_configuration>:
                                                 uint8_t Primary_Advertising_PHY,
                                                 uint8_t Secondary_Advertising_Max_Skip,
                                                 uint8_t Secondary_Advertising_PHY,
                                                 uint8_t Advertising_SID,
                                                 uint8_t Scan_Request_Notification_Enable)
{
 8007f42:	b590      	push	{r4, r7, lr}
 8007f44:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	4608      	mov	r0, r1
 8007f4e:	4611      	mov	r1, r2
 8007f50:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007f54:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007f5e:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8007f62:	4622      	mov	r2, r4
 8007f64:	701a      	strb	r2, [r3, #0]
 8007f66:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007f6a:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 8007f6e:	4602      	mov	r2, r0
 8007f70:	701a      	strb	r2, [r3, #0]
 8007f72:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007f76:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007f7a:	460a      	mov	r2, r1
 8007f7c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gap_set_advertising_configuration_cp0 *cp0 = (aci_gap_set_advertising_configuration_cp0*)(cmd_buffer);
 8007f7e:	f107 0310 	add.w	r3, r7, #16
 8007f82:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  tBleStatus status = 0;
 8007f86:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8007f8a:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8007f8e:	2200      	movs	r2, #0
 8007f90:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Advertising_Handle = htob(Advertising_Handle, 1);
 8007f98:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007f9c:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007fa0:	f2a2 2241 	subw	r2, r2, #577	@ 0x241
 8007fa4:	7812      	ldrb	r2, [r2, #0]
 8007fa6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007fa8:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007fac:	3301      	adds	r3, #1
 8007fae:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Discoverable_Mode = htob(Discoverable_Mode, 1);
 8007fb2:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007fb6:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007fba:	f2a2 2242 	subw	r2, r2, #578	@ 0x242
 8007fbe:	7812      	ldrb	r2, [r2, #0]
 8007fc0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007fc2:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Advertising_Event_Properties = htob(Advertising_Event_Properties, 2);
 8007fcc:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007fd0:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007fd4:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8007fd8:	8812      	ldrh	r2, [r2, #0]
 8007fda:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007fdc:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Primary_Advertising_Interval_Min = htob(Primary_Advertising_Interval_Min, 4);
 8007fe6:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007fea:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8007fee:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8007ff2:	6812      	ldr	r2, [r2, #0]
 8007ff4:	605a      	str	r2, [r3, #4]
  index_input += 4;
 8007ff6:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Primary_Advertising_Interval_Max = htob(Primary_Advertising_Interval_Max, 4);
 8008000:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008004:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8008008:	609a      	str	r2, [r3, #8]
  index_input += 4;
 800800a:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 800800e:	3304      	adds	r3, #4
 8008010:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Primary_Advertising_Channel_Map = htob(Primary_Advertising_Channel_Map, 1);
 8008014:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008018:	f897 225c 	ldrb.w	r2, [r7, #604]	@ 0x25c
 800801c:	731a      	strb	r2, [r3, #12]
  index_input += 1;
 800801e:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008022:	3301      	adds	r3, #1
 8008024:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 8008028:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800802c:	f897 2260 	ldrb.w	r2, [r7, #608]	@ 0x260
 8008030:	735a      	strb	r2, [r3, #13]
  index_input += 1;
 8008032:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008036:	3301      	adds	r3, #1
 8008038:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  if(Peer_Address)
 800803c:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8008040:	2b00      	cmp	r3, #0
 8008042:	d008      	beq.n	8008056 <aci_gap_set_advertising_configuration+0x114>
  {
  STM32WB_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 8008044:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008048:	330e      	adds	r3, #14
 800804a:	2206      	movs	r2, #6
 800804c:	f8d7 1264 	ldr.w	r1, [r7, #612]	@ 0x264
 8008050:	4618      	mov	r0, r3
 8008052:	f006 fe22 	bl	800ec9a <memcpy>
  }
  index_input += 6;
 8008056:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 800805a:	3306      	adds	r3, #6
 800805c:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8008060:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008064:	f897 2268 	ldrb.w	r2, [r7, #616]	@ 0x268
 8008068:	751a      	strb	r2, [r3, #20]
  index_input += 1;
 800806a:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 800806e:	3301      	adds	r3, #1
 8008070:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Advertising_Tx_Power = htob(Advertising_Tx_Power, 1);
 8008074:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008078:	f897 226c 	ldrb.w	r2, [r7, #620]	@ 0x26c
 800807c:	755a      	strb	r2, [r3, #21]
  index_input += 1;
 800807e:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008082:	3301      	adds	r3, #1
 8008084:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Primary_Advertising_PHY = htob(Primary_Advertising_PHY, 1);
 8008088:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800808c:	f897 2270 	ldrb.w	r2, [r7, #624]	@ 0x270
 8008090:	759a      	strb	r2, [r3, #22]
  index_input += 1;
 8008092:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008096:	3301      	adds	r3, #1
 8008098:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Secondary_Advertising_Max_Skip = htob(Secondary_Advertising_Max_Skip, 1);
 800809c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80080a0:	f897 2274 	ldrb.w	r2, [r7, #628]	@ 0x274
 80080a4:	75da      	strb	r2, [r3, #23]
  index_input += 1;
 80080a6:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 80080aa:	3301      	adds	r3, #1
 80080ac:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Secondary_Advertising_PHY = htob(Secondary_Advertising_PHY, 1);
 80080b0:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80080b4:	f897 2278 	ldrb.w	r2, [r7, #632]	@ 0x278
 80080b8:	761a      	strb	r2, [r3, #24]
  index_input += 1;
 80080ba:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 80080be:	3301      	adds	r3, #1
 80080c0:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Advertising_SID = htob(Advertising_SID, 1);
 80080c4:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80080c8:	f897 227c 	ldrb.w	r2, [r7, #636]	@ 0x27c
 80080cc:	765a      	strb	r2, [r3, #25]
  index_input += 1;
 80080ce:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 80080d2:	3301      	adds	r3, #1
 80080d4:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Scan_Request_Notification_Enable = htob(Scan_Request_Notification_Enable, 1);
 80080d8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80080dc:	f897 2280 	ldrb.w	r2, [r7, #640]	@ 0x280
 80080e0:	769a      	strb	r2, [r3, #26]
  index_input += 1;
 80080e2:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 80080e6:	3301      	adds	r3, #1
 80080e8:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  STM32WB_memset(&rq, 0, sizeof(rq));
 80080ec:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80080f0:	221c      	movs	r2, #28
 80080f2:	2100      	movs	r1, #0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f006 fd54 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 80080fa:	2301      	movs	r3, #1
 80080fc:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
  rq.ogf = 0x3f;
 8008100:	233f      	movs	r3, #63	@ 0x3f
 8008102:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
  rq.ocf = 0x0ab;
 8008106:	23ab      	movs	r3, #171	@ 0xab
 8008108:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
  rq.cparam = cmd_buffer;
 800810c:	f107 0310 	add.w	r3, r7, #16
 8008110:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  rq.clen = index_input;
 8008114:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008118:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  rq.rparam = &status;
 800811c:	f107 030f 	add.w	r3, r7, #15
 8008120:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.rlen = 1;
 8008124:	2301      	movs	r3, #1
 8008126:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  if (hci_send_req(&rq, FALSE) < 0)
 800812a:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 800812e:	2100      	movs	r1, #0
 8008130:	4618      	mov	r0, r3
 8008132:	f004 f81d 	bl	800c170 <hci_send_req>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	da01      	bge.n	8008140 <aci_gap_set_advertising_configuration+0x1fe>
    return BLE_STATUS_TIMEOUT;
 800813c:	23ff      	movs	r3, #255	@ 0xff
 800813e:	e00d      	b.n	800815c <aci_gap_set_advertising_configuration+0x21a>
  if (status) {
 8008140:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008144:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <aci_gap_set_advertising_configuration+0x218>
    return status;
 800814e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008152:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	e000      	b.n	800815c <aci_gap_set_advertising_configuration+0x21a>
  }
  return BLE_STATUS_SUCCESS;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	f507 7713 	add.w	r7, r7, #588	@ 0x24c
 8008162:	46bd      	mov	sp, r7
 8008164:	bd90      	pop	{r4, r7, pc}

08008166 <aci_gap_set_advertising_enable>:
tBleStatus aci_gap_set_advertising_enable(uint8_t Enable,
                                          uint8_t Number_of_Sets,
                                          Advertising_Set_Parameters_t Advertising_Set_Parameters[])
{
 8008166:	b580      	push	{r7, lr}
 8008168:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 800816c:	af00      	add	r7, sp, #0
 800816e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008172:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800817c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008180:	4602      	mov	r2, r0
 8008182:	701a      	strb	r2, [r3, #0]
 8008184:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008188:	f2a3 234a 	subw	r3, r3, #586	@ 0x24a
 800818c:	460a      	mov	r2, r1
 800818e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gap_set_advertising_enable_cp0 *cp0 = (aci_gap_set_advertising_enable_cp0*)(cmd_buffer);
 8008190:	f107 0310 	add.w	r3, r7, #16
 8008194:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  tBleStatus status = 0;
 8008198:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800819c:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 80081a0:	2200      	movs	r2, #0
 80081a2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
  cp0->Enable = htob(Enable, 1);
 80081aa:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80081ae:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80081b2:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80081b6:	7812      	ldrb	r2, [r2, #0]
 80081b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80081ba:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80081be:	3301      	adds	r3, #1
 80081c0:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
  cp0->Number_of_Sets = htob(Number_of_Sets, 1);
 80081c4:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80081c8:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80081cc:	f2a2 224a 	subw	r2, r2, #586	@ 0x24a
 80081d0:	7812      	ldrb	r2, [r2, #0]
 80081d2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80081d4:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80081d8:	3301      	adds	r3, #1
 80081da:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
  /* var_len_data input */
  {
    for (int i = 0; i < Number_of_Sets; i++) {
 80081de:	2300      	movs	r3, #0
 80081e0:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 80081e4:	e04e      	b.n	8008284 <aci_gap_set_advertising_enable+0x11e>
      packed_Advertising_Set_Parameters_t *Advertising_Set_Parameters_tmp = (packed_Advertising_Set_Parameters_t *)(((uint8_t *)cmd_buffer) + index_input);
 80081e6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80081ea:	f107 0210 	add.w	r2, r7, #16
 80081ee:	4413      	add	r3, r2
 80081f0:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
      Advertising_Set_Parameters_tmp->Advertising_Handle = Advertising_Set_Parameters[i].Advertising_Handle;
 80081f4:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80081f8:	4613      	mov	r3, r2
 80081fa:	005b      	lsls	r3, r3, #1
 80081fc:	4413      	add	r3, r2
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	461a      	mov	r2, r3
 8008202:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008206:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4413      	add	r3, r2
 800820e:	781a      	ldrb	r2, [r3, #0]
 8008210:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8008214:	701a      	strb	r2, [r3, #0]
      index_input += 1;
 8008216:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800821a:	3301      	adds	r3, #1
 800821c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
      Advertising_Set_Parameters_tmp->Duration = Advertising_Set_Parameters[i].Duration;
 8008220:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8008224:	4613      	mov	r3, r2
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	4413      	add	r3, r2
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	461a      	mov	r2, r3
 800822e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008232:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4413      	add	r3, r2
 800823a:	885a      	ldrh	r2, [r3, #2]
 800823c:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8008240:	f8a3 2001 	strh.w	r2, [r3, #1]
      index_input += 2;
 8008244:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008248:	3302      	adds	r3, #2
 800824a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
      Advertising_Set_Parameters_tmp->Max_Extended_Advertising_Events = Advertising_Set_Parameters[i].Max_Extended_Advertising_Events;
 800824e:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8008252:	4613      	mov	r3, r2
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	4413      	add	r3, r2
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	461a      	mov	r2, r3
 800825c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008260:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4413      	add	r3, r2
 8008268:	791a      	ldrb	r2, [r3, #4]
 800826a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800826e:	70da      	strb	r2, [r3, #3]
      index_input += 1;
 8008270:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008274:	3301      	adds	r3, #1
 8008276:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    for (int i = 0; i < Number_of_Sets; i++) {
 800827a:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800827e:	3301      	adds	r3, #1
 8008280:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8008284:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008288:	f2a3 234a 	subw	r3, r3, #586	@ 0x24a
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8008292:	429a      	cmp	r2, r3
 8008294:	dba7      	blt.n	80081e6 <aci_gap_set_advertising_enable+0x80>
    }
  }
  STM32WB_memset(&rq, 0, sizeof(rq));
 8008296:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 800829a:	221c      	movs	r2, #28
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f006 fc7f 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 80082a4:	2301      	movs	r3, #1
 80082a6:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
  rq.ogf = 0x3f;
 80082aa:	233f      	movs	r3, #63	@ 0x3f
 80082ac:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
  rq.ocf = 0x0ac;
 80082b0:	23ac      	movs	r3, #172	@ 0xac
 80082b2:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
  rq.cparam = cmd_buffer;
 80082b6:	f107 0310 	add.w	r3, r7, #16
 80082ba:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  rq.clen = index_input;
 80082be:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80082c2:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  rq.rparam = &status;
 80082c6:	f107 030f 	add.w	r3, r7, #15
 80082ca:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.rlen = 1;
 80082ce:	2301      	movs	r3, #1
 80082d0:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  if (hci_send_req(&rq, FALSE) < 0)
 80082d4:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f003 ff48 	bl	800c170 <hci_send_req>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	da01      	bge.n	80082ea <aci_gap_set_advertising_enable+0x184>
    return BLE_STATUS_TIMEOUT;
 80082e6:	23ff      	movs	r3, #255	@ 0xff
 80082e8:	e00d      	b.n	8008306 <aci_gap_set_advertising_enable+0x1a0>
  if (status) {
 80082ea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80082ee:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <aci_gap_set_advertising_enable+0x19e>
    return status;
 80082f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80082fc:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	e000      	b.n	8008306 <aci_gap_set_advertising_enable+0x1a0>
  }
  return BLE_STATUS_SUCCESS;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <aci_gap_set_advertising_data_nwk>:
tBleStatus aci_gap_set_advertising_data_nwk(uint8_t Advertising_Handle,
                                            uint8_t Operation,
                                            uint8_t Advertising_Data_Length,
                                            uint8_t Advertising_Data[])
{
 8008310:	b590      	push	{r4, r7, lr}
 8008312:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8008316:	af00      	add	r7, sp, #0
 8008318:	4604      	mov	r4, r0
 800831a:	4608      	mov	r0, r1
 800831c:	4611      	mov	r1, r2
 800831e:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8008322:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800832c:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8008330:	4622      	mov	r2, r4
 8008332:	701a      	strb	r2, [r3, #0]
 8008334:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008338:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 800833c:	4602      	mov	r2, r0
 800833e:	701a      	strb	r2, [r3, #0]
 8008340:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008344:	f2a3 2343 	subw	r3, r3, #579	@ 0x243
 8008348:	460a      	mov	r2, r1
 800834a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gap_set_advertising_data_nwk_cp0 *cp0 = (aci_gap_set_advertising_data_nwk_cp0*)(cmd_buffer);
 800834c:	f107 0310 	add.w	r3, r7, #16
 8008350:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  tBleStatus status = 0;
 8008354:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008358:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 800835c:	2200      	movs	r2, #0
 800835e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Advertising_Handle = htob(Advertising_Handle, 1);
 8008366:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800836a:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 800836e:	f2a2 2241 	subw	r2, r2, #577	@ 0x241
 8008372:	7812      	ldrb	r2, [r2, #0]
 8008374:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008376:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 800837a:	3301      	adds	r3, #1
 800837c:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Operation = htob(Operation, 1);
 8008380:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008384:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8008388:	f2a2 2242 	subw	r2, r2, #578	@ 0x242
 800838c:	7812      	ldrb	r2, [r2, #0]
 800838e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008390:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008394:	3301      	adds	r3, #1
 8008396:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Advertising_Data_Length = htob(Advertising_Data_Length, 1);
 800839a:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800839e:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 80083a2:	f2a2 2243 	subw	r2, r2, #579	@ 0x243
 80083a6:	7812      	ldrb	r2, [r2, #0]
 80083a8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80083aa:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 80083ae:	3301      	adds	r3, #1
 80083b0:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  /* var_len_data input */
  {
    STM32WB_memcpy((void *) &cp0->Advertising_Data, (const void *) Advertising_Data, Advertising_Data_Length*sizeof(uint8_t));
 80083b4:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80083b8:	1cd8      	adds	r0, r3, #3
 80083ba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80083be:	f2a3 2343 	subw	r3, r3, #579	@ 0x243
 80083c2:	781a      	ldrb	r2, [r3, #0]
 80083c4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80083c8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80083cc:	6819      	ldr	r1, [r3, #0]
 80083ce:	f006 fc64 	bl	800ec9a <memcpy>
    index_input += Advertising_Data_Length*sizeof(uint8_t);
 80083d2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80083d6:	f2a3 2343 	subw	r3, r3, #579	@ 0x243
 80083da:	f897 2243 	ldrb.w	r2, [r7, #579]	@ 0x243
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	4413      	add	r3, r2
 80083e2:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  }
  STM32WB_memset(&rq, 0, sizeof(rq));
 80083e6:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80083ea:	221c      	movs	r2, #28
 80083ec:	2100      	movs	r1, #0
 80083ee:	4618      	mov	r0, r3
 80083f0:	f006 fbd7 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 80083f4:	2301      	movs	r3, #1
 80083f6:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
  rq.ogf = 0x3f;
 80083fa:	233f      	movs	r3, #63	@ 0x3f
 80083fc:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
  rq.ocf = 0x0ad;
 8008400:	23ad      	movs	r3, #173	@ 0xad
 8008402:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
  rq.cparam = cmd_buffer;
 8008406:	f107 0310 	add.w	r3, r7, #16
 800840a:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  rq.clen = index_input;
 800840e:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008412:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  rq.rparam = &status;
 8008416:	f107 030f 	add.w	r3, r7, #15
 800841a:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.rlen = 1;
 800841e:	2301      	movs	r3, #1
 8008420:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  if (hci_send_req(&rq, FALSE) < 0)
 8008424:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8008428:	2100      	movs	r1, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f003 fea0 	bl	800c170 <hci_send_req>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	da01      	bge.n	800843a <aci_gap_set_advertising_data_nwk+0x12a>
    return BLE_STATUS_TIMEOUT;
 8008436:	23ff      	movs	r3, #255	@ 0xff
 8008438:	e00d      	b.n	8008456 <aci_gap_set_advertising_data_nwk+0x146>
  if (status) {
 800843a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800843e:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <aci_gap_set_advertising_data_nwk+0x144>
    return status;
 8008448:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800844c:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	e000      	b.n	8008456 <aci_gap_set_advertising_data_nwk+0x146>
  }
  return BLE_STATUS_SUCCESS;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	f507 7713 	add.w	r7, r7, #588	@ 0x24c
 800845c:	46bd      	mov	sp, r7
 800845e:	bd90      	pop	{r4, r7, pc}

08008460 <aci_gatt_srv_profile_init>:
#include "stm32wb05n_gatt_aci.h"
#include "hci_tl.h"

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8008466:	af00      	add	r7, sp, #0
 8008468:	4602      	mov	r2, r0
 800846a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800846e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8008472:	6019      	str	r1, [r3, #0]
 8008474:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008478:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 800847c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gatt_srv_profile_init_cp0 *cp0 = (aci_gatt_srv_profile_init_cp0*)(cmd_buffer);
 800847e:	f107 0310 	add.w	r3, r7, #16
 8008482:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  aci_gatt_srv_profile_init_rp0 resp;
  STM32WB_memset(&resp, 0, sizeof(resp));
 8008486:	f107 030c 	add.w	r3, r7, #12
 800848a:	2203      	movs	r2, #3
 800848c:	2100      	movs	r1, #0
 800848e:	4618      	mov	r0, r3
 8008490:	f006 fb87 	bl	800eba2 <memset>
  uint8_t index_input = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Characteristics = htob(Characteristics, 1);
 800849a:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800849e:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 80084a2:	f2a2 2241 	subw	r2, r2, #577	@ 0x241
 80084a6:	7812      	ldrb	r2, [r2, #0]
 80084a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80084aa:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 80084ae:	3301      	adds	r3, #1
 80084b0:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  STM32WB_memset(&rq, 0, sizeof(rq));
 80084b4:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80084b8:	221c      	movs	r2, #28
 80084ba:	2100      	movs	r1, #0
 80084bc:	4618      	mov	r0, r3
 80084be:	f006 fb70 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 80084c2:	2301      	movs	r3, #1
 80084c4:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
  rq.ogf = 0x3f;
 80084c8:	233f      	movs	r3, #63	@ 0x3f
 80084ca:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
  rq.ocf = 0x101;
 80084ce:	f240 1301 	movw	r3, #257	@ 0x101
 80084d2:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
  rq.cparam = cmd_buffer;
 80084d6:	f107 0310 	add.w	r3, r7, #16
 80084da:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  rq.clen = index_input;
 80084de:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 80084e2:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  rq.rparam = &resp;
 80084e6:	f107 030c 	add.w	r3, r7, #12
 80084ea:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.rlen = sizeof(resp);
 80084ee:	2303      	movs	r3, #3
 80084f0:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  if (hci_send_req(&rq, FALSE) < 0)
 80084f4:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f003 fe38 	bl	800c170 <hci_send_req>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	da01      	bge.n	800850a <aci_gatt_srv_profile_init+0xaa>
    return BLE_STATUS_TIMEOUT;
 8008506:	23ff      	movs	r3, #255	@ 0xff
 8008508:	e01a      	b.n	8008540 <aci_gatt_srv_profile_init+0xe0>
  if (resp.Status) {
 800850a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800850e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d005      	beq.n	8008524 <aci_gatt_srv_profile_init+0xc4>
    return resp.Status;
 8008518:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800851c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	e00d      	b.n	8008540 <aci_gatt_srv_profile_init+0xe0>
  }
  *Service_Changed_Handle = btoh(resp.Service_Changed_Handle, 2);
 8008524:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008528:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800852c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008530:	b29a      	uxth	r2, r3
 8008532:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008536:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <aci_gatt_srv_add_service_nwk>:
tBleStatus aci_gatt_srv_add_service_nwk(uint8_t Service_UUID_Type,
                                        Service_UUID_t *Service_UUID,
                                        uint8_t Service_Type,
                                        uint8_t Max_Attribute_Records,
                                        uint16_t *Service_Handle)
{
 800854a:	b590      	push	{r4, r7, lr}
 800854c:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8008550:	af00      	add	r7, sp, #0
 8008552:	4604      	mov	r4, r0
 8008554:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8008558:	f5a0 7014 	sub.w	r0, r0, #592	@ 0x250
 800855c:	6001      	str	r1, [r0, #0]
 800855e:	4610      	mov	r0, r2
 8008560:	4619      	mov	r1, r3
 8008562:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008566:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800856a:	4622      	mov	r2, r4
 800856c:	701a      	strb	r2, [r3, #0]
 800856e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008572:	f2a3 234a 	subw	r3, r3, #586	@ 0x24a
 8008576:	4602      	mov	r2, r0
 8008578:	701a      	strb	r2, [r3, #0]
 800857a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800857e:	f2a3 234b 	subw	r3, r3, #587	@ 0x24b
 8008582:	460a      	mov	r2, r1
 8008584:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gatt_srv_add_service_nwk_cp0 *cp0 = (aci_gatt_srv_add_service_nwk_cp0*)(cmd_buffer);
 8008586:	f107 0310 	add.w	r3, r7, #16
 800858a:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
  aci_gatt_srv_add_service_nwk_cp1 *cp1 = (aci_gatt_srv_add_service_nwk_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800858e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008592:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d00a      	beq.n	80085b2 <aci_gatt_srv_add_service_nwk+0x68>
 800859c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80085a0:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d101      	bne.n	80085ae <aci_gatt_srv_add_service_nwk+0x64>
 80085aa:	2311      	movs	r3, #17
 80085ac:	e002      	b.n	80085b4 <aci_gatt_srv_add_service_nwk+0x6a>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e000      	b.n	80085b4 <aci_gatt_srv_add_service_nwk+0x6a>
 80085b2:	2303      	movs	r3, #3
 80085b4:	f107 0210 	add.w	r2, r7, #16
 80085b8:	4413      	add	r3, r2
 80085ba:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  aci_gatt_srv_add_service_nwk_rp0 resp;
  STM32WB_memset(&resp, 0, sizeof(resp));
 80085be:	f107 030c 	add.w	r3, r7, #12
 80085c2:	2203      	movs	r2, #3
 80085c4:	2100      	movs	r1, #0
 80085c6:	4618      	mov	r0, r3
 80085c8:	f006 faeb 	bl	800eba2 <memset>
  uint8_t index_input = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80085d2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80085d6:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80085da:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80085de:	7812      	ldrb	r2, [r2, #0]
 80085e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80085e2:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 80085e6:	3301      	adds	r3, #1
 80085e8:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 80085ec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80085f0:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d002      	beq.n	8008600 <aci_gatt_srv_add_service_nwk+0xb6>
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d004      	beq.n	8008608 <aci_gatt_srv_add_service_nwk+0xbe>
 80085fe:	e007      	b.n	8008610 <aci_gatt_srv_add_service_nwk+0xc6>
      case 1: size = 2; break;
 8008600:	2302      	movs	r3, #2
 8008602:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8008606:	e005      	b.n	8008614 <aci_gatt_srv_add_service_nwk+0xca>
      case 2: size = 16; break;
 8008608:	2310      	movs	r3, #16
 800860a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 800860e:	e001      	b.n	8008614 <aci_gatt_srv_add_service_nwk+0xca>
      default: return BLE_STATUS_ERROR;
 8008610:	2386      	movs	r3, #134	@ 0x86
 8008612:	e06f      	b.n	80086f4 <aci_gatt_srv_add_service_nwk+0x1aa>
    }
    STM32WB_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8008614:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8008618:	1c58      	adds	r0, r3, #1
 800861a:	f897 224f 	ldrb.w	r2, [r7, #591]	@ 0x24f
 800861e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008622:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8008626:	6819      	ldr	r1, [r3, #0]
 8008628:	f006 fb37 	bl	800ec9a <memcpy>
    index_input += size;
 800862c:	f897 2243 	ldrb.w	r2, [r7, #579]	@ 0x243
 8008630:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8008634:	4413      	add	r3, r2
 8008636:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800863a:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800863e:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8008642:	f2a2 224a 	subw	r2, r2, #586	@ 0x24a
 8008646:	7812      	ldrb	r2, [r2, #0]
 8008648:	701a      	strb	r2, [r3, #0]
      index_input += 1;
 800864a:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 800864e:	3301      	adds	r3, #1
 8008650:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
    }
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8008654:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008658:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800865c:	f2a2 224b 	subw	r2, r2, #587	@ 0x24b
 8008660:	7812      	ldrb	r2, [r2, #0]
 8008662:	705a      	strb	r2, [r3, #1]
      index_input += 1;
 8008664:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008668:	3301      	adds	r3, #1
 800866a:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
    }
  }
  STM32WB_memset(&rq, 0, sizeof(rq));
 800866e:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8008672:	221c      	movs	r2, #28
 8008674:	2100      	movs	r1, #0
 8008676:	4618      	mov	r0, r3
 8008678:	f006 fa93 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 800867c:	2301      	movs	r3, #1
 800867e:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
  rq.ogf = 0x3f;
 8008682:	233f      	movs	r3, #63	@ 0x3f
 8008684:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
  rq.ocf = 0x102;
 8008688:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800868c:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
  rq.cparam = cmd_buffer;
 8008690:	f107 0310 	add.w	r3, r7, #16
 8008694:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  rq.clen = index_input;
 8008698:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 800869c:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  rq.rparam = &resp;
 80086a0:	f107 030c 	add.w	r3, r7, #12
 80086a4:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.rlen = sizeof(resp);
 80086a8:	2303      	movs	r3, #3
 80086aa:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  if (hci_send_req(&rq, FALSE) < 0)
 80086ae:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80086b2:	2100      	movs	r1, #0
 80086b4:	4618      	mov	r0, r3
 80086b6:	f003 fd5b 	bl	800c170 <hci_send_req>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	da01      	bge.n	80086c4 <aci_gatt_srv_add_service_nwk+0x17a>
    return BLE_STATUS_TIMEOUT;
 80086c0:	23ff      	movs	r3, #255	@ 0xff
 80086c2:	e017      	b.n	80086f4 <aci_gatt_srv_add_service_nwk+0x1aa>
  if (resp.Status) {
 80086c4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80086c8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d005      	beq.n	80086de <aci_gatt_srv_add_service_nwk+0x194>
    return resp.Status;
 80086d2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80086d6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	e00a      	b.n	80086f4 <aci_gatt_srv_add_service_nwk+0x1aa>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80086de:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80086e2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80086e6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80086f0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd90      	pop	{r4, r7, pc}

080086fe <aci_gatt_srv_add_char_nwk>:
                                     uint8_t Security_Permissions,
                                     uint8_t GATT_Evt_Mask,
                                     uint8_t Enc_Key_Size,
                                     uint8_t Is_Variable,
                                     uint16_t *Char_Handle)
{
 80086fe:	b590      	push	{r4, r7, lr}
 8008700:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8008704:	af00      	add	r7, sp, #0
 8008706:	4604      	mov	r4, r0
 8008708:	4608      	mov	r0, r1
 800870a:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 800870e:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 8008712:	600a      	str	r2, [r1, #0]
 8008714:	4619      	mov	r1, r3
 8008716:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800871a:	f2a3 234a 	subw	r3, r3, #586	@ 0x24a
 800871e:	4622      	mov	r2, r4
 8008720:	801a      	strh	r2, [r3, #0]
 8008722:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8008726:	f2a3 234b 	subw	r3, r3, #587	@ 0x24b
 800872a:	4602      	mov	r2, r0
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8008732:	f2a3 2352 	subw	r3, r3, #594	@ 0x252
 8008736:	460a      	mov	r2, r1
 8008738:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gatt_srv_add_char_nwk_cp0 *cp0 = (aci_gatt_srv_add_char_nwk_cp0*)(cmd_buffer);
 800873a:	f107 0318 	add.w	r3, r7, #24
 800873e:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  aci_gatt_srv_add_char_nwk_cp1 *cp1 = (aci_gatt_srv_add_char_nwk_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008742:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8008746:	f2a3 234b 	subw	r3, r3, #587	@ 0x24b
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d00a      	beq.n	8008766 <aci_gatt_srv_add_char_nwk+0x68>
 8008750:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8008754:	f2a3 234b 	subw	r3, r3, #587	@ 0x24b
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	2b02      	cmp	r3, #2
 800875c:	d101      	bne.n	8008762 <aci_gatt_srv_add_char_nwk+0x64>
 800875e:	2313      	movs	r3, #19
 8008760:	e002      	b.n	8008768 <aci_gatt_srv_add_char_nwk+0x6a>
 8008762:	2303      	movs	r3, #3
 8008764:	e000      	b.n	8008768 <aci_gatt_srv_add_char_nwk+0x6a>
 8008766:	2305      	movs	r3, #5
 8008768:	f107 0218 	add.w	r2, r7, #24
 800876c:	4413      	add	r3, r2
 800876e:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
  aci_gatt_srv_add_char_nwk_rp0 resp;
  STM32WB_memset(&resp, 0, sizeof(resp));
 8008772:	f107 0314 	add.w	r3, r7, #20
 8008776:	2203      	movs	r2, #3
 8008778:	2100      	movs	r1, #0
 800877a:	4618      	mov	r0, r3
 800877c:	f006 fa11 	bl	800eba2 <memset>
  uint8_t index_input = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008786:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800878a:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800878e:	f2a2 224a 	subw	r2, r2, #586	@ 0x24a
 8008792:	8812      	ldrh	r2, [r2, #0]
 8008794:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008796:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 800879a:	3302      	adds	r3, #2
 800879c:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80087a0:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80087a4:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 80087a8:	f2a2 224b 	subw	r2, r2, #587	@ 0x24b
 80087ac:	7812      	ldrb	r2, [r2, #0]
 80087ae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80087b0:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 80087b4:	3301      	adds	r3, #1
 80087b6:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 80087ba:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80087be:	f2a3 234b 	subw	r3, r3, #587	@ 0x24b
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d002      	beq.n	80087ce <aci_gatt_srv_add_char_nwk+0xd0>
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d004      	beq.n	80087d6 <aci_gatt_srv_add_char_nwk+0xd8>
 80087cc:	e007      	b.n	80087de <aci_gatt_srv_add_char_nwk+0xe0>
      case 1: size = 2; break;
 80087ce:	2302      	movs	r3, #2
 80087d0:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
 80087d4:	e005      	b.n	80087e2 <aci_gatt_srv_add_char_nwk+0xe4>
      case 2: size = 16; break;
 80087d6:	2310      	movs	r3, #16
 80087d8:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
 80087dc:	e001      	b.n	80087e2 <aci_gatt_srv_add_char_nwk+0xe4>
      default: return BLE_STATUS_ERROR;
 80087de:	2386      	movs	r3, #134	@ 0x86
 80087e0:	e094      	b.n	800890c <aci_gatt_srv_add_char_nwk+0x20e>
    }
    STM32WB_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 80087e2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80087e6:	1cd8      	adds	r0, r3, #3
 80087e8:	f897 2257 	ldrb.w	r2, [r7, #599]	@ 0x257
 80087ec:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80087f0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80087f4:	6819      	ldr	r1, [r3, #0]
 80087f6:	f006 fa50 	bl	800ec9a <memcpy>
    index_input += size;
 80087fa:	f897 224b 	ldrb.w	r2, [r7, #587]	@ 0x24b
 80087fe:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8008802:	4413      	add	r3, r2
 8008804:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8008808:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800880c:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8008810:	f2a2 2252 	subw	r2, r2, #594	@ 0x252
 8008814:	8812      	ldrh	r2, [r2, #0]
 8008816:	801a      	strh	r2, [r3, #0]
      index_input += 2;
 8008818:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 800881c:	3302      	adds	r3, #2
 800881e:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
    }
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8008822:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008826:	f897 2268 	ldrb.w	r2, [r7, #616]	@ 0x268
 800882a:	709a      	strb	r2, [r3, #2]
      index_input += 1;
 800882c:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8008830:	3301      	adds	r3, #1
 8008832:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
    }
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8008836:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800883a:	f897 226c 	ldrb.w	r2, [r7, #620]	@ 0x26c
 800883e:	70da      	strb	r2, [r3, #3]
      index_input += 1;
 8008840:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8008844:	3301      	adds	r3, #1
 8008846:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
    }
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800884a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800884e:	f897 2270 	ldrb.w	r2, [r7, #624]	@ 0x270
 8008852:	711a      	strb	r2, [r3, #4]
      index_input += 1;
 8008854:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8008858:	3301      	adds	r3, #1
 800885a:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
    }
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800885e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008862:	f897 2274 	ldrb.w	r2, [r7, #628]	@ 0x274
 8008866:	715a      	strb	r2, [r3, #5]
      index_input += 1;
 8008868:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 800886c:	3301      	adds	r3, #1
 800886e:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
    }
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8008872:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008876:	f897 2278 	ldrb.w	r2, [r7, #632]	@ 0x278
 800887a:	719a      	strb	r2, [r3, #6]
      index_input += 1;
 800887c:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8008880:	3301      	adds	r3, #1
 8008882:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
    }
  }
  STM32WB_memset(&rq, 0, sizeof(rq));
 8008886:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 800888a:	221c      	movs	r2, #28
 800888c:	2100      	movs	r1, #0
 800888e:	4618      	mov	r0, r3
 8008890:	f006 f987 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 8008894:	2301      	movs	r3, #1
 8008896:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
  rq.ogf = 0x3f;
 800889a:	233f      	movs	r3, #63	@ 0x3f
 800889c:	f8a7 322e 	strh.w	r3, [r7, #558]	@ 0x22e
  rq.ocf = 0x104;
 80088a0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80088a4:	f8a7 3230 	strh.w	r3, [r7, #560]	@ 0x230
  rq.cparam = cmd_buffer;
 80088a8:	f107 0318 	add.w	r3, r7, #24
 80088ac:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.clen = index_input;
 80088b0:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 80088b4:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  rq.rparam = &resp;
 80088b8:	f107 0314 	add.w	r3, r7, #20
 80088bc:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  rq.rlen = sizeof(resp);
 80088c0:	2303      	movs	r3, #3
 80088c2:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  if (hci_send_req(&rq, FALSE) < 0)
 80088c6:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 80088ca:	2100      	movs	r1, #0
 80088cc:	4618      	mov	r0, r3
 80088ce:	f003 fc4f 	bl	800c170 <hci_send_req>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	da01      	bge.n	80088dc <aci_gatt_srv_add_char_nwk+0x1de>
    return BLE_STATUS_TIMEOUT;
 80088d8:	23ff      	movs	r3, #255	@ 0xff
 80088da:	e017      	b.n	800890c <aci_gatt_srv_add_char_nwk+0x20e>
  if (resp.Status) {
 80088dc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80088e0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <aci_gatt_srv_add_char_nwk+0x1f8>
    return resp.Status;
 80088ea:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80088ee:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	e00a      	b.n	800890c <aci_gatt_srv_add_char_nwk+0x20e>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 80088f6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80088fa:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80088fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008902:	b29a      	uxth	r2, r3
 8008904:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8008908:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8008912:	46bd      	mov	sp, r7
 8008914:	bd90      	pop	{r4, r7, pc}

08008916 <aci_gatt_srv_write_handle_value_nwk>:
}
tBleStatus aci_gatt_srv_write_handle_value_nwk(uint16_t Attr_Handle,
                                               uint16_t Val_Offset,
                                               uint16_t Value_Length,
                                               uint8_t Value[])
{
 8008916:	b590      	push	{r4, r7, lr}
 8008918:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 800891c:	af00      	add	r7, sp, #0
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	4611      	mov	r1, r2
 8008924:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8008928:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008932:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 8008936:	4622      	mov	r2, r4
 8008938:	801a      	strh	r2, [r3, #0]
 800893a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800893e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008942:	4602      	mov	r2, r0
 8008944:	801a      	strh	r2, [r3, #0]
 8008946:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800894a:	f2a3 2346 	subw	r3, r3, #582	@ 0x246
 800894e:	460a      	mov	r2, r1
 8008950:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gatt_srv_write_handle_value_nwk_cp0 *cp0 = (aci_gatt_srv_write_handle_value_nwk_cp0*)(cmd_buffer);
 8008952:	f107 0318 	add.w	r3, r7, #24
 8008956:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
  tBleStatus status = 0;
 800895a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800895e:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 800896c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008970:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8008974:	f2a2 2242 	subw	r2, r2, #578	@ 0x242
 8008978:	8812      	ldrh	r2, [r2, #0]
 800897a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800897c:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8008980:	3302      	adds	r3, #2
 8008982:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
  cp0->Val_Offset = htob(Val_Offset, 2);
 8008986:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800898a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800898e:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8008992:	8812      	ldrh	r2, [r2, #0]
 8008994:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008996:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 800899a:	3302      	adds	r3, #2
 800899c:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
  cp0->Value_Length = htob(Value_Length, 2);
 80089a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80089a4:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80089a8:	f2a2 2246 	subw	r2, r2, #582	@ 0x246
 80089ac:	8812      	ldrh	r2, [r2, #0]
 80089ae:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80089b0:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 80089b4:	3302      	adds	r3, #2
 80089b6:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
  /* var_len_data input */
  {
    STM32WB_memcpy((void *) &cp0->Value, (const void *) Value, Value_Length*sizeof(uint8_t));
 80089ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80089be:	1d98      	adds	r0, r3, #6
 80089c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80089c4:	f2a3 2346 	subw	r3, r3, #582	@ 0x246
 80089c8:	881a      	ldrh	r2, [r3, #0]
 80089ca:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80089ce:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80089d2:	6819      	ldr	r1, [r3, #0]
 80089d4:	f006 f961 	bl	800ec9a <memcpy>
    index_input += Value_Length*sizeof(uint8_t);
 80089d8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80089dc:	f2a3 2346 	subw	r3, r3, #582	@ 0x246
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 80089e8:	4413      	add	r3, r2
 80089ea:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
  }
  STM32WB_memset(&rq, 0, sizeof(rq));
 80089ee:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 80089f2:	221c      	movs	r2, #28
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f006 f8d3 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	f887 322c 	strb.w	r3, [r7, #556]	@ 0x22c
  rq.ogf = 0x3f;
 8008a02:	233f      	movs	r3, #63	@ 0x3f
 8008a04:	f8a7 322e 	strh.w	r3, [r7, #558]	@ 0x22e
  rq.ocf = 0x106;
 8008a08:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008a0c:	f8a7 3230 	strh.w	r3, [r7, #560]	@ 0x230
  rq.cparam = cmd_buffer;
 8008a10:	f107 0318 	add.w	r3, r7, #24
 8008a14:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.clen = index_input;
 8008a18:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8008a1c:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  rq.rparam = &status;
 8008a20:	f107 0317 	add.w	r3, r7, #23
 8008a24:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  rq.rlen = 1;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  if (hci_send_req(&rq, FALSE) < 0)
 8008a2e:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8008a32:	2100      	movs	r1, #0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f003 fb9b 	bl	800c170 <hci_send_req>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	da01      	bge.n	8008a44 <aci_gatt_srv_write_handle_value_nwk+0x12e>
    return BLE_STATUS_TIMEOUT;
 8008a40:	23ff      	movs	r3, #255	@ 0xff
 8008a42:	e00d      	b.n	8008a60 <aci_gatt_srv_write_handle_value_nwk+0x14a>
  if (status) {
 8008a44:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008a48:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d005      	beq.n	8008a5e <aci_gatt_srv_write_handle_value_nwk+0x148>
    return status;
 8008a52:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008a56:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	e000      	b.n	8008a60 <aci_gatt_srv_write_handle_value_nwk+0x14a>
  }
  return BLE_STATUS_SUCCESS;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd90      	pop	{r4, r7, pc}

08008a6a <aci_gatt_srv_notify>:
                               uint16_t CID,
                               uint16_t Attr_Handle,
                               uint8_t Flags,
                               uint16_t Val_Length,
                               uint8_t Val[])
{
 8008a6a:	b5b0      	push	{r4, r5, r7, lr}
 8008a6c:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	4605      	mov	r5, r0
 8008a74:	460c      	mov	r4, r1
 8008a76:	4610      	mov	r0, r2
 8008a78:	4619      	mov	r1, r3
 8008a7a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008a7e:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 8008a82:	462a      	mov	r2, r5
 8008a84:	801a      	strh	r2, [r3, #0]
 8008a86:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008a8a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008a8e:	4622      	mov	r2, r4
 8008a90:	801a      	strh	r2, [r3, #0]
 8008a92:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008a96:	f2a3 2346 	subw	r3, r3, #582	@ 0x246
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	801a      	strh	r2, [r3, #0]
 8008a9e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008aa2:	f2a3 2347 	subw	r3, r3, #583	@ 0x247
 8008aa6:	460a      	mov	r2, r1
 8008aa8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_gatt_srv_notify_cp0 *cp0 = (aci_gatt_srv_notify_cp0*)(cmd_buffer);
 8008aaa:	f107 0310 	add.w	r3, r7, #16
 8008aae:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  tBleStatus status = 0;
 8008ab2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008ab6:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008aba:	2200      	movs	r2, #0
 8008abc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8008ac4:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008ac8:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8008acc:	f2a2 2242 	subw	r2, r2, #578	@ 0x242
 8008ad0:	8812      	ldrh	r2, [r2, #0]
 8008ad2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008ad4:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008ad8:	3302      	adds	r3, #2
 8008ada:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->CID = htob(CID, 2);
 8008ade:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008ae2:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8008ae6:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8008aea:	8812      	ldrh	r2, [r2, #0]
 8008aec:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008aee:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008af2:	3302      	adds	r3, #2
 8008af4:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 8008af8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008afc:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8008b00:	f2a2 2246 	subw	r2, r2, #582	@ 0x246
 8008b04:	8812      	ldrh	r2, [r2, #0]
 8008b06:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008b08:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008b0c:	3302      	adds	r3, #2
 8008b0e:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Flags = htob(Flags, 1);
 8008b12:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008b16:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8008b1a:	f2a2 2247 	subw	r2, r2, #583	@ 0x247
 8008b1e:	7812      	ldrb	r2, [r2, #0]
 8008b20:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008b22:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008b26:	3301      	adds	r3, #1
 8008b28:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Val_Length = htob(Val_Length, 2);
 8008b2c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008b30:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 8008b34:	f8a3 2007 	strh.w	r2, [r3, #7]
  index_input += 2;
 8008b38:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008b3c:	3302      	adds	r3, #2
 8008b3e:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  /* var_len_data input */
  {
    STM32WB_memcpy((void *) &cp0->Val, (const void *) Val, Val_Length*sizeof(uint8_t));
 8008b42:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008b46:	3309      	adds	r3, #9
 8008b48:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 8008b4c:	f8d7 125c 	ldr.w	r1, [r7, #604]	@ 0x25c
 8008b50:	4618      	mov	r0, r3
 8008b52:	f006 f8a2 	bl	800ec9a <memcpy>
    index_input += Val_Length*sizeof(uint8_t);
 8008b56:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008b60:	4413      	add	r3, r2
 8008b62:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  }
  STM32WB_memset(&rq, 0, sizeof(rq));
 8008b66:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8008b6a:	221c      	movs	r2, #28
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f006 f817 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 8008b74:	2301      	movs	r3, #1
 8008b76:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
  rq.ogf = 0x3f;
 8008b7a:	233f      	movs	r3, #63	@ 0x3f
 8008b7c:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
  rq.ocf = 0x12f;
 8008b80:	f240 132f 	movw	r3, #303	@ 0x12f
 8008b84:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
  rq.cparam = cmd_buffer;
 8008b88:	f107 0310 	add.w	r3, r7, #16
 8008b8c:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  rq.clen = index_input;
 8008b90:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008b94:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  rq.rparam = &status;
 8008b98:	f107 030f 	add.w	r3, r7, #15
 8008b9c:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.rlen = 1;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  if (hci_send_req(&rq, FALSE) < 0)
 8008ba6:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8008baa:	2100      	movs	r1, #0
 8008bac:	4618      	mov	r0, r3
 8008bae:	f003 fadf 	bl	800c170 <hci_send_req>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	da01      	bge.n	8008bbc <aci_gatt_srv_notify+0x152>
    return BLE_STATUS_TIMEOUT;
 8008bb8:	23ff      	movs	r3, #255	@ 0xff
 8008bba:	e00d      	b.n	8008bd8 <aci_gatt_srv_notify+0x16e>
  if (status) {
 8008bbc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008bc0:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d005      	beq.n	8008bd6 <aci_gatt_srv_notify+0x16c>
    return status;
 8008bca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008bce:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	e000      	b.n	8008bd8 <aci_gatt_srv_notify+0x16e>
  }
  return BLE_STATUS_SUCCESS;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bdb0      	pop	{r4, r5, r7, pc}

08008be2 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008bee:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008bf8:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008c04:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 8008c08:	460a      	mov	r2, r1
 8008c0a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008c0c:	f107 0310 	add.w	r3, r7, #16
 8008c10:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  tBleStatus status = 0;
 8008c14:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008c18:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008c20:	2300      	movs	r3, #0
 8008c22:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Offset = htob(Offset, 1);
 8008c26:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008c2a:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8008c2e:	f2a2 2241 	subw	r2, r2, #577	@ 0x241
 8008c32:	7812      	ldrb	r2, [r2, #0]
 8008c34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c36:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->Length = htob(Length, 1);
 8008c40:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008c44:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8008c48:	f2a2 2242 	subw	r2, r2, #578	@ 0x242
 8008c4c:	7812      	ldrb	r2, [r2, #0]
 8008c4e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c50:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008c54:	3301      	adds	r3, #1
 8008c56:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  /* var_len_data input */
  {
    STM32WB_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8008c5a:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008c5e:	1c98      	adds	r0, r3, #2
 8008c60:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008c64:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 8008c68:	781a      	ldrb	r2, [r3, #0]
 8008c6a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008c6e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8008c72:	6819      	ldr	r1, [r3, #0]
 8008c74:	f006 f811 	bl	800ec9a <memcpy>
    index_input += Length*sizeof(uint8_t);
 8008c78:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008c7c:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 8008c80:	f897 2243 	ldrb.w	r2, [r7, #579]	@ 0x243
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	4413      	add	r3, r2
 8008c88:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  }
  STM32WB_memset(&rq, 0, sizeof(rq));
 8008c8c:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8008c90:	221c      	movs	r2, #28
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f005 ff84 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
  rq.ogf = 0x3f;
 8008ca0:	233f      	movs	r3, #63	@ 0x3f
 8008ca2:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
  rq.ocf = 0x00c;
 8008ca6:	230c      	movs	r3, #12
 8008ca8:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
  rq.cparam = cmd_buffer;
 8008cac:	f107 0310 	add.w	r3, r7, #16
 8008cb0:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  rq.clen = index_input;
 8008cb4:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008cb8:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  rq.rparam = &status;
 8008cbc:	f107 030f 	add.w	r3, r7, #15
 8008cc0:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.rlen = 1;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  if (hci_send_req(&rq, FALSE) < 0)
 8008cca:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8008cce:	2100      	movs	r1, #0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f003 fa4d 	bl	800c170 <hci_send_req>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	da01      	bge.n	8008ce0 <aci_hal_write_config_data+0xfe>
    return BLE_STATUS_TIMEOUT;
 8008cdc:	23ff      	movs	r3, #255	@ 0xff
 8008cde:	e00d      	b.n	8008cfc <aci_hal_write_config_data+0x11a>
  if (status) {
 8008ce0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008ce4:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d005      	beq.n	8008cfa <aci_hal_write_config_data+0x118>
    return status;
 8008cee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008cf2:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	e000      	b.n	8008cfc <aci_hal_write_config_data+0x11a>
  }
  return BLE_STATUS_SUCCESS;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <aci_hal_read_config_data>:
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	f5ad 7d32 	sub.w	sp, sp, #712	@ 0x2c8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8008d12:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8008d16:	6019      	str	r1, [r3, #0]
 8008d18:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8008d1c:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8008d26:	f2a3 23b9 	subw	r3, r3, #697	@ 0x2b9
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 8008d2e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8008d32:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
  aci_hal_read_config_data_rp0 resp;
  STM32WB_memset(&resp, 0, sizeof(resp));
 8008d36:	f107 0310 	add.w	r3, r7, #16
 8008d3a:	2280      	movs	r2, #128	@ 0x80
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f005 ff2f 	bl	800eba2 <memset>
  uint8_t index_input = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	f887 32c3 	strb.w	r3, [r7, #707]	@ 0x2c3
  cp0->Offset = htob(Offset, 1);
 8008d4a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8008d4e:	f507 7232 	add.w	r2, r7, #712	@ 0x2c8
 8008d52:	f2a2 22b9 	subw	r2, r2, #697	@ 0x2b9
 8008d56:	7812      	ldrb	r2, [r2, #0]
 8008d58:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d5a:	f897 32c3 	ldrb.w	r3, [r7, #707]	@ 0x2c3
 8008d5e:	3301      	adds	r3, #1
 8008d60:	f887 32c3 	strb.w	r3, [r7, #707]	@ 0x2c3
  STM32WB_memset(&rq, 0, sizeof(rq));
 8008d64:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8008d68:	221c      	movs	r2, #28
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f005 ff18 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 8008d72:	2301      	movs	r3, #1
 8008d74:	f887 32a4 	strb.w	r3, [r7, #676]	@ 0x2a4
  rq.ogf = 0x3f;
 8008d78:	233f      	movs	r3, #63	@ 0x3f
 8008d7a:	f8a7 32a6 	strh.w	r3, [r7, #678]	@ 0x2a6
  rq.ocf = 0x00d;
 8008d7e:	230d      	movs	r3, #13
 8008d80:	f8a7 32a8 	strh.w	r3, [r7, #680]	@ 0x2a8
  rq.cparam = cmd_buffer;
 8008d84:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8008d88:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
  rq.clen = index_input;
 8008d8c:	f897 32c3 	ldrb.w	r3, [r7, #707]	@ 0x2c3
 8008d90:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
  rq.rparam = &resp;
 8008d94:	f107 0310 	add.w	r3, r7, #16
 8008d98:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
  rq.rlen = sizeof(resp);
 8008d9c:	2380      	movs	r3, #128	@ 0x80
 8008d9e:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
  if (hci_send_req(&rq, FALSE) < 0)
 8008da2:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8008da6:	2100      	movs	r1, #0
 8008da8:	4618      	mov	r0, r3
 8008daa:	f003 f9e1 	bl	800c170 <hci_send_req>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	da01      	bge.n	8008db8 <aci_hal_read_config_data+0xb2>
    return BLE_STATUS_TIMEOUT;
 8008db4:	23ff      	movs	r3, #255	@ 0xff
 8008db6:	e029      	b.n	8008e0c <aci_hal_read_config_data+0x106>
  if (resp.Status) {
 8008db8:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8008dbc:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d005      	beq.n	8008dd2 <aci_hal_read_config_data+0xcc>
    return resp.Status;
 8008dc6:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8008dca:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	e01c      	b.n	8008e0c <aci_hal_read_config_data+0x106>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 8008dd2:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8008dd6:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8008dda:	785a      	ldrb	r2, [r3, #1]
 8008ddc:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8008de0:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	701a      	strb	r2, [r3, #0]
  STM32WB_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8008de8:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8008dec:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	f107 0310 	add.w	r3, r7, #16
 8008dfa:	1c99      	adds	r1, r3, #2
 8008dfc:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8008e00:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8008e04:	6818      	ldr	r0, [r3, #0]
 8008e06:	f005 ff48 	bl	800ec9a <memcpy>
  return BLE_STATUS_SUCCESS;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f507 7732 	add.w	r7, r7, #712	@ 0x2c8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4602      	mov	r2, r0
 8008e20:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008e24:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008e2e:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 8008e32:	460a      	mov	r2, r1
 8008e34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[532];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008e36:	f107 0310 	add.w	r3, r7, #16
 8008e3a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  tBleStatus status = 0;
 8008e3e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008e42:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->En_High_Power = htob(En_High_Power, 1);
 8008e50:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008e54:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8008e58:	f2a2 2241 	subw	r2, r2, #577	@ 0x241
 8008e5c:	7812      	ldrb	r2, [r2, #0]
 8008e5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e60:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008e64:	3301      	adds	r3, #1
 8008e66:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  cp0->PA_Level = htob(PA_Level, 1);
 8008e6a:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008e6e:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8008e72:	f2a2 2242 	subw	r2, r2, #578	@ 0x242
 8008e76:	7812      	ldrb	r2, [r2, #0]
 8008e78:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008e7a:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008e7e:	3301      	adds	r3, #1
 8008e80:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  STM32WB_memset(&rq, 0, sizeof(rq));
 8008e84:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8008e88:	221c      	movs	r2, #28
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f005 fe88 	bl	800eba2 <memset>
  rq.ext_aci = TRUE;
 8008e92:	2301      	movs	r3, #1
 8008e94:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
  rq.ogf = 0x3f;
 8008e98:	233f      	movs	r3, #63	@ 0x3f
 8008e9a:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
  rq.ocf = 0x00f;
 8008e9e:	230f      	movs	r3, #15
 8008ea0:	f8a7 3228 	strh.w	r3, [r7, #552]	@ 0x228
  rq.cparam = cmd_buffer;
 8008ea4:	f107 0310 	add.w	r3, r7, #16
 8008ea8:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  rq.clen = index_input;
 8008eac:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008eb0:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
  rq.rparam = &status;
 8008eb4:	f107 030f 	add.w	r3, r7, #15
 8008eb8:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  rq.rlen = 1;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  if (hci_send_req(&rq, FALSE) < 0)
 8008ec2:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f003 f951 	bl	800c170 <hci_send_req>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	da01      	bge.n	8008ed8 <aci_hal_set_tx_power_level+0xc2>
    return BLE_STATUS_TIMEOUT;
 8008ed4:	23ff      	movs	r3, #255	@ 0xff
 8008ed6:	e00d      	b.n	8008ef4 <aci_hal_set_tx_power_level+0xde>
  if (status) {
 8008ed8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008edc:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d005      	beq.n	8008ef2 <aci_hal_set_tx_power_level+0xdc>
    return status;
 8008ee6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008eea:	f2a3 2339 	subw	r3, r3, #569	@ 0x239
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	e000      	b.n	8008ef4 <aci_hal_set_tx_power_level+0xde>
  }
  return BLE_STATUS_SUCCESS;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <hci_input_event>:
* @param buff Pointer to the received data
* @param len Length of the received data
* @retval None
*/
void hci_input_event(uint8_t *buff, uint16_t len)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	807b      	strh	r3, [r7, #2]
    
  static uint16_t collected_payload_len = 0;
  static uint16_t payload_len;
  static uint16_t header_len;
  uint8_t byte;
  uint16_t i = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	82fb      	strh	r3, [r7, #22]
        
  if(state == WAITING_TYPE)
 8008f10:	4b4d      	ldr	r3, [pc, #308]	@ (8009048 <hci_input_event+0x148>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f040 8087 	bne.w	8009028 <hci_input_event+0x128>
    hci_pckt_len = 0;
 8008f1a:	4b4c      	ldr	r3, [pc, #304]	@ (800904c <hci_input_event+0x14c>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	801a      	strh	r2, [r3, #0]
    
  while(hci_pckt_len < HCI_PACKET_SIZE && i++ < len){
 8008f20:	e082      	b.n	8009028 <hci_input_event+0x128>
        
    byte = *buff++;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	757b      	strb	r3, [r7, #21]

    if(state == WAITING_TYPE)
 8008f2c:	4b46      	ldr	r3, [pc, #280]	@ (8009048 <hci_input_event+0x148>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <hci_input_event+0x3a>
      hci_pckt_len = 0;
 8008f34:	4b45      	ldr	r3, [pc, #276]	@ (800904c <hci_input_event+0x14c>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	801a      	strh	r2, [r3, #0]
    
    hci_buffer[hci_pckt_len++] = byte;        
 8008f3a:	4b44      	ldr	r3, [pc, #272]	@ (800904c <hci_input_event+0x14c>)
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	b291      	uxth	r1, r2
 8008f42:	4a42      	ldr	r2, [pc, #264]	@ (800904c <hci_input_event+0x14c>)
 8008f44:	8011      	strh	r1, [r2, #0]
 8008f46:	4619      	mov	r1, r3
 8008f48:	4a41      	ldr	r2, [pc, #260]	@ (8009050 <hci_input_event+0x150>)
 8008f4a:	7d7b      	ldrb	r3, [r7, #21]
 8008f4c:	5453      	strb	r3, [r2, r1]
        
    if(state == WAITING_TYPE){
 8008f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8009048 <hci_input_event+0x148>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d114      	bne.n	8008f80 <hci_input_event+0x80>
      /* Only events are accepted. ACL packets not used. */
      
      state = WAITING_HEADER;
 8008f56:	4b3c      	ldr	r3, [pc, #240]	@ (8009048 <hci_input_event+0x148>)
 8008f58:	2201      	movs	r2, #1
 8008f5a:	701a      	strb	r2, [r3, #0]
      
      if(byte == HCI_EVENT_PKT){
 8008f5c:	7d7b      	ldrb	r3, [r7, #21]
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d103      	bne.n	8008f6a <hci_input_event+0x6a>
        header_len = HCI_TYPE_SIZE + HCI_EVENT_HDR_SIZE;
 8008f62:	4b3c      	ldr	r3, [pc, #240]	@ (8009054 <hci_input_event+0x154>)
 8008f64:	2203      	movs	r2, #3
 8008f66:	801a      	strh	r2, [r3, #0]
 8008f68:	e05e      	b.n	8009028 <hci_input_event+0x128>
      }
      else if(byte == HCI_EVENT_EXT_PKT){
 8008f6a:	7d7b      	ldrb	r3, [r7, #21]
 8008f6c:	2b82      	cmp	r3, #130	@ 0x82
 8008f6e:	d103      	bne.n	8008f78 <hci_input_event+0x78>
        header_len = HCI_TYPE_SIZE + HCI_EVENT_EXT_HDR_SIZE;
 8008f70:	4b38      	ldr	r3, [pc, #224]	@ (8009054 <hci_input_event+0x154>)
 8008f72:	2204      	movs	r2, #4
 8008f74:	801a      	strh	r2, [r3, #0]
 8008f76:	e057      	b.n	8009028 <hci_input_event+0x128>
      }
      else {
        state = WAITING_TYPE;        
 8008f78:	4b33      	ldr	r3, [pc, #204]	@ (8009048 <hci_input_event+0x148>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	701a      	strb	r2, [r3, #0]
 8008f7e:	e053      	b.n	8009028 <hci_input_event+0x128>
      }
    }
    else if(state == WAITING_HEADER){
 8008f80:	4b31      	ldr	r3, [pc, #196]	@ (8009048 <hci_input_event+0x148>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d136      	bne.n	8008ff6 <hci_input_event+0xf6>
      
      if(hci_pckt_len == header_len){
 8008f88:	4b30      	ldr	r3, [pc, #192]	@ (800904c <hci_input_event+0x14c>)
 8008f8a:	881a      	ldrh	r2, [r3, #0]
 8008f8c:	4b31      	ldr	r3, [pc, #196]	@ (8009054 <hci_input_event+0x154>)
 8008f8e:	881b      	ldrh	r3, [r3, #0]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d149      	bne.n	8009028 <hci_input_event+0x128>
                    
        /* The entire header has been received */
        uint8_t pckt_type = hci_buffer[0];
 8008f94:	4b2e      	ldr	r3, [pc, #184]	@ (8009050 <hci_input_event+0x150>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	753b      	strb	r3, [r7, #20]
        collected_payload_len = 0;
 8008f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8009058 <hci_input_event+0x158>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	801a      	strh	r2, [r3, #0]
        payload_len = 0;
 8008fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800905c <hci_input_event+0x15c>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	801a      	strh	r2, [r3, #0]
        
        if(pckt_type == HCI_EVENT_PKT){
 8008fa6:	7d3b      	ldrb	r3, [r7, #20]
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d107      	bne.n	8008fbc <hci_input_event+0xbc>
          hci_event_hdr *hdr = (hci_event_hdr *)(hci_buffer+HCI_TYPE_SIZE);
 8008fac:	4b2c      	ldr	r3, [pc, #176]	@ (8009060 <hci_input_event+0x160>)
 8008fae:	60fb      	str	r3, [r7, #12]
          payload_len = hdr->plen;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	785b      	ldrb	r3, [r3, #1]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	4b29      	ldr	r3, [pc, #164]	@ (800905c <hci_input_event+0x15c>)
 8008fb8:	801a      	strh	r2, [r3, #0]
 8008fba:	e00a      	b.n	8008fd2 <hci_input_event+0xd2>
        }
        else if(pckt_type == HCI_EVENT_EXT_PKT){
 8008fbc:	7d3b      	ldrb	r3, [r7, #20]
 8008fbe:	2b82      	cmp	r3, #130	@ 0x82
 8008fc0:	d107      	bne.n	8008fd2 <hci_input_event+0xd2>
          hci_event_ext_hdr *hdr = (hci_event_ext_hdr *)(hci_buffer+HCI_TYPE_SIZE);
 8008fc2:	4b27      	ldr	r3, [pc, #156]	@ (8009060 <hci_input_event+0x160>)
 8008fc4:	613b      	str	r3, [r7, #16]
          payload_len = hdr->plen;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	4b23      	ldr	r3, [pc, #140]	@ (800905c <hci_input_event+0x15c>)
 8008fd0:	801a      	strh	r2, [r3, #0]
        }
        if(payload_len == 0){
 8008fd2:	4b22      	ldr	r3, [pc, #136]	@ (800905c <hci_input_event+0x15c>)
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d109      	bne.n	8008fee <hci_input_event+0xee>
          state = WAITING_TYPE;
 8008fda:	4b1b      	ldr	r3, [pc, #108]	@ (8009048 <hci_input_event+0x148>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	701a      	strb	r2, [r3, #0]
          packet_received(hci_buffer, hci_pckt_len);
 8008fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800904c <hci_input_event+0x14c>)
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	481a      	ldr	r0, [pc, #104]	@ (8009050 <hci_input_event+0x150>)
 8008fe8:	f000 f83c 	bl	8009064 <packet_received>
 8008fec:	e01c      	b.n	8009028 <hci_input_event+0x128>
        }
        else {
          state = WAITING_PAYLOAD;                      
 8008fee:	4b16      	ldr	r3, [pc, #88]	@ (8009048 <hci_input_event+0x148>)
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	701a      	strb	r2, [r3, #0]
 8008ff4:	e018      	b.n	8009028 <hci_input_event+0x128>
        }
      }      
    }
    else if(state == WAITING_PAYLOAD){
 8008ff6:	4b14      	ldr	r3, [pc, #80]	@ (8009048 <hci_input_event+0x148>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d114      	bne.n	8009028 <hci_input_event+0x128>
      collected_payload_len++;
 8008ffe:	4b16      	ldr	r3, [pc, #88]	@ (8009058 <hci_input_event+0x158>)
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	b29a      	uxth	r2, r3
 8009006:	4b14      	ldr	r3, [pc, #80]	@ (8009058 <hci_input_event+0x158>)
 8009008:	801a      	strh	r2, [r3, #0]
      if(collected_payload_len >= payload_len){
 800900a:	4b13      	ldr	r3, [pc, #76]	@ (8009058 <hci_input_event+0x158>)
 800900c:	881a      	ldrh	r2, [r3, #0]
 800900e:	4b13      	ldr	r3, [pc, #76]	@ (800905c <hci_input_event+0x15c>)
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d308      	bcc.n	8009028 <hci_input_event+0x128>
        state = WAITING_TYPE;
 8009016:	4b0c      	ldr	r3, [pc, #48]	@ (8009048 <hci_input_event+0x148>)
 8009018:	2200      	movs	r2, #0
 800901a:	701a      	strb	r2, [r3, #0]
        packet_received(hci_buffer, hci_pckt_len);
 800901c:	4b0b      	ldr	r3, [pc, #44]	@ (800904c <hci_input_event+0x14c>)
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	4619      	mov	r1, r3
 8009022:	480b      	ldr	r0, [pc, #44]	@ (8009050 <hci_input_event+0x150>)
 8009024:	f000 f81e 	bl	8009064 <packet_received>
  while(hci_pckt_len < HCI_PACKET_SIZE && i++ < len){
 8009028:	4b08      	ldr	r3, [pc, #32]	@ (800904c <hci_input_event+0x14c>)
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 8009030:	d206      	bcs.n	8009040 <hci_input_event+0x140>
 8009032:	8afb      	ldrh	r3, [r7, #22]
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	82fa      	strh	r2, [r7, #22]
 8009038:	887a      	ldrh	r2, [r7, #2]
 800903a:	429a      	cmp	r2, r3
 800903c:	f63f af71 	bhi.w	8008f22 <hci_input_event+0x22>
      }
    }
  }
}
 8009040:	bf00      	nop
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	200003f2 	.word	0x200003f2
 800904c:	200003f0 	.word	0x200003f0
 8009050:	200001dc 	.word	0x200001dc
 8009054:	200003f4 	.word	0x200003f4
 8009058:	200003f6 	.word	0x200003f6
 800905c:	200003f8 	.word	0x200003f8
 8009060:	200001dd 	.word	0x200001dd

08009064 <packet_received>:
 * @param  packet received packet
 * @param  pckt_len received packet length
 * @retval None
 */
void packet_received(uint8_t *packet, uint16_t pckt_len)
{ 
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	807b      	strh	r3, [r7, #2]
  tHciDataPacket * hciReadPacketParser = NULL;
 8009070:	2300      	movs	r3, #0
 8009072:	60fb      	str	r3, [r7, #12]

  /* enqueueing a packet for read */
  list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacketParser);
 8009074:	f107 030c 	add.w	r3, r7, #12
 8009078:	4619      	mov	r1, r3
 800907a:	4813      	ldr	r0, [pc, #76]	@ (80090c8 <packet_received+0x64>)
 800907c:	f003 fa5f 	bl	800c53e <list_remove_head>
  
  if(pckt_len > 0){
 8009080:	887b      	ldrh	r3, [r7, #2]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d01c      	beq.n	80090c0 <packet_received+0x5c>
    hciReadPacketParser->data_len = pckt_len;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	887a      	ldrh	r2, [r7, #2]
 800908a:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    STM32WB_memcpy(hciReadPacketParser->dataBuff, packet, pckt_len);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3308      	adds	r3, #8
 8009092:	887a      	ldrh	r2, [r7, #2]
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	4618      	mov	r0, r3
 8009098:	f005 fdff 	bl	800ec9a <memcpy>
      
    if(HCI_verify(hciReadPacketParser) == 0)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 f816 	bl	80090d0 <HCI_verify>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <packet_received+0x52>
      list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacketParser);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	4619      	mov	r1, r3
 80090ae:	4807      	ldr	r0, [pc, #28]	@ (80090cc <packet_received+0x68>)
 80090b0:	f003 f9fe 	bl	800c4b0 <list_insert_tail>
    else
      list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacketParser);          
  }  
}
 80090b4:	e004      	b.n	80090c0 <packet_received+0x5c>
      list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacketParser);          
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	4619      	mov	r1, r3
 80090ba:	4803      	ldr	r0, [pc, #12]	@ (80090c8 <packet_received+0x64>)
 80090bc:	f003 f9d2 	bl	800c464 <list_insert_head>
}
 80090c0:	bf00      	nop
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	200003fc 	.word	0x200003fc
 80090cc:	20000404 	.word	0x20000404

080090d0 <HCI_verify>:
*
* @param[in] hciReadPacket    The packet that is received from HCI interface.
* @return 0 if HCI packet is as expected
*/
int HCI_verify(const tHciDataPacket * hciReadPacket)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	3308      	adds	r3, #8
 80090dc:	617b      	str	r3, [r7, #20]
  uint16_t payload_len;
  
  if(hci_pckt[HCI_TYPE_OFFSET] == HCI_EVENT_PKT){
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d110      	bne.n	8009108 <HCI_verify+0x38>
    hci_event_hdr *hdr = (hci_event_hdr *)(hci_pckt+HCI_TYPE_SIZE);
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	3301      	adds	r3, #1
 80090ea:	60bb      	str	r3, [r7, #8]
    payload_len = hdr->plen;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	785b      	ldrb	r3, [r3, #1]
 80090f0:	81fb      	strh	r3, [r7, #14]
    if(payload_len != hciReadPacket->data_len - (HCI_TYPE_SIZE+HCI_EVENT_HDR_SIZE))
 80090f2:	89fa      	ldrh	r2, [r7, #14]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80090fa:	3b03      	subs	r3, #3
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d001      	beq.n	8009104 <HCI_verify+0x34>
      return 2; /* Wrong length (packet truncated or too long). */
 8009100:	2302      	movs	r3, #2
 8009102:	e01a      	b.n	800913a <HCI_verify+0x6a>
    return 0;
 8009104:	2300      	movs	r3, #0
 8009106:	e018      	b.n	800913a <HCI_verify+0x6a>
  }
  
  if(hci_pckt[HCI_TYPE_OFFSET] == HCI_EVENT_EXT_PKT){
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b82      	cmp	r3, #130	@ 0x82
 800910e:	d113      	bne.n	8009138 <HCI_verify+0x68>
    hci_event_ext_hdr *hdr = (hci_event_ext_hdr *)(hci_pckt+HCI_TYPE_SIZE);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	3301      	adds	r3, #1
 8009114:	613b      	str	r3, [r7, #16]
    payload_len = hdr->plen;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	785a      	ldrb	r2, [r3, #1]
 800911a:	789b      	ldrb	r3, [r3, #2]
 800911c:	021b      	lsls	r3, r3, #8
 800911e:	4313      	orrs	r3, r2
 8009120:	81fb      	strh	r3, [r7, #14]
    if(payload_len != hciReadPacket->data_len - (HCI_TYPE_SIZE+HCI_EVENT_EXT_HDR_SIZE))
 8009122:	89fa      	ldrh	r2, [r7, #14]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800912a:	3b04      	subs	r3, #4
 800912c:	429a      	cmp	r2, r3
 800912e:	d001      	beq.n	8009134 <HCI_verify+0x64>
      return 2; /* Wrong length (packet truncated or too long). */
 8009130:	2302      	movs	r3, #2
 8009132:	e002      	b.n	800913a <HCI_verify+0x6a>
    return 0;
 8009134:	2300      	movs	r3, #0
 8009136:	e000      	b.n	800913a <HCI_verify+0x6a>
  }
  
  return 1; /* Incorrect type. */
 8009138:	2301      	movs	r3, #1
 800913a:	4618      	mov	r0, r3
 800913c:	371c      	adds	r7, #28
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800914e:	2300      	movs	r3, #0
 8009150:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	7818      	ldrb	r0, [r3, #0]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009160:	b299      	uxth	r1, r3
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	78db      	ldrb	r3, [r3, #3]
 8009166:	461a      	mov	r2, r3
 8009168:	f004 fe8a 	bl	800de80 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800917e:	2300      	movs	r3, #0
 8009180:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	7818      	ldrb	r0, [r3, #0]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009190:	b299      	uxth	r1, r3
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	78db      	ldrb	r3, [r3, #3]
 8009196:	461a      	mov	r2, r3
 8009198:	f002 f8d3 	bl	800b342 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 800919c:	7bfb      	ldrb	r3, [r7, #15]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 80091a6:	b590      	push	{r4, r7, lr}
 80091a8:	b087      	sub	sp, #28
 80091aa:	af02      	add	r7, sp, #8
 80091ac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80091ae:	2300      	movs	r3, #0
 80091b0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	7818      	ldrb	r0, [r3, #0]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80091c0:	b299      	uxth	r1, r3
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	78da      	ldrb	r2, [r3, #3]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	889b      	ldrh	r3, [r3, #4]
 80091ca:	b29c      	uxth	r4, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	88db      	ldrh	r3, [r3, #6]
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	4623      	mov	r3, r4
 80091d6:	f002 f8c3 	bl	800b360 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 80091da:	7bfb      	ldrb	r3, [r7, #15]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd90      	pop	{r4, r7, pc}

080091e4 <hci_hardware_error_event_process>:
 *        - 0x05: TX Error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f002 f8c5 	bl	800b388 <hci_hardware_error_event>

  return status;
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b0a6      	sub	sp, #152	@ 0x98
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009210:	2300      	movs	r3, #0
 8009212:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 800921c:	2301      	movs	r3, #1
 800921e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009222:	2300      	movs	r3, #0
 8009224:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009228:	e02e      	b.n	8009288 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800922a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800922e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800923a:	b29a      	uxth	r2, r3
 800923c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	3398      	adds	r3, #152	@ 0x98
 8009244:	443b      	add	r3, r7
 8009246:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800924a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800924e:	3302      	adds	r3, #2
 8009250:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8009254:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009258:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009264:	b29a      	uxth	r2, r3
 8009266:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	3398      	adds	r3, #152	@ 0x98
 800926e:	443b      	add	r3, r7
 8009270:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8009274:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8009278:	3302      	adds	r3, #2
 800927a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800927e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009282:	3301      	adds	r3, #1
 8009284:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009288:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009294:	4293      	cmp	r3, r2
 8009296:	dbc8      	blt.n	800922a <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8009298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	f107 0208 	add.w	r2, r7, #8
 80092a2:	4611      	mov	r1, r2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f002 f87a 	bl	800b39e <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 80092aa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3798      	adds	r7, #152	@ 0x98
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f002 f873 	bl	800b3b6 <hci_data_buffer_overflow_event>

  return status;
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	781a      	ldrb	r2, [r3, #0]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	4619      	mov	r1, r3
 80092f8:	4610      	mov	r0, r2
 80092fa:	f002 f867 	bl	800b3cc <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <hci_authenticated_payload_timeout_expired_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_authenticated_payload_timeout_expired_event_process(uint8_t *buffer_in)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009310:	2300      	movs	r3, #0
 8009312:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_authenticated_payload_timeout_expired_event_rp0 *rp0 = (hci_authenticated_payload_timeout_expired_event_rp0 *)buffer_in;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	60bb      	str	r3, [r7, #8]
  hci_authenticated_payload_timeout_expired_event(rp0->Connection_Handle);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	b29b      	uxth	r3, r3
 800931e:	4618      	mov	r0, r3
 8009320:	f002 f862 	bl	800b3e8 <hci_authenticated_payload_timeout_expired_event>

  return status;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	4618      	mov	r0, r3
 8009344:	f002 f85b 	bl	800b3fe <aci_blue_initialized_event>

  return status;
 8009348:	7bfb      	ldrb	r3, [r7, #15]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8009352:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009356:	b08d      	sub	sp, #52	@ 0x34
 8009358:	af08      	add	r7, sp, #32
 800935a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800935c:	2300      	movs	r3, #0
 800935e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	f893 c000 	ldrb.w	ip, [r3]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	f8d3 9009 	ldr.w	r9, [r3, #9]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8009382:	603b      	str	r3, [r7, #0]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	f8d2 2011 	ldr.w	r2, [r2, #17]
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8009390:	68b8      	ldr	r0, [r7, #8]
 8009392:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8009396:	68bc      	ldr	r4, [r7, #8]
 8009398:	f8d4 401d 	ldr.w	r4, [r4, #29]
 800939c:	68bd      	ldr	r5, [r7, #8]
 800939e:	f8d5 5021 	ldr.w	r5, [r5, #33]	@ 0x21
 80093a2:	68be      	ldr	r6, [r7, #8]
 80093a4:	f896 6025 	ldrb.w	r6, [r6, #37]	@ 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	3326      	adds	r3, #38	@ 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 80093ac:	9307      	str	r3, [sp, #28]
 80093ae:	9606      	str	r6, [sp, #24]
 80093b0:	9505      	str	r5, [sp, #20]
 80093b2:	9404      	str	r4, [sp, #16]
 80093b4:	9003      	str	r0, [sp, #12]
 80093b6:	9102      	str	r1, [sp, #8]
 80093b8:	9201      	str	r2, [sp, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	464b      	mov	r3, r9
 80093c0:	4642      	mov	r2, r8
 80093c2:	4671      	mov	r1, lr
 80093c4:	4660      	mov	r0, ip
 80093c6:	f002 f825 	bl	800b414 <aci_blue_crash_info_event>

  return status;
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080093d6 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80093de:	2300      	movs	r3, #0
 80093e0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	7818      	ldrb	r0, [r3, #0]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	7859      	ldrb	r1, [r3, #1]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80093f4:	461a      	mov	r2, r3
 80093f6:	f002 f81b 	bl	800b430 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <aci_hal_fw_error_event_process>:
 *        condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800940c:	2300      	movs	r3, #0
 800940e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	7818      	ldrb	r0, [r3, #0]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8009420:	461a      	mov	r2, r3
 8009422:	f002 f813 	bl	800b44c <aci_hal_fw_error_event>

  return status;
 8009426:	7bfb      	ldrb	r3, [r7, #15]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <aci_hal_le_test_end_event_process>:
 * @param Number_Of_Packets The number of test packets actually transmitted.
 * @retval None
 */

tBleStatus aci_hal_le_test_end_event_process(uint8_t *buffer_in)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009438:	2300      	movs	r3, #0
 800943a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_le_test_end_event_rp0 *rp0 = (aci_hal_le_test_end_event_rp0 *)buffer_in;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	60bb      	str	r3, [r7, #8]
  aci_hal_le_test_end_event(rp0->Number_Of_Packets);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	b29b      	uxth	r3, r3
 8009446:	4618      	mov	r0, r3
 8009448:	f002 f80e 	bl	800b468 <aci_hal_le_test_end_event>

  return status;
 800944c:	7bfb      	ldrb	r3, [r7, #15]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800945e:	2300      	movs	r3, #0
 8009460:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8009462:	f002 f80c 	bl	800b47e <aci_gap_limited_discoverable_event>

  return status;
 8009466:	7bfb      	ldrb	r3, [r7, #15]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <aci_gap_pairing_complete_event_process>:
 *        - 0x0F: SM_KEY_REJECTED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	b298      	uxth	r0, r3
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	7899      	ldrb	r1, [r3, #2]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	78db      	ldrb	r3, [r3, #3]
 800948e:	461a      	mov	r2, r3
 8009490:	f004 fd3a 	bl	800df08 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <aci_gap_passkey_req_event_process>:
 *        - 0x01: PASSKEY_INPUT
 * @retval None
 */

tBleStatus aci_gap_passkey_req_event_process(uint8_t *buffer_in)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_passkey_req_event_rp0 *rp0 = (aci_gap_passkey_req_event_rp0 *)buffer_in;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	60bb      	str	r3, [r7, #8]
  aci_gap_passkey_req_event(rp0->Connection_Handle,
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	789b      	ldrb	r3, [r3, #2]
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f001 ffe6 	bl	800b48c <aci_gap_passkey_req_event>
                            rp0->Display_Input);

  return status;
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	7818      	ldrb	r0, [r3, #0]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	7859      	ldrb	r1, [r3, #1]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 80094ea:	f001 ffdd 	bl	800b4a8 <aci_gap_proc_complete_event>

  return status;
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009500:	2300      	movs	r3, #0
 8009502:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	b29b      	uxth	r3, r3
 800950e:	4618      	mov	r0, r3
 8009510:	f001 ffda 	bl	800b4c8 <aci_gap_addr_not_resolved_event>

  return status;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	b29a      	uxth	r2, r3
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800953a:	4619      	mov	r1, r3
 800953c:	4610      	mov	r0, r2
 800953e:	f001 ffce 	bl	800b4de <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8009542:	7bfb      	ldrb	r3, [r7, #15]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009554:	2300      	movs	r3, #0
 8009556:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	b29a      	uxth	r2, r3
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	789b      	ldrb	r3, [r3, #2]
 8009566:	4619      	mov	r1, r3
 8009568:	4610      	mov	r0, r2
 800956a:	f001 ffc4 	bl	800b4f6 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 800956e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <aci_gap_pairing_event_process>:
 *        - 0x01: DEVICE_BONDED
 * @retval None
 */

tBleStatus aci_gap_pairing_event_process(uint8_t *buffer_in)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_event_rp0 *rp0 = (aci_gap_pairing_event_rp0 *)buffer_in;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_event(rp0->Connection_Handle,
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	b29a      	uxth	r2, r3
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	789b      	ldrb	r3, [r3, #2]
 8009592:	4619      	mov	r1, r3
 8009594:	4610      	mov	r0, r2
 8009596:	f001 ffbc 	bl	800b512 <aci_gap_pairing_event>
                        rp0->Bonded);

  return status;
 800959a:	7bfb      	ldrb	r3, [r7, #15]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80095ac:	2300      	movs	r3, #0
 80095ae:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	885b      	ldrh	r3, [r3, #2]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	4619      	mov	r1, r3
 80095c2:	4610      	mov	r0, r2
 80095c4:	f001 ffb3 	bl	800b52e <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	b298      	uxth	r0, r3
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80095f0:	461a      	mov	r2, r3
 80095f2:	f001 ffaa 	bl	800b54a <aci_l2cap_proc_timeout_event>

  return status;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8009600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009602:	b089      	sub	sp, #36	@ 0x24
 8009604:	af04      	add	r7, sp, #16
 8009606:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	b298      	uxth	r0, r3
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	789c      	ldrb	r4, [r3, #2]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009620:	b29d      	uxth	r5, r3
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009628:	b29e      	uxth	r6, r3
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009630:	b29b      	uxth	r3, r3
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8009638:	b292      	uxth	r2, r2
 800963a:	68b9      	ldr	r1, [r7, #8]
 800963c:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8009640:	b289      	uxth	r1, r1
 8009642:	9102      	str	r1, [sp, #8]
 8009644:	9201      	str	r2, [sp, #4]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4633      	mov	r3, r6
 800964a:	462a      	mov	r2, r5
 800964c:	4621      	mov	r1, r4
 800964e:	f001 ff8a 	bl	800b566 <aci_l2cap_connection_update_req_event>
                                        rp0->Connection_Interval_Min,
                                        rp0->Connection_Interval_Max,
                                        rp0->Max_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8009652:	7bfb      	ldrb	r3, [r7, #15]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800965c <aci_l2cap_cos_disconnection_complete_event_process>:
 * @param CID The local channel endpoint that identifies the L2CAP channel.
 * @retval None
 */

tBleStatus aci_l2cap_cos_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009664:	2300      	movs	r3, #0
 8009666:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_cos_disconnection_complete_event_rp0 *rp0 = (aci_l2cap_cos_disconnection_complete_event_rp0 *)buffer_in;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	60bb      	str	r3, [r7, #8]
  aci_l2cap_cos_disconnection_complete_event(rp0->Connection_Handle,
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	881b      	ldrh	r3, [r3, #0]
 8009670:	b29a      	uxth	r2, r3
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	885b      	ldrh	r3, [r3, #2]
 8009676:	b29b      	uxth	r3, r3
 8009678:	4619      	mov	r1, r3
 800967a:	4610      	mov	r0, r2
 800967c:	f001 ff87 	bl	800b58e <aci_l2cap_cos_disconnection_complete_event>
                                             rp0->CID);

  return status;
 8009680:	7bfb      	ldrb	r3, [r7, #15]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <aci_l2cap_cos_flow_control_credit_event_process>:
 *        - 1 ... 65535
 * @retval None
 */

tBleStatus aci_l2cap_cos_flow_control_credit_event_process(uint8_t *buffer_in)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009692:	2300      	movs	r3, #0
 8009694:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_cos_flow_control_credit_event_rp0 *rp0 = (aci_l2cap_cos_flow_control_credit_event_rp0 *)buffer_in;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	60bb      	str	r3, [r7, #8]
  aci_l2cap_cos_flow_control_credit_event(rp0->Connection_Handle,
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	b298      	uxth	r0, r3
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	885b      	ldrh	r3, [r3, #2]
 80096a4:	b299      	uxth	r1, r3
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	889b      	ldrh	r3, [r3, #4]
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	88db      	ldrh	r3, [r3, #6]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	f001 ff7a 	bl	800b5aa <aci_l2cap_cos_flow_control_credit_event>
                                          rp0->CID,
                                          rp0->TX_Credits,
                                          rp0->TX_Credit_Balance);

  return status;
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <aci_l2cap_cos_sdu_data_tx_event_process>:
 *        entity can currently send to the peer.
 * @retval None
 */

tBleStatus aci_l2cap_cos_sdu_data_tx_event_process(uint8_t *buffer_in)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80096c8:	2300      	movs	r3, #0
 80096ca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_cos_sdu_data_tx_event_rp0 *rp0 = (aci_l2cap_cos_sdu_data_tx_event_rp0 *)buffer_in;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	60bb      	str	r3, [r7, #8]
  aci_l2cap_cos_sdu_data_tx_event(rp0->Connection_Handle,
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	b298      	uxth	r0, r3
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	885b      	ldrh	r3, [r3, #2]
 80096da:	b299      	uxth	r1, r3
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	889b      	ldrh	r3, [r3, #4]
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	88db      	ldrh	r3, [r3, #6]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	f001 ff73 	bl	800b5d2 <aci_l2cap_cos_sdu_data_tx_event>
                                  rp0->CID,
                                  rp0->SDU_Length,
                                  rp0->TX_Credit_Balance);

  return status;
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <aci_l2cap_cos_sdu_data_rx_nwk_event_process>:
 * @param SDU_Data
 * @retval None
 */

tBleStatus aci_l2cap_cos_sdu_data_rx_nwk_event_process(uint8_t *buffer_in)
{
 80096f6:	b590      	push	{r4, r7, lr}
 80096f8:	b087      	sub	sp, #28
 80096fa:	af02      	add	r7, sp, #8
 80096fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80096fe:	2300      	movs	r3, #0
 8009700:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_cos_sdu_data_rx_nwk_event_rp0 *rp0 = (aci_l2cap_cos_sdu_data_rx_nwk_event_rp0 *)buffer_in;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	60bb      	str	r3, [r7, #8]
  aci_l2cap_cos_sdu_data_rx_nwk_event(rp0->Connection_Handle,
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	b298      	uxth	r0, r3
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	885b      	ldrh	r3, [r3, #2]
 8009710:	b299      	uxth	r1, r3
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	889b      	ldrh	r3, [r3, #4]
 8009716:	b29a      	uxth	r2, r3
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	88db      	ldrh	r3, [r3, #6]
 800971c:	b29c      	uxth	r4, r3
                                      rp0->CID,
                                      rp0->RX_Credit_Balance,
                                      rp0->SDU_Length,
                                      rp0->SDU_Data);
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	3308      	adds	r3, #8
  aci_l2cap_cos_sdu_data_rx_nwk_event(rp0->Connection_Handle,
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	4623      	mov	r3, r4
 8009726:	f001 ff68 	bl	800b5fa <aci_l2cap_cos_sdu_data_rx_nwk_event>

  return status;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	bd90      	pop	{r4, r7, pc}

08009734 <aci_l2cap_cos_reconfiguration_event_process>:
 *        channel endpoints identifying the EATT channels to be reconfigured.
 * @retval None
 */

tBleStatus aci_l2cap_cos_reconfiguration_event_process(uint8_t *buffer_in)
{
 8009734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009736:	b0a9      	sub	sp, #164	@ 0xa4
 8009738:	af04      	add	r7, sp, #16
 800973a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800973c:	2300      	movs	r3, #0
 800973e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_l2cap_cos_reconfiguration_event_rp0 *rp0 = (aci_l2cap_cos_reconfiguration_event_rp0 *)buffer_in;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  
  uint16_t Local_CID[HCI_MAX_PAYLOAD_SIZE/sizeof(uint16_t)];
  
  STM32WB_memcpy(Local_CID, rp0->Local_CID, rp0->CID_Count * sizeof(uint16_t));
 8009748:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800974c:	f103 010b 	add.w	r1, r3, #11
 8009750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009754:	7a9b      	ldrb	r3, [r3, #10]
 8009756:	005a      	lsls	r2, r3, #1
 8009758:	f107 0308 	add.w	r3, r7, #8
 800975c:	4618      	mov	r0, r3
 800975e:	f005 fa9c 	bl	800ec9a <memcpy>
  
  aci_l2cap_cos_reconfiguration_event(rp0->Connection_Handle,
 8009762:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	b29c      	uxth	r4, r3
 800976a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800976e:	789d      	ldrb	r5, [r3, #2]
 8009770:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009774:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009778:	b29e      	uxth	r6, r3
 800977a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800977e:	f893 c005 	ldrb.w	ip, [r3, #5]
 8009782:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009786:	88db      	ldrh	r3, [r3, #6]
 8009788:	b29b      	uxth	r3, r3
 800978a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800978e:	8912      	ldrh	r2, [r2, #8]
 8009790:	b292      	uxth	r2, r2
 8009792:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8009796:	7a89      	ldrb	r1, [r1, #10]
 8009798:	f107 0008 	add.w	r0, r7, #8
 800979c:	9003      	str	r0, [sp, #12]
 800979e:	9102      	str	r1, [sp, #8]
 80097a0:	9201      	str	r2, [sp, #4]
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	4663      	mov	r3, ip
 80097a6:	4632      	mov	r2, r6
 80097a8:	4629      	mov	r1, r5
 80097aa:	4620      	mov	r0, r4
 80097ac:	f001 ff39 	bl	800b622 <aci_l2cap_cos_reconfiguration_event>
                                      rp0->Peer_MTU,
                                      rp0->Peer_MPS,
                                      rp0->CID_Count,
                                      Local_CID);

  return status;
 80097b0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3794      	adds	r7, #148	@ 0x94
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097bc <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 80097bc:	b590      	push	{r4, r7, lr}
 80097be:	b087      	sub	sp, #28
 80097c0:	af02      	add	r7, sp, #8
 80097c2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	b298      	uxth	r0, r3
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	7899      	ldrb	r1, [r3, #2]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80097dc:	b29a      	uxth	r2, r3
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	4623      	mov	r3, r4
 80097ea:	f001 ff2e 	bl	800b64a <aci_l2cap_command_reject_event>

  return status;
 80097ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd90      	pop	{r4, r7, pc}

080097f8 <aci_l2cap_cos_connection_req_event_process>:
 * @param CID_Count
 * @retval None
 */

tBleStatus aci_l2cap_cos_connection_req_event_process(uint8_t *buffer_in)
{
 80097f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097fa:	b089      	sub	sp, #36	@ 0x24
 80097fc:	af04      	add	r7, sp, #16
 80097fe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009800:	2300      	movs	r3, #0
 8009802:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_cos_connection_req_event_rp0 *rp0 = (aci_l2cap_cos_connection_req_event_rp0 *)buffer_in;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	60bb      	str	r3, [r7, #8]
  aci_l2cap_cos_connection_req_event(rp0->Connection_Handle,
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	b29c      	uxth	r4, r3
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	789d      	ldrb	r5, [r3, #2]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	78de      	ldrb	r6, [r3, #3]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	889b      	ldrh	r3, [r3, #4]
 800981a:	fa1f fc83 	uxth.w	ip, r3
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	88db      	ldrh	r3, [r3, #6]
 8009822:	b29b      	uxth	r3, r3
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	8912      	ldrh	r2, [r2, #8]
 8009828:	b292      	uxth	r2, r2
 800982a:	68b9      	ldr	r1, [r7, #8]
 800982c:	8949      	ldrh	r1, [r1, #10]
 800982e:	b289      	uxth	r1, r1
 8009830:	68b8      	ldr	r0, [r7, #8]
 8009832:	7b00      	ldrb	r0, [r0, #12]
 8009834:	9003      	str	r0, [sp, #12]
 8009836:	9102      	str	r1, [sp, #8]
 8009838:	9201      	str	r2, [sp, #4]
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	4663      	mov	r3, ip
 800983e:	4632      	mov	r2, r6
 8009840:	4629      	mov	r1, r5
 8009842:	4620      	mov	r0, r4
 8009844:	f001 ff15 	bl	800b672 <aci_l2cap_cos_connection_req_event>
                                     rp0->Peer_MTU,
                                     rp0->Peer_MPS,
                                     rp0->Initial_Credits,
                                     rp0->CID_Count);

  return status;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009852 <aci_l2cap_cos_connection_resp_event_process>:
 *        endpoints.
 * @retval None
 */

tBleStatus aci_l2cap_cos_connection_resp_event_process(uint8_t *buffer_in)
{
 8009852:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009854:	b0a9      	sub	sp, #164	@ 0xa4
 8009856:	af04      	add	r7, sp, #16
 8009858:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800985a:	2300      	movs	r3, #0
 800985c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_l2cap_cos_connection_resp_event_rp0 *rp0 = (aci_l2cap_cos_connection_resp_event_rp0 *)buffer_in;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  
  uint16_t CID[HCI_MAX_PAYLOAD_SIZE/sizeof(uint16_t)];
  STM32WB_memcpy(CID, rp0->CID, rp0->CID_Count * sizeof(uint16_t));
 8009866:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800986a:	f103 010c 	add.w	r1, r3, #12
 800986e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009872:	7adb      	ldrb	r3, [r3, #11]
 8009874:	005a      	lsls	r2, r3, #1
 8009876:	f107 0308 	add.w	r3, r7, #8
 800987a:	4618      	mov	r0, r3
 800987c:	f005 fa0d 	bl	800ec9a <memcpy>
  
  aci_l2cap_cos_connection_resp_event(rp0->Connection_Handle,
 8009880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009884:	881b      	ldrh	r3, [r3, #0]
 8009886:	b29c      	uxth	r4, r3
 8009888:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800988c:	789d      	ldrb	r5, [r3, #2]
 800988e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009892:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009896:	b29e      	uxth	r6, r3
 8009898:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800989c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80098a0:	fa1f fc83 	uxth.w	ip, r3
 80098a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098a8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80098b2:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80098b6:	b292      	uxth	r2, r2
 80098b8:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80098bc:	7ac9      	ldrb	r1, [r1, #11]
 80098be:	f107 0008 	add.w	r0, r7, #8
 80098c2:	9003      	str	r0, [sp, #12]
 80098c4:	9102      	str	r1, [sp, #8]
 80098c6:	9201      	str	r2, [sp, #4]
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	4663      	mov	r3, ip
 80098cc:	4632      	mov	r2, r6
 80098ce:	4629      	mov	r1, r5
 80098d0:	4620      	mov	r0, r4
 80098d2:	f001 fee2 	bl	800b69a <aci_l2cap_cos_connection_resp_event>
                                      rp0->Initial_Credits,
                                      rp0->Result,
                                      rp0->CID_Count,
                                      CID);

  return status;
 80098d6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3794      	adds	r7, #148	@ 0x94
 80098de:	46bd      	mov	sp, r7
 80098e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098e2 <aci_gatt_srv_attribute_modified_event_process>:
 *        attributes being notified.
 * @retval None
 */

tBleStatus aci_gatt_srv_attribute_modified_event_process(uint8_t *buffer_in)
{
 80098e2:	b590      	push	{r4, r7, lr}
 80098e4:	b087      	sub	sp, #28
 80098e6:	af02      	add	r7, sp, #8
 80098e8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_srv_attribute_modified_event_rp0 *rp0 = (aci_gatt_srv_attribute_modified_event_rp0 *)buffer_in;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	60bb      	str	r3, [r7, #8]
  aci_gatt_srv_attribute_modified_event(rp0->Connection_Handle,
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	b298      	uxth	r0, r3
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	885b      	ldrh	r3, [r3, #2]
 80098fc:	b299      	uxth	r1, r3
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	889b      	ldrh	r3, [r3, #4]
 8009902:	b29a      	uxth	r2, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	88db      	ldrh	r3, [r3, #6]
 8009908:	b29c      	uxth	r4, r3
                                        rp0->CID,
                                        rp0->Attr_Handle,
                                        rp0->Attr_Data_Length,
                                        rp0->Attr_Data);
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	3308      	adds	r3, #8
  aci_gatt_srv_attribute_modified_event(rp0->Connection_Handle,
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	4623      	mov	r3, r4
 8009912:	f004 fadf 	bl	800ded4 <aci_gatt_srv_attribute_modified_event>

  return status;
 8009916:	7bfb      	ldrb	r3, [r7, #15]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	bd90      	pop	{r4, r7, pc}

08009920 <aci_gatt_proc_timeout_event_process>:
 *        enhanced ATT bearer.
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009928:	2300      	movs	r3, #0
 800992a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle,
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	b29a      	uxth	r2, r3
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	885b      	ldrh	r3, [r3, #2]
 800993a:	b29b      	uxth	r3, r3
 800993c:	4619      	mov	r1, r3
 800993e:	4610      	mov	r0, r2
 8009940:	f001 febf 	bl	800b6c2 <aci_gatt_proc_timeout_event>
                              rp0->CID);

  return status;
 8009944:	7bfb      	ldrb	r3, [r7, #15]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <aci_att_exchange_mtu_resp_event_process>:
 *        minimum of the Client Rx MTU and the Server Rx MTU.
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	b29a      	uxth	r2, r3
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	885b      	ldrh	r3, [r3, #2]
 8009968:	b29b      	uxth	r3, r3
 800996a:	4619      	mov	r1, r3
 800996c:	4610      	mov	r0, r2
 800996e:	f001 feb6 	bl	800b6de <aci_att_exchange_mtu_resp_event>
                                  rp0->MTU);

  return status;
 8009972:	7bfb      	ldrb	r3, [r7, #15]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <aci_att_clt_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_clt_find_info_resp_event_process(uint8_t *buffer_in)
{
 800997c:	b590      	push	{r4, r7, lr}
 800997e:	b087      	sub	sp, #28
 8009980:	af02      	add	r7, sp, #8
 8009982:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009984:	2300      	movs	r3, #0
 8009986:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_clt_find_info_resp_event_rp0 *rp0 = (aci_att_clt_find_info_resp_event_rp0 *)buffer_in;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	60bb      	str	r3, [r7, #8]
  aci_att_clt_find_info_resp_event(rp0->Connection_Handle,
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	881b      	ldrh	r3, [r3, #0]
 8009990:	b298      	uxth	r0, r3
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	885b      	ldrh	r3, [r3, #2]
 8009996:	b299      	uxth	r1, r3
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	791a      	ldrb	r2, [r3, #4]
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80099a2:	b29c      	uxth	r4, r3
                                   rp0->CID,
                                   rp0->Format,
                                   rp0->Event_Data_Length,
                                   rp0->Handle_UUID_Pair);
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	3307      	adds	r3, #7
  aci_att_clt_find_info_resp_event(rp0->Connection_Handle,
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	4623      	mov	r3, r4
 80099ac:	f001 fea5 	bl	800b6fa <aci_att_clt_find_info_resp_event>

  return status;
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd90      	pop	{r4, r7, pc}

080099ba <aci_att_clt_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_clt_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b0a6      	sub	sp, #152	@ 0x98
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80099c2:	2300      	movs	r3, #0
 80099c4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_att_clt_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_clt_find_by_type_value_resp_event_rp0 *)buffer_in;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 5;
 80099ce:	2305      	movs	r3, #5
 80099d0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80099d4:	2300      	movs	r3, #0
 80099d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099da:	e02e      	b.n	8009a3a <aci_att_clt_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 80099dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80099e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	3398      	adds	r3, #152	@ 0x98
 80099f6:	443b      	add	r3, r7
 80099f8:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80099fc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8009a00:	3302      	adds	r3, #2
 8009a02:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8009a06:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009a0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	3398      	adds	r3, #152	@ 0x98
 8009a20:	443b      	add	r3, r7
 8009a22:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8009a26:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8009a2a:	3302      	adds	r3, #2
 8009a2c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8009a30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a34:	3301      	adds	r3, #1
 8009a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a3e:	791b      	ldrb	r3, [r3, #4]
 8009a40:	461a      	mov	r2, r3
 8009a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a46:	4293      	cmp	r3, r2
 8009a48:	dbc8      	blt.n	80099dc <aci_att_clt_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_clt_find_by_type_value_resp_event(rp0->Connection_Handle,
 8009a4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a4e:	881b      	ldrh	r3, [r3, #0]
 8009a50:	b298      	uxth	r0, r3
 8009a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a56:	885b      	ldrh	r3, [r3, #2]
 8009a58:	b299      	uxth	r1, r3
 8009a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a5e:	791a      	ldrb	r2, [r3, #4]
 8009a60:	f107 0308 	add.w	r3, r7, #8
 8009a64:	f001 fe5d 	bl	800b722 <aci_att_clt_find_by_type_value_resp_event>
                                            rp0->CID,
                                            rp0->Num_of_Handle_Pair,
                                            Attribute_Group_Handle_Pair);

  return status;
 8009a68:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3798      	adds	r7, #152	@ 0x98
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <aci_att_clt_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_clt_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8009a74:	b590      	push	{r4, r7, lr}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af02      	add	r7, sp, #8
 8009a7a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_clt_read_by_type_resp_event_rp0 *rp0 = (aci_att_clt_read_by_type_resp_event_rp0 *)buffer_in;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	60bb      	str	r3, [r7, #8]
  aci_att_clt_read_by_type_resp_event(rp0->Connection_Handle,
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	b298      	uxth	r0, r3
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	885b      	ldrh	r3, [r3, #2]
 8009a8e:	b299      	uxth	r1, r3
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	791a      	ldrb	r2, [r3, #4]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009a9a:	b29c      	uxth	r4, r3
                                      rp0->CID,
                                      rp0->Handle_Value_Pair_Length,
                                      rp0->Data_Length,
                                      rp0->Handle_Value_Pair_Data);
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	3307      	adds	r3, #7
  aci_att_clt_read_by_type_resp_event(rp0->Connection_Handle,
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	4623      	mov	r3, r4
 8009aa4:	f001 fe4d 	bl	800b742 <aci_att_clt_read_by_type_resp_event>

  return status;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd90      	pop	{r4, r7, pc}

08009ab2 <aci_att_clt_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_clt_read_resp_event_process(uint8_t *buffer_in)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009aba:	2300      	movs	r3, #0
 8009abc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_clt_read_resp_event_rp0 *rp0 = (aci_att_clt_read_resp_event_rp0 *)buffer_in;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	60bb      	str	r3, [r7, #8]
  aci_att_clt_read_resp_event(rp0->Connection_Handle,
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	b298      	uxth	r0, r3
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	885b      	ldrh	r3, [r3, #2]
 8009acc:	b299      	uxth	r1, r3
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	889b      	ldrh	r3, [r3, #4]
 8009ad2:	b29a      	uxth	r2, r3
                              rp0->CID,
                              rp0->Event_Data_Length,
                              rp0->Attribute_Value);
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	3306      	adds	r3, #6
  aci_att_clt_read_resp_event(rp0->Connection_Handle,
 8009ad8:	f001 fe47 	bl	800b76a <aci_att_clt_read_resp_event>

  return status;
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <aci_att_clt_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_clt_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b084      	sub	sp, #16
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009aee:	2300      	movs	r3, #0
 8009af0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_clt_read_blob_resp_event_rp0 *rp0 = (aci_att_clt_read_blob_resp_event_rp0 *)buffer_in;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	60bb      	str	r3, [r7, #8]
  aci_att_clt_read_blob_resp_event(rp0->Connection_Handle,
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	b298      	uxth	r0, r3
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	885b      	ldrh	r3, [r3, #2]
 8009b00:	b299      	uxth	r1, r3
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	889b      	ldrh	r3, [r3, #4]
 8009b06:	b29a      	uxth	r2, r3
                                   rp0->CID,
                                   rp0->Event_Data_Length,
                                   rp0->Attribute_Value);
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	3306      	adds	r3, #6
  aci_att_clt_read_blob_resp_event(rp0->Connection_Handle,
 8009b0c:	f001 fe3d 	bl	800b78a <aci_att_clt_read_blob_resp_event>

  return status;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <aci_att_clt_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_clt_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b084      	sub	sp, #16
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_clt_read_multiple_resp_event_rp0 *rp0 = (aci_att_clt_read_multiple_resp_event_rp0 *)buffer_in;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	60bb      	str	r3, [r7, #8]
  aci_att_clt_read_multiple_resp_event(rp0->Connection_Handle,
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	b298      	uxth	r0, r3
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	885b      	ldrh	r3, [r3, #2]
 8009b34:	b299      	uxth	r1, r3
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	889b      	ldrh	r3, [r3, #4]
 8009b3a:	b29a      	uxth	r2, r3
                                       rp0->CID,
                                       rp0->Event_Data_Length,
                                       rp0->Set_Of_Values);
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	3306      	adds	r3, #6
  aci_att_clt_read_multiple_resp_event(rp0->Connection_Handle,
 8009b40:	f001 fe33 	bl	800b7aa <aci_att_clt_read_multiple_resp_event>

  return status;
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <aci_att_clt_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_clt_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8009b4e:	b590      	push	{r4, r7, lr}
 8009b50:	b087      	sub	sp, #28
 8009b52:	af02      	add	r7, sp, #8
 8009b54:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b56:	2300      	movs	r3, #0
 8009b58:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_clt_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_clt_read_by_group_type_resp_event_rp0 *)buffer_in;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	60bb      	str	r3, [r7, #8]
  aci_att_clt_read_by_group_type_resp_event(rp0->Connection_Handle,
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	b298      	uxth	r0, r3
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	885b      	ldrh	r3, [r3, #2]
 8009b68:	b299      	uxth	r1, r3
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	791a      	ldrb	r2, [r3, #4]
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009b74:	b29c      	uxth	r4, r3
                                            rp0->CID,
                                            rp0->Attribute_Data_Length,
                                            rp0->Data_Length,
                                            rp0->Attribute_Data_List);
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	3307      	adds	r3, #7
  aci_att_clt_read_by_group_type_resp_event(rp0->Connection_Handle,
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	4623      	mov	r3, r4
 8009b7e:	f001 fe24 	bl	800b7ca <aci_att_clt_read_by_group_type_resp_event>

  return status;
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd90      	pop	{r4, r7, pc}

08009b8c <aci_att_clt_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_clt_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8009b8c:	b5b0      	push	{r4, r5, r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af02      	add	r7, sp, #8
 8009b92:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b94:	2300      	movs	r3, #0
 8009b96:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_clt_prepare_write_resp_event_rp0 *rp0 = (aci_att_clt_prepare_write_resp_event_rp0 *)buffer_in;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	60bb      	str	r3, [r7, #8]
  aci_att_clt_prepare_write_resp_event(rp0->Connection_Handle,
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	b298      	uxth	r0, r3
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	885b      	ldrh	r3, [r3, #2]
 8009ba6:	b299      	uxth	r1, r3
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	889b      	ldrh	r3, [r3, #4]
 8009bac:	b29c      	uxth	r4, r3
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	88db      	ldrh	r3, [r3, #6]
 8009bb2:	b29d      	uxth	r5, r3
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	891b      	ldrh	r3, [r3, #8]
 8009bb8:	b29b      	uxth	r3, r3
                                       rp0->CID,
                                       rp0->Attribute_Handle,
                                       rp0->Offset,
                                       rp0->Part_Attribute_Value_Length,
                                       rp0->Part_Attribute_Value);
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	320a      	adds	r2, #10
  aci_att_clt_prepare_write_resp_event(rp0->Connection_Handle,
 8009bbe:	9201      	str	r2, [sp, #4]
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	462b      	mov	r3, r5
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	f001 fe14 	bl	800b7f2 <aci_att_clt_prepare_write_resp_event>

  return status;
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bdb0      	pop	{r4, r5, r7, pc}

08009bd4 <aci_att_clt_exec_write_resp_event_process>:
 *        enhanced ATT bearer.
 * @retval None
 */

tBleStatus aci_att_clt_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_clt_exec_write_resp_event_rp0 *rp0 = (aci_att_clt_exec_write_resp_event_rp0 *)buffer_in;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	60bb      	str	r3, [r7, #8]
  aci_att_clt_exec_write_resp_event(rp0->Connection_Handle,
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	885b      	ldrh	r3, [r3, #2]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	4610      	mov	r0, r2
 8009bf4:	f001 fe11 	bl	800b81a <aci_att_clt_exec_write_resp_event>
                                    rp0->CID);

  return status;
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <aci_gatt_clt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_clt_indication_event_process(uint8_t *buffer_in)
{
 8009c02:	b590      	push	{r4, r7, lr}
 8009c04:	b087      	sub	sp, #28
 8009c06:	af02      	add	r7, sp, #8
 8009c08:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_clt_indication_event_rp0 *rp0 = (aci_gatt_clt_indication_event_rp0 *)buffer_in;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60bb      	str	r3, [r7, #8]
  aci_gatt_clt_indication_event(rp0->Connection_Handle,
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	b298      	uxth	r0, r3
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	885b      	ldrh	r3, [r3, #2]
 8009c1c:	b299      	uxth	r1, r3
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	889b      	ldrh	r3, [r3, #4]
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	88db      	ldrh	r3, [r3, #6]
 8009c28:	b29c      	uxth	r4, r3
                                rp0->CID,
                                rp0->Attribute_Handle,
                                rp0->Attribute_Value_Length,
                                rp0->Attribute_Value);
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	3308      	adds	r3, #8
  aci_gatt_clt_indication_event(rp0->Connection_Handle,
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	4623      	mov	r3, r4
 8009c32:	f001 fe00 	bl	800b836 <aci_gatt_clt_indication_event>

  return status;
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd90      	pop	{r4, r7, pc}

08009c40 <aci_gatt_clt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_clt_notification_event_process(uint8_t *buffer_in)
{
 8009c40:	b590      	push	{r4, r7, lr}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af02      	add	r7, sp, #8
 8009c46:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_clt_notification_event_rp0 *rp0 = (aci_gatt_clt_notification_event_rp0 *)buffer_in;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	60bb      	str	r3, [r7, #8]
  aci_gatt_clt_notification_event(rp0->Connection_Handle,
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	b298      	uxth	r0, r3
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	885b      	ldrh	r3, [r3, #2]
 8009c5a:	b299      	uxth	r1, r3
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	889b      	ldrh	r3, [r3, #4]
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	88db      	ldrh	r3, [r3, #6]
 8009c66:	b29c      	uxth	r4, r3
                                  rp0->CID,
                                  rp0->Attribute_Handle,
                                  rp0->Attribute_Value_Length,
                                  rp0->Attribute_Value);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	3308      	adds	r3, #8
  aci_gatt_clt_notification_event(rp0->Connection_Handle,
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	4623      	mov	r3, r4
 8009c70:	f001 fdf5 	bl	800b85e <aci_gatt_clt_notification_event>

  return status;
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd90      	pop	{r4, r7, pc}

08009c7e <aci_gatt_clt_proc_complete_event_process>:
 *        2, part D. For proprietary error code refer to Error codes section.
 * @retval None
 */

tBleStatus aci_gatt_clt_proc_complete_event_process(uint8_t *buffer_in)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b084      	sub	sp, #16
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_clt_proc_complete_event_rp0 *rp0 = (aci_gatt_clt_proc_complete_event_rp0 *)buffer_in;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	60bb      	str	r3, [r7, #8]
  aci_gatt_clt_proc_complete_event(rp0->Connection_Handle,
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	881b      	ldrh	r3, [r3, #0]
 8009c92:	b298      	uxth	r0, r3
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	885b      	ldrh	r3, [r3, #2]
 8009c98:	b299      	uxth	r1, r3
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	791b      	ldrb	r3, [r3, #4]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f001 fdf1 	bl	800b886 <aci_gatt_clt_proc_complete_event>
                                   rp0->CID,
                                   rp0->Error_Code);

  return status;
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <aci_gatt_clt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_clt_error_resp_event_process(uint8_t *buffer_in)
{
 8009cae:	b590      	push	{r4, r7, lr}
 8009cb0:	b087      	sub	sp, #28
 8009cb2:	af02      	add	r7, sp, #8
 8009cb4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_clt_error_resp_event_rp0 *rp0 = (aci_gatt_clt_error_resp_event_rp0 *)buffer_in;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	60bb      	str	r3, [r7, #8]
  aci_gatt_clt_error_resp_event(rp0->Connection_Handle,
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	b298      	uxth	r0, r3
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	885b      	ldrh	r3, [r3, #2]
 8009cc8:	b299      	uxth	r1, r3
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	791a      	ldrb	r2, [r3, #4]
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009cd4:	b29c      	uxth	r4, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	79db      	ldrb	r3, [r3, #7]
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	4623      	mov	r3, r4
 8009cde:	f001 fde1 	bl	800b8a4 <aci_gatt_clt_error_resp_event>
                                rp0->CID,
                                rp0->Req_Opcode,
                                rp0->Attribute_Handle,
                                rp0->Error_Code);

  return status;
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd90      	pop	{r4, r7, pc}

08009cec <aci_gatt_clt_disc_read_char_by_uuid_resp_event_process>:
 *        Characteristic UUID" has been performed.
 * @retval None
 */

tBleStatus aci_gatt_clt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8009cec:	b590      	push	{r4, r7, lr}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af02      	add	r7, sp, #8
 8009cf2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_clt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_clt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	60bb      	str	r3, [r7, #8]
  aci_gatt_clt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b298      	uxth	r0, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	885b      	ldrh	r3, [r3, #2]
 8009d06:	b299      	uxth	r1, r3
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	889b      	ldrh	r3, [r3, #4]
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	799c      	ldrb	r4, [r3, #6]
                                                 rp0->CID,
                                                 rp0->Attribute_Handle,
                                                 rp0->Attribute_Value_Length,
                                                 rp0->Attribute_Value);
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	3307      	adds	r3, #7
  aci_gatt_clt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	4623      	mov	r3, r4
 8009d1a:	f001 fdd7 	bl	800b8cc <aci_gatt_clt_disc_read_char_by_uuid_resp_event>

  return status;
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd90      	pop	{r4, r7, pc}

08009d28 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	885b      	ldrh	r3, [r3, #2]
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	4619      	mov	r1, r3
 8009d46:	4610      	mov	r0, r2
 8009d48:	f001 fdd4 	bl	800b8f4 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <aci_gatt_srv_confirmation_event_process>:
 *        enhanced ATT bearer.
 * @retval None
 */

tBleStatus aci_gatt_srv_confirmation_event_process(uint8_t *buffer_in)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_srv_confirmation_event_rp0 *rp0 = (aci_gatt_srv_confirmation_event_rp0 *)buffer_in;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	60bb      	str	r3, [r7, #8]
  aci_gatt_srv_confirmation_event(rp0->Connection_Handle,
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	881b      	ldrh	r3, [r3, #0]
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	885b      	ldrh	r3, [r3, #2]
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	4619      	mov	r1, r3
 8009d74:	4610      	mov	r0, r2
 8009d76:	f001 fdcb 	bl	800b910 <aci_gatt_srv_confirmation_event>
                                  rp0->CID);

  return status;
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <aci_att_srv_exec_write_req_event_process>:
 *        - 0x01: EXECUTE
 * @retval None
 */

tBleStatus aci_att_srv_exec_write_req_event_process(uint8_t *buffer_in)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_srv_exec_write_req_event_rp0 *rp0 = (aci_att_srv_exec_write_req_event_rp0 *)buffer_in;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	60bb      	str	r3, [r7, #8]
  aci_att_srv_exec_write_req_event(rp0->Connection_Handle,
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	b298      	uxth	r0, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	885b      	ldrh	r3, [r3, #2]
 8009d9e:	b299      	uxth	r1, r3
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	791b      	ldrb	r3, [r3, #4]
 8009da4:	461a      	mov	r2, r3
 8009da6:	f001 fdc1 	bl	800b92c <aci_att_srv_exec_write_req_event>
                                   rp0->CID,
                                   rp0->Flags);

  return status;
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <aci_gatt_srv_authorize_nwk_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_srv_authorize_nwk_event_process(uint8_t *buffer_in)
{
 8009db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009db6:	b089      	sub	sp, #36	@ 0x24
 8009db8:	af04      	add	r7, sp, #16
 8009dba:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_srv_authorize_nwk_event_rp0 *rp0 = (aci_gatt_srv_authorize_nwk_event_rp0 *)buffer_in;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	60bb      	str	r3, [r7, #8]
  aci_gatt_srv_authorize_nwk_event(rp0->Conn_Handle,
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	b298      	uxth	r0, r3
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	885b      	ldrh	r3, [r3, #2]
 8009dce:	b29c      	uxth	r4, r3
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	889b      	ldrh	r3, [r3, #4]
 8009dd4:	b29d      	uxth	r5, r3
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	799e      	ldrb	r6, [r3, #6]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	7a52      	ldrb	r2, [r2, #9]
                                   rp0->CID,
                                   rp0->Attr_Handle,
                                   rp0->Operation_Type,
                                   rp0->Attr_Val_Offset,
                                   rp0->Data_Length,
                                   rp0->Data);
 8009de6:	68b9      	ldr	r1, [r7, #8]
 8009de8:	310a      	adds	r1, #10
  aci_gatt_srv_authorize_nwk_event(rp0->Conn_Handle,
 8009dea:	9102      	str	r1, [sp, #8]
 8009dec:	9201      	str	r2, [sp, #4]
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	4633      	mov	r3, r6
 8009df2:	462a      	mov	r2, r5
 8009df4:	4621      	mov	r1, r4
 8009df6:	f001 fda8 	bl	800b94a <aci_gatt_srv_authorize_nwk_event>

  return status;
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e04 <aci_att_clt_read_multiple_var_len_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_clt_read_multiple_var_len_resp_event_process(uint8_t *buffer_in)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_clt_read_multiple_var_len_resp_event_rp0 *rp0 = (aci_att_clt_read_multiple_var_len_resp_event_rp0 *)buffer_in;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	60bb      	str	r3, [r7, #8]
  aci_att_clt_read_multiple_var_len_resp_event(rp0->Connection_Handle,
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	881b      	ldrh	r3, [r3, #0]
 8009e18:	b298      	uxth	r0, r3
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	885b      	ldrh	r3, [r3, #2]
 8009e1e:	b299      	uxth	r1, r3
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	889b      	ldrh	r3, [r3, #4]
 8009e24:	b29a      	uxth	r2, r3
                                               rp0->CID,
                                               rp0->Event_Data_Length,
                                               rp0->Set_Of_Values);
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	3306      	adds	r3, #6
  aci_att_clt_read_multiple_var_len_resp_event(rp0->Connection_Handle,
 8009e2a:	f001 fda2 	bl	800b972 <aci_att_clt_read_multiple_var_len_resp_event>

  return status;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8009e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e3a:	b08b      	sub	sp, #44	@ 0x2c
 8009e3c:	af06      	add	r7, sp, #24
 8009e3e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	781d      	ldrb	r5, [r3, #0]
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e52:	b29e      	uxth	r6, r3
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	f893 c003 	ldrb.w	ip, [r3, #3]
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8009e6a:	b292      	uxth	r2, r2
 8009e6c:	68b9      	ldr	r1, [r7, #8]
 8009e6e:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8009e72:	b289      	uxth	r1, r1
 8009e74:	68b8      	ldr	r0, [r7, #8]
 8009e76:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8009e7a:	b280      	uxth	r0, r0
 8009e7c:	68bc      	ldr	r4, [r7, #8]
 8009e7e:	7c64      	ldrb	r4, [r4, #17]
 8009e80:	9404      	str	r4, [sp, #16]
 8009e82:	9003      	str	r0, [sp, #12]
 8009e84:	9102      	str	r1, [sp, #8]
 8009e86:	9201      	str	r2, [sp, #4]
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	4673      	mov	r3, lr
 8009e8c:	4662      	mov	r2, ip
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4628      	mov	r0, r5
 8009e92:	f003 ffcb 	bl	800de2c <hci_le_connection_complete_event>
                                   rp0->Connection_Interval,
                                   rp0->Peripheral_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Central_Clock_Accuracy);

  return status;
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ea0 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b0a4      	sub	sp, #144	@ 0x90
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint8_t size = 1;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ec0:	e0b3      	b.n	800a02a <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8009ec2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8009ec6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009eca:	4613      	mov	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	4413      	add	r3, r2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	7819      	ldrb	r1, [r3, #0]
 8009eda:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009ede:	4613      	mov	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	3390      	adds	r3, #144	@ 0x90
 8009ee8:	443b      	add	r3, r7
 8009eea:	3b88      	subs	r3, #136	@ 0x88
 8009eec:	460a      	mov	r2, r1
 8009eee:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009ef0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8009efa:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8009efe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f02:	4613      	mov	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	4413      	add	r3, r2
 8009f0c:	440b      	add	r3, r1
 8009f0e:	3302      	adds	r3, #2
 8009f10:	7819      	ldrb	r1, [r3, #0]
 8009f12:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f16:	4613      	mov	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	3390      	adds	r3, #144	@ 0x90
 8009f20:	443b      	add	r3, r7
 8009f22:	3b87      	subs	r3, #135	@ 0x87
 8009f24:	460a      	mov	r2, r1
 8009f26:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009f28:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    STM32WB_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8009f32:	f107 0108 	add.w	r1, r7, #8
 8009f36:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	440b      	add	r3, r1
 8009f44:	1c98      	adds	r0, r3, #2
 8009f46:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	4413      	add	r3, r2
 8009f54:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f58:	4413      	add	r3, r2
 8009f5a:	3303      	adds	r3, #3
 8009f5c:	2206      	movs	r2, #6
 8009f5e:	4619      	mov	r1, r3
 8009f60:	f004 fe9b 	bl	800ec9a <memcpy>
    size += 6;
 8009f64:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009f68:	3306      	adds	r3, #6
 8009f6a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Data_Length = rp0->Advertising_Report[i].Data_Length;
 8009f6e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8009f72:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f76:	4613      	mov	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	4413      	add	r3, r2
 8009f80:	440b      	add	r3, r1
 8009f82:	3309      	adds	r3, #9
 8009f84:	7819      	ldrb	r1, [r3, #0]
 8009f86:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	3390      	adds	r3, #144	@ 0x90
 8009f94:	443b      	add	r3, r7
 8009f96:	3b80      	subs	r3, #128	@ 0x80
 8009f98:	460a      	mov	r2, r1
 8009f9a:	701a      	strb	r2, [r3, #0]
    size += 1;
 8009f9c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8009fa6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	4413      	add	r3, r2
 8009fb4:	3308      	adds	r3, #8
 8009fb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009fba:	4413      	add	r3, r2
 8009fbc:	1c99      	adds	r1, r3, #2
 8009fbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	3390      	adds	r3, #144	@ 0x90
 8009fcc:	443b      	add	r3, r7
 8009fce:	3b7c      	subs	r3, #124	@ 0x7c
 8009fd0:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Data_Length;
 8009fd2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8009fd6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009fda:	4613      	mov	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	4413      	add	r3, r2
 8009fe4:	440b      	add	r3, r1
 8009fe6:	3309      	adds	r3, #9
 8009fe8:	781a      	ldrb	r2, [r3, #0]
 8009fea:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009fee:	4413      	add	r3, r2
 8009ff0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8009ff4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	b259      	sxtb	r1, r3
 800a000:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a004:	4613      	mov	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	3390      	adds	r3, #144	@ 0x90
 800a00e:	443b      	add	r3, r7
 800a010:	3b78      	subs	r3, #120	@ 0x78
 800a012:	460a      	mov	r2, r1
 800a014:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a016:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a01a:	3301      	adds	r3, #1
 800a01c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a020:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a024:	3301      	adds	r3, #1
 800a026:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a02a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	461a      	mov	r2, r3
 800a032:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a036:	4293      	cmp	r3, r2
 800a038:	f6ff af43 	blt.w	8009ec2 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800a03c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	f107 0208 	add.w	r2, r7, #8
 800a046:	4611      	mov	r1, r2
 800a048:	4618      	mov	r0, r3
 800a04a:	f001 fca2 	bl	800b992 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800a04e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800a052:	4618      	mov	r0, r3
 800a054:	3790      	adds	r7, #144	@ 0x90
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800a05a:	b590      	push	{r4, r7, lr}
 800a05c:	b087      	sub	sp, #28
 800a05e:	af02      	add	r7, sp, #8
 800a060:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a062:	2300      	movs	r3, #0
 800a064:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	7818      	ldrb	r0, [r3, #0]
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a074:	b299      	uxth	r1, r3
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a084:	b29c      	uxth	r4, r3
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	4623      	mov	r3, r4
 800a092:	f001 fc8a 	bl	800b9aa <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Connection_Interval,
                                          rp0->Peripheral_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800a096:	7bfb      	ldrb	r3, [r7, #15]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3714      	adds	r7, #20
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd90      	pop	{r4, r7, pc}

0800a0a0 <hci_le_read_remote_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_features_complete_event_process(uint8_t *buffer_in)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_features_complete_event_rp0 *rp0 = (hci_le_read_remote_features_complete_event_rp0 *)buffer_in;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_features_complete_event(rp0->Status,
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	7818      	ldrb	r0, [r3, #0]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a0ba:	b299      	uxth	r1, r3
                                             rp0->Connection_Handle,
                                             rp0->LE_Features);
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	3303      	adds	r3, #3
  hci_le_read_remote_features_complete_event(rp0->Status,
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	f001 fc86 	bl	800b9d2 <hci_le_read_remote_features_complete_event>

  return status;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	895b      	ldrh	r3, [r3, #10]
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	f001 fc7c 	bl	800b9ee <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800a100:	b590      	push	{r4, r7, lr}
 800a102:	b087      	sub	sp, #28
 800a104:	af02      	add	r7, sp, #8
 800a106:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a108:	2300      	movs	r3, #0
 800a10a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	b298      	uxth	r0, r3
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	885b      	ldrh	r3, [r3, #2]
 800a11a:	b299      	uxth	r1, r3
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	889b      	ldrh	r3, [r3, #4]
 800a120:	b29a      	uxth	r2, r3
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	88db      	ldrh	r3, [r3, #6]
 800a126:	b29c      	uxth	r4, r3
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	891b      	ldrh	r3, [r3, #8]
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	4623      	mov	r3, r4
 800a132:	f001 fc6a 	bl	800ba0a <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800a136:	7bfb      	ldrb	r3, [r7, #15]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3714      	adds	r7, #20
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd90      	pop	{r4, r7, pc}

0800a140 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a158:	4619      	mov	r1, r3
 800a15a:	4610      	mov	r0, r2
 800a15c:	f001 fc69 	bl	800ba32 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800a160:	7bfb      	ldrb	r3, [r7, #15]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a182:	4619      	mov	r1, r3
 800a184:	4610      	mov	r0, r2
 800a186:	f001 fc60 	bl	800ba4a <hci_le_generate_dhkey_complete_event>

  return status;
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800a194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a198:	b08d      	sub	sp, #52	@ 0x34
 800a19a:	af08      	add	r7, sp, #32
 800a19c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	f893 c000 	ldrb.w	ip, [r3]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a1b2:	fa1f fe83 	uxth.w	lr, r3
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f893 8003 	ldrb.w	r8, [r3, #3]
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800a1ca:	68b9      	ldr	r1, [r7, #8]
 800a1cc:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a1ce:	68b8      	ldr	r0, [r7, #8]
 800a1d0:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 800a1d4:	b280      	uxth	r0, r0
 800a1d6:	68bc      	ldr	r4, [r7, #8]
 800a1d8:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800a1dc:	b2a4      	uxth	r4, r4
 800a1de:	68bd      	ldr	r5, [r7, #8]
 800a1e0:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 800a1e4:	b2ad      	uxth	r5, r5
 800a1e6:	68be      	ldr	r6, [r7, #8]
 800a1e8:	7f76      	ldrb	r6, [r6, #29]
 800a1ea:	9606      	str	r6, [sp, #24]
 800a1ec:	9505      	str	r5, [sp, #20]
 800a1ee:	9404      	str	r4, [sp, #16]
 800a1f0:	9003      	str	r0, [sp, #12]
 800a1f2:	9102      	str	r1, [sp, #8]
 800a1f4:	9201      	str	r2, [sp, #4]
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	464b      	mov	r3, r9
 800a1fa:	4642      	mov	r2, r8
 800a1fc:	4671      	mov	r1, lr
 800a1fe:	4660      	mov	r0, ip
 800a200:	f003 fdee 	bl	800dde0 <hci_le_enhanced_connection_complete_event>
                                            rp0->Connection_Interval,
                                            rp0->Peripheral_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Central_Clock_Accuracy);

  return status;
 800a204:	7bfb      	ldrb	r3, [r7, #15]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a210 <hci_le_directed_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_directed_advertising_report_event_process(uint8_t *buffer_in)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b0a6      	sub	sp, #152	@ 0x98
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a218:	2300      	movs	r3, #0
 800a21a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_le_directed_advertising_report_event_rp0 *rp0 = (hci_le_directed_advertising_report_event_rp0 *)buffer_in;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 800a224:	2301      	movs	r3, #1
 800a226:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a22a:	2300      	movs	r3, #0
 800a22c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a230:	e085      	b.n	800a33e <hci_le_directed_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800a232:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a236:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a23a:	011b      	lsls	r3, r3, #4
 800a23c:	4413      	add	r3, r2
 800a23e:	3301      	adds	r3, #1
 800a240:	781a      	ldrb	r2, [r3, #0]
 800a242:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a246:	011b      	lsls	r3, r3, #4
 800a248:	3398      	adds	r3, #152	@ 0x98
 800a24a:	443b      	add	r3, r7
 800a24c:	3b90      	subs	r3, #144	@ 0x90
 800a24e:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a250:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a254:	3301      	adds	r3, #1
 800a256:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800a25a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a25e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	4413      	add	r3, r2
 800a266:	3302      	adds	r3, #2
 800a268:	781a      	ldrb	r2, [r3, #0]
 800a26a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a26e:	011b      	lsls	r3, r3, #4
 800a270:	3398      	adds	r3, #152	@ 0x98
 800a272:	443b      	add	r3, r7
 800a274:	3b8f      	subs	r3, #143	@ 0x8f
 800a276:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a278:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a27c:	3301      	adds	r3, #1
 800a27e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    STM32WB_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800a282:	f107 0208 	add.w	r2, r7, #8
 800a286:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a28a:	011b      	lsls	r3, r3, #4
 800a28c:	4413      	add	r3, r2
 800a28e:	1c98      	adds	r0, r3, #2
 800a290:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a294:	011b      	lsls	r3, r3, #4
 800a296:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a29a:	4413      	add	r3, r2
 800a29c:	3303      	adds	r3, #3
 800a29e:	2206      	movs	r2, #6
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	f004 fcfa 	bl	800ec9a <memcpy>
    size += 6;
 800a2a6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a2aa:	3306      	adds	r3, #6
 800a2ac:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800a2b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a2b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2b8:	011b      	lsls	r3, r3, #4
 800a2ba:	4413      	add	r3, r2
 800a2bc:	3309      	adds	r3, #9
 800a2be:	781a      	ldrb	r2, [r3, #0]
 800a2c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2c4:	011b      	lsls	r3, r3, #4
 800a2c6:	3398      	adds	r3, #152	@ 0x98
 800a2c8:	443b      	add	r3, r7
 800a2ca:	3b88      	subs	r3, #136	@ 0x88
 800a2cc:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a2ce:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    STM32WB_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800a2d8:	f107 0208 	add.w	r2, r7, #8
 800a2dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2e0:	011b      	lsls	r3, r3, #4
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	4413      	add	r3, r2
 800a2e6:	1c58      	adds	r0, r3, #1
 800a2e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2ec:	011b      	lsls	r3, r3, #4
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a2f4:	4413      	add	r3, r2
 800a2f6:	3302      	adds	r3, #2
 800a2f8:	2206      	movs	r2, #6
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	f004 fccd 	bl	800ec9a <memcpy>
    size += 6;
 800a300:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a304:	3306      	adds	r3, #6
 800a306:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800a30a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a30e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a312:	011b      	lsls	r3, r3, #4
 800a314:	4413      	add	r3, r2
 800a316:	3310      	adds	r3, #16
 800a318:	f993 2000 	ldrsb.w	r2, [r3]
 800a31c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a320:	011b      	lsls	r3, r3, #4
 800a322:	3398      	adds	r3, #152	@ 0x98
 800a324:	443b      	add	r3, r7
 800a326:	3b81      	subs	r3, #129	@ 0x81
 800a328:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a32a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a32e:	3301      	adds	r3, #1
 800a330:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a334:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a338:	3301      	adds	r3, #1
 800a33a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a33e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
 800a346:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a34a:	4293      	cmp	r3, r2
 800a34c:	f6ff af71 	blt.w	800a232 <hci_le_directed_advertising_report_event_process+0x22>
  }
  hci_le_directed_advertising_report_event(rp0->Num_Reports,
 800a350:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	f107 0208 	add.w	r2, r7, #8
 800a35a:	4611      	mov	r1, r2
 800a35c:	4618      	mov	r0, r3
 800a35e:	f001 fb80 	bl	800ba62 <hci_le_directed_advertising_report_event>
                                           Direct_Advertising_Report);

  return status;
 800a362:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800a366:	4618      	mov	r0, r3
 800a368:	3798      	adds	r7, #152	@ 0x98
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <hci_le_phy_update_complete_event_process>:
 *        - 0x03: The receiver PHY for the connection is LE Coded
 * @retval None
 */

tBleStatus hci_le_phy_update_complete_event_process(uint8_t *buffer_in)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b084      	sub	sp, #16
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a376:	2300      	movs	r3, #0
 800a378:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_phy_update_complete_event_rp0 *rp0 = (hci_le_phy_update_complete_event_rp0 *)buffer_in;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	60bb      	str	r3, [r7, #8]
  hci_le_phy_update_complete_event(rp0->Status,
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	7818      	ldrb	r0, [r3, #0]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a388:	b299      	uxth	r1, r3
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	78da      	ldrb	r2, [r3, #3]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	791b      	ldrb	r3, [r3, #4]
 800a392:	f001 fb72 	bl	800ba7a <hci_le_phy_update_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->TX_PHY,
                                   rp0->RX_PHY);

  return status;
 800a396:	7bfb      	ldrb	r3, [r7, #15]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <hci_le_extended_advertising_report_event_process>:
 * @param Extended_Advertising_Report See @ref Extended_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_extended_advertising_report_event_process(uint8_t *buffer_in)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b0a2      	sub	sp, #136	@ 0x88
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  /* Input params */
  hci_le_extended_advertising_report_event_rp0 *rp0 = (hci_le_extended_advertising_report_event_rp0 *)buffer_in;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	67bb      	str	r3, [r7, #120]	@ 0x78
  uint8_t size = 1;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  int i;
  Extended_Advertising_Report_t Extended_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Extended_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3be:	e178      	b.n	800a6b2 <hci_le_extended_advertising_report_event_process+0x312>
    Extended_Advertising_Report[i].Event_Type = rp0->Extended_Advertising_Report[i].Event_Type;
 800a3c0:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a3c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	4413      	add	r3, r2
 800a3cc:	009a      	lsls	r2, r3, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	440b      	add	r3, r1
 800a3d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a3d6:	b299      	uxth	r1, r3
 800a3d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a3dc:	4613      	mov	r3, r2
 800a3de:	00db      	lsls	r3, r3, #3
 800a3e0:	1a9b      	subs	r3, r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	3388      	adds	r3, #136	@ 0x88
 800a3e6:	443b      	add	r3, r7
 800a3e8:	3b80      	subs	r3, #128	@ 0x80
 800a3ea:	460a      	mov	r2, r1
 800a3ec:	801a      	strh	r2, [r3, #0]
    size += 2;
 800a3ee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a3f2:	3302      	adds	r3, #2
 800a3f4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    Extended_Advertising_Report[i].Address_Type = rp0->Extended_Advertising_Report[i].Address_Type;
 800a3f8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a3fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a3fe:	4613      	mov	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	4413      	add	r3, r2
 800a404:	009a      	lsls	r2, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	440b      	add	r3, r1
 800a40a:	3303      	adds	r3, #3
 800a40c:	7819      	ldrb	r1, [r3, #0]
 800a40e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a412:	4613      	mov	r3, r2
 800a414:	00db      	lsls	r3, r3, #3
 800a416:	1a9b      	subs	r3, r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	3388      	adds	r3, #136	@ 0x88
 800a41c:	443b      	add	r3, r7
 800a41e:	3b7e      	subs	r3, #126	@ 0x7e
 800a420:	460a      	mov	r2, r1
 800a422:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a424:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a428:	3301      	adds	r3, #1
 800a42a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    STM32WB_memcpy((void *) Extended_Advertising_Report[i].Address, (const void *) rp0->Extended_Advertising_Report[i].Address, 6);
 800a42e:	f107 0108 	add.w	r1, r7, #8
 800a432:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a436:	4613      	mov	r3, r2
 800a438:	00db      	lsls	r3, r3, #3
 800a43a:	1a9b      	subs	r3, r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	440b      	add	r3, r1
 800a440:	1cd8      	adds	r0, r3, #3
 800a442:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a446:	4613      	mov	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	009a      	lsls	r2, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a452:	4413      	add	r3, r2
 800a454:	3304      	adds	r3, #4
 800a456:	2206      	movs	r2, #6
 800a458:	4619      	mov	r1, r3
 800a45a:	f004 fc1e 	bl	800ec9a <memcpy>
    size += 6;
 800a45e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a462:	3306      	adds	r3, #6
 800a464:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    Extended_Advertising_Report[i].Primary_PHY = rp0->Extended_Advertising_Report[i].Primary_PHY;
 800a468:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a46a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a46e:	4613      	mov	r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	4413      	add	r3, r2
 800a474:	009a      	lsls	r2, r3, #2
 800a476:	4413      	add	r3, r2
 800a478:	440b      	add	r3, r1
 800a47a:	330a      	adds	r3, #10
 800a47c:	7819      	ldrb	r1, [r3, #0]
 800a47e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a482:	4613      	mov	r3, r2
 800a484:	00db      	lsls	r3, r3, #3
 800a486:	1a9b      	subs	r3, r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	3388      	adds	r3, #136	@ 0x88
 800a48c:	443b      	add	r3, r7
 800a48e:	3b77      	subs	r3, #119	@ 0x77
 800a490:	460a      	mov	r2, r1
 800a492:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a494:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a498:	3301      	adds	r3, #1
 800a49a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    Extended_Advertising_Report[i].Secondary_PHY = rp0->Extended_Advertising_Report[i].Secondary_PHY;
 800a49e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a4a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	009a      	lsls	r2, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	440b      	add	r3, r1
 800a4b0:	330b      	adds	r3, #11
 800a4b2:	7819      	ldrb	r1, [r3, #0]
 800a4b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	1a9b      	subs	r3, r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	3388      	adds	r3, #136	@ 0x88
 800a4c2:	443b      	add	r3, r7
 800a4c4:	3b76      	subs	r3, #118	@ 0x76
 800a4c6:	460a      	mov	r2, r1
 800a4c8:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a4ca:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    Extended_Advertising_Report[i].Advertising_SID = rp0->Extended_Advertising_Report[i].Advertising_SID;
 800a4d4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a4d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a4da:	4613      	mov	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4413      	add	r3, r2
 800a4e0:	009a      	lsls	r2, r3, #2
 800a4e2:	4413      	add	r3, r2
 800a4e4:	440b      	add	r3, r1
 800a4e6:	330c      	adds	r3, #12
 800a4e8:	7819      	ldrb	r1, [r3, #0]
 800a4ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	00db      	lsls	r3, r3, #3
 800a4f2:	1a9b      	subs	r3, r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	3388      	adds	r3, #136	@ 0x88
 800a4f8:	443b      	add	r3, r7
 800a4fa:	3b75      	subs	r3, #117	@ 0x75
 800a4fc:	460a      	mov	r2, r1
 800a4fe:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a500:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a504:	3301      	adds	r3, #1
 800a506:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    Extended_Advertising_Report[i].TX_Power = rp0->Extended_Advertising_Report[i].TX_Power;
 800a50a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a50c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	009a      	lsls	r2, r3, #2
 800a518:	4413      	add	r3, r2
 800a51a:	440b      	add	r3, r1
 800a51c:	330d      	adds	r3, #13
 800a51e:	f993 1000 	ldrsb.w	r1, [r3]
 800a522:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a526:	4613      	mov	r3, r2
 800a528:	00db      	lsls	r3, r3, #3
 800a52a:	1a9b      	subs	r3, r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	3388      	adds	r3, #136	@ 0x88
 800a530:	443b      	add	r3, r7
 800a532:	3b74      	subs	r3, #116	@ 0x74
 800a534:	460a      	mov	r2, r1
 800a536:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a538:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a53c:	3301      	adds	r3, #1
 800a53e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    Extended_Advertising_Report[i].RSSI = rp0->Extended_Advertising_Report[i].RSSI;
 800a542:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a544:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	009a      	lsls	r2, r3, #2
 800a550:	4413      	add	r3, r2
 800a552:	440b      	add	r3, r1
 800a554:	330e      	adds	r3, #14
 800a556:	f993 1000 	ldrsb.w	r1, [r3]
 800a55a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a55e:	4613      	mov	r3, r2
 800a560:	00db      	lsls	r3, r3, #3
 800a562:	1a9b      	subs	r3, r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	3388      	adds	r3, #136	@ 0x88
 800a568:	443b      	add	r3, r7
 800a56a:	3b73      	subs	r3, #115	@ 0x73
 800a56c:	460a      	mov	r2, r1
 800a56e:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a570:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a574:	3301      	adds	r3, #1
 800a576:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    Extended_Advertising_Report[i].Periodic_Advertising_Interval = rp0->Extended_Advertising_Report[i].Periodic_Advertising_Interval;
 800a57a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a57c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a580:	4613      	mov	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4413      	add	r3, r2
 800a586:	009a      	lsls	r2, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	440b      	add	r3, r1
 800a58c:	3308      	adds	r3, #8
 800a58e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a592:	b299      	uxth	r1, r3
 800a594:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a598:	4613      	mov	r3, r2
 800a59a:	00db      	lsls	r3, r3, #3
 800a59c:	1a9b      	subs	r3, r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	3388      	adds	r3, #136	@ 0x88
 800a5a2:	443b      	add	r3, r7
 800a5a4:	3b72      	subs	r3, #114	@ 0x72
 800a5a6:	460a      	mov	r2, r1
 800a5a8:	801a      	strh	r2, [r3, #0]
    size += 2;
 800a5aa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a5ae:	3302      	adds	r3, #2
 800a5b0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    Extended_Advertising_Report[i].Direct_Address_Type = rp0->Extended_Advertising_Report[i].Direct_Address_Type;
 800a5b4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a5b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4413      	add	r3, r2
 800a5c0:	009a      	lsls	r2, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	440b      	add	r3, r1
 800a5c6:	3311      	adds	r3, #17
 800a5c8:	7819      	ldrb	r1, [r3, #0]
 800a5ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	00db      	lsls	r3, r3, #3
 800a5d2:	1a9b      	subs	r3, r3, r2
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	3388      	adds	r3, #136	@ 0x88
 800a5d8:	443b      	add	r3, r7
 800a5da:	3b70      	subs	r3, #112	@ 0x70
 800a5dc:	460a      	mov	r2, r1
 800a5de:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a5e0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    STM32WB_memcpy((void *) Extended_Advertising_Report[i].Direct_Address, (const void *) rp0->Extended_Advertising_Report[i].Direct_Address, 6);
 800a5ea:	f107 0108 	add.w	r1, r7, #8
 800a5ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	00db      	lsls	r3, r3, #3
 800a5f6:	1a9b      	subs	r3, r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	3310      	adds	r3, #16
 800a5fc:	440b      	add	r3, r1
 800a5fe:	1c58      	adds	r0, r3, #1
 800a600:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a604:	4613      	mov	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	009a      	lsls	r2, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	3310      	adds	r3, #16
 800a610:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a612:	4413      	add	r3, r2
 800a614:	3302      	adds	r3, #2
 800a616:	2206      	movs	r2, #6
 800a618:	4619      	mov	r1, r3
 800a61a:	f004 fb3e 	bl	800ec9a <memcpy>
    size += 6;
 800a61e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a622:	3306      	adds	r3, #6
 800a624:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    Extended_Advertising_Report[i].Data_Length = rp0->Extended_Advertising_Report[i].Data_Length;
 800a628:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a62a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a62e:	4613      	mov	r3, r2
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	4413      	add	r3, r2
 800a634:	009a      	lsls	r2, r3, #2
 800a636:	4413      	add	r3, r2
 800a638:	440b      	add	r3, r1
 800a63a:	3318      	adds	r3, #24
 800a63c:	7819      	ldrb	r1, [r3, #0]
 800a63e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a642:	4613      	mov	r3, r2
 800a644:	00db      	lsls	r3, r3, #3
 800a646:	1a9b      	subs	r3, r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	3388      	adds	r3, #136	@ 0x88
 800a64c:	443b      	add	r3, r7
 800a64e:	3b69      	subs	r3, #105	@ 0x69
 800a650:	460a      	mov	r2, r1
 800a652:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a654:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a658:	3301      	adds	r3, #1
 800a65a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    Extended_Advertising_Report[i].Data = rp0->Extended_Advertising_Report[i].Data;
 800a65e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a662:	4613      	mov	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	009a      	lsls	r2, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	3318      	adds	r3, #24
 800a66e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a670:	4413      	add	r3, r2
 800a672:	1c59      	adds	r1, r3, #1
 800a674:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a678:	4613      	mov	r3, r2
 800a67a:	00db      	lsls	r3, r3, #3
 800a67c:	1a9b      	subs	r3, r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	3388      	adds	r3, #136	@ 0x88
 800a682:	443b      	add	r3, r7
 800a684:	3b68      	subs	r3, #104	@ 0x68
 800a686:	6019      	str	r1, [r3, #0]
    size += rp0->Extended_Advertising_Report[i].Data_Length;
 800a688:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a68a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a68e:	4613      	mov	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	009a      	lsls	r2, r3, #2
 800a696:	4413      	add	r3, r2
 800a698:	440b      	add	r3, r1
 800a69a:	3318      	adds	r3, #24
 800a69c:	781a      	ldrb	r2, [r3, #0]
 800a69e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a6a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a6b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	f6ff ae7f 	blt.w	800a3c0 <hci_le_extended_advertising_report_event_process+0x20>
  }
  hci_le_extended_advertising_report_event(rp0->Num_Reports,
 800a6c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	f107 0208 	add.w	r2, r7, #8
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f001 f9e8 	bl	800baa2 <hci_le_extended_advertising_report_event>
                                           Extended_Advertising_Report);

  return status;
 800a6d2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3788      	adds	r7, #136	@ 0x88
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <hci_le_periodic_advertising_sync_established_event_process>:
 *        - 0x08 ... 0xFF: Reserved for future use
 * @retval None
 */

tBleStatus hci_le_periodic_advertising_sync_established_event_process(uint8_t *buffer_in)
{
 800a6de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6e0:	b089      	sub	sp, #36	@ 0x24
 800a6e2:	af04      	add	r7, sp, #16
 800a6e4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_periodic_advertising_sync_established_event_rp0 *rp0 = (hci_le_periodic_advertising_sync_established_event_rp0 *)buffer_in;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	60bb      	str	r3, [r7, #8]
  hci_le_periodic_advertising_sync_established_event(rp0->Status,
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	781c      	ldrb	r4, [r3, #0]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a6f8:	b29d      	uxth	r5, r3
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	78de      	ldrb	r6, [r3, #3]
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	f893 c004 	ldrb.w	ip, [r3, #4]
                                                     rp0->Sync_Handle,
                                                     rp0->Advertising_SID,
                                                     rp0->Advertiser_Address_Type,
                                                     rp0->Advertiser_Address,
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	3305      	adds	r3, #5
  hci_le_periodic_advertising_sync_established_event(rp0->Status,
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	7ad2      	ldrb	r2, [r2, #11]
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	8989      	ldrh	r1, [r1, #12]
 800a710:	b289      	uxth	r1, r1
 800a712:	68b8      	ldr	r0, [r7, #8]
 800a714:	7b80      	ldrb	r0, [r0, #14]
 800a716:	9003      	str	r0, [sp, #12]
 800a718:	9102      	str	r1, [sp, #8]
 800a71a:	9201      	str	r2, [sp, #4]
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	4663      	mov	r3, ip
 800a720:	4632      	mov	r2, r6
 800a722:	4629      	mov	r1, r5
 800a724:	4620      	mov	r0, r4
 800a726:	f001 f9c8 	bl	800baba <hci_le_periodic_advertising_sync_established_event>
                                                     rp0->Advertiser_PHY,
                                                     rp0->Periodic_Advertising_Interval,
                                                     rp0->Advertiser_Clock_Accuracy);

  return status;
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a734 <hci_le_periodic_advertising_report_event_process>:
 * @param Data Data received from a Periodic Advertising packet
 * @retval None
 */

tBleStatus hci_le_periodic_advertising_report_event_process(uint8_t *buffer_in)
{
 800a734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a736:	b089      	sub	sp, #36	@ 0x24
 800a738:	af04      	add	r7, sp, #16
 800a73a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_periodic_advertising_report_event_rp0 *rp0 = (hci_le_periodic_advertising_report_event_rp0 *)buffer_in;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60bb      	str	r3, [r7, #8]
  hci_le_periodic_advertising_report_event(rp0->Sync_Handle,
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	b298      	uxth	r0, r3
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	f993 4002 	ldrsb.w	r4, [r3, #2]
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f993 5003 	ldrsb.w	r5, [r3, #3]
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	791e      	ldrb	r6, [r3, #4]
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	795b      	ldrb	r3, [r3, #5]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	7992      	ldrb	r2, [r2, #6]
                                           rp0->TX_Power,
                                           rp0->RSSI,
                                           rp0->CTE_Type,
                                           rp0->Data_Status,
                                           rp0->Data_Length,
                                           rp0->Data);
 800a762:	68b9      	ldr	r1, [r7, #8]
 800a764:	3107      	adds	r1, #7
  hci_le_periodic_advertising_report_event(rp0->Sync_Handle,
 800a766:	9102      	str	r1, [sp, #8]
 800a768:	9201      	str	r2, [sp, #4]
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	4633      	mov	r3, r6
 800a76e:	462a      	mov	r2, r5
 800a770:	4621      	mov	r1, r4
 800a772:	f001 f9b6 	bl	800bae2 <hci_le_periodic_advertising_report_event>

  return status;
 800a776:	7bfb      	ldrb	r3, [r7, #15]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a780 <hci_le_periodic_advertising_sync_lost_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_le_periodic_advertising_sync_lost_event_process(uint8_t *buffer_in)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_periodic_advertising_sync_lost_event_rp0 *rp0 = (hci_le_periodic_advertising_sync_lost_event_rp0 *)buffer_in;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	60bb      	str	r3, [r7, #8]
  hci_le_periodic_advertising_sync_lost_event(rp0->Sync_Handle);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	881b      	ldrh	r3, [r3, #0]
 800a794:	b29b      	uxth	r3, r3
 800a796:	4618      	mov	r0, r3
 800a798:	f001 f9b7 	bl	800bb0a <hci_le_periodic_advertising_sync_lost_event>

  return status;
 800a79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <hci_le_scan_timeout_event_process>:
 *        scanning was enabled using the LE Set Extended Scan Enable command.
 * @retval None
 */

tBleStatus hci_le_scan_timeout_event_process(uint8_t *buffer_in)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	73fb      	strb	r3, [r7, #15]
  hci_le_scan_timeout_event();
 800a7b2:	f001 f9b5 	bl	800bb20 <hci_le_scan_timeout_event>

  return status;
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <hci_le_advertising_set_terminated_event_process>:
 *        advertising events transmitted by the Controller
 * @retval None
 */

tBleStatus hci_le_advertising_set_terminated_event_process(uint8_t *buffer_in)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_advertising_set_terminated_event_rp0 *rp0 = (hci_le_advertising_set_terminated_event_rp0 *)buffer_in;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	60bb      	str	r3, [r7, #8]
  hci_le_advertising_set_terminated_event(rp0->Status,
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	7818      	ldrb	r0, [r3, #0]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	7859      	ldrb	r1, [r3, #1]
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	885b      	ldrh	r3, [r3, #2]
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	791b      	ldrb	r3, [r3, #4]
 800a7e2:	f001 f9a4 	bl	800bb2e <hci_le_advertising_set_terminated_event>
                                          rp0->Advertising_Handle,
                                          rp0->Connection_Handle,
                                          rp0->Num_Completed_Extended_Advertising_Events);

  return status;
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <hci_le_scan_request_received_event_process>:
 *        advertising device
 * @retval None
 */

tBleStatus hci_le_scan_request_received_event_process(uint8_t *buffer_in)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_scan_request_received_event_rp0 *rp0 = (hci_le_scan_request_received_event_rp0 *)buffer_in;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	60bb      	str	r3, [r7, #8]
  hci_le_scan_request_received_event(rp0->Advertising_Handle,
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	7818      	ldrb	r0, [r3, #0]
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	7859      	ldrb	r1, [r3, #1]
                                     rp0->Scanner_Address_Type,
                                     rp0->Scanner_Address);
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	3302      	adds	r3, #2
  hci_le_scan_request_received_event(rp0->Advertising_Handle,
 800a80c:	461a      	mov	r2, r3
 800a80e:	f001 f9a2 	bl	800bb56 <hci_le_scan_request_received_event>

  return status;
 800a812:	7bfb      	ldrb	r3, [r7, #15]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <hci_le_channel_selection_algorithm_event_process>:
 *        - 0x02 ... 0xFF: Reserved for future use
 * @retval None
 */

tBleStatus hci_le_channel_selection_algorithm_event_process(uint8_t *buffer_in)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a824:	2300      	movs	r3, #0
 800a826:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_channel_selection_algorithm_event_rp0 *rp0 = (hci_le_channel_selection_algorithm_event_rp0 *)buffer_in;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	60bb      	str	r3, [r7, #8]
  hci_le_channel_selection_algorithm_event(rp0->Connection_Handle,
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	881b      	ldrh	r3, [r3, #0]
 800a830:	b29a      	uxth	r2, r3
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	789b      	ldrb	r3, [r3, #2]
 800a836:	4619      	mov	r1, r3
 800a838:	4610      	mov	r0, r2
 800a83a:	f001 f99a 	bl	800bb72 <hci_le_channel_selection_algorithm_event>
                                           rp0->Channel_Selection_Algorithm);

  return status;
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <hci_le_connectionless_iq_report_event_process>:
 * @param Samples See @ref Samples_t
 * @retval None
 */

tBleStatus hci_le_connectionless_iq_report_event_process(uint8_t *buffer_in)
{
 800a848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84c:	b0ac      	sub	sp, #176	@ 0xb0
 800a84e:	af06      	add	r7, sp, #24
 800a850:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a852:	2300      	movs	r3, #0
 800a854:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_le_connectionless_iq_report_event_rp0 *rp0 = (hci_le_connectionless_iq_report_event_rp0 *)buffer_in;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 12;
 800a85e:	230c      	movs	r3, #12
 800a860:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Samples_t Samples[HCI_MAX_PAYLOAD_SIZE/sizeof(Samples_t)];
  for (i = 0; i < rp0->Sample_Count; i++) {
 800a864:	2300      	movs	r3, #0
 800a866:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a86a:	e02e      	b.n	800a8ca <hci_le_connectionless_iq_report_event_process+0x82>
    Samples[i].I_Sample = rp0->Samples[i].I_Sample;
 800a86c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a870:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a874:	3304      	adds	r3, #4
 800a876:	005b      	lsls	r3, r3, #1
 800a878:	4413      	add	r3, r2
 800a87a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800a87e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	3398      	adds	r3, #152	@ 0x98
 800a886:	443b      	add	r3, r7
 800a888:	f803 2c90 	strb.w	r2, [r3, #-144]
    size += 1;
 800a88c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a890:	3301      	adds	r3, #1
 800a892:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Samples[i].Q_Sample = rp0->Samples[i].Q_Sample;
 800a896:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a89a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a89e:	3304      	adds	r3, #4
 800a8a0:	005b      	lsls	r3, r3, #1
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800a8a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a8ac:	005b      	lsls	r3, r3, #1
 800a8ae:	3398      	adds	r3, #152	@ 0x98
 800a8b0:	443b      	add	r3, r7
 800a8b2:	f803 2c8f 	strb.w	r2, [r3, #-143]
    size += 1;
 800a8b6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Sample_Count; i++) {
 800a8c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a8ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8ce:	7adb      	ldrb	r3, [r3, #11]
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	dbc8      	blt.n	800a86c <hci_le_connectionless_iq_report_event_process+0x24>
  }
  hci_le_connectionless_iq_report_event(rp0->Sync_Handle,
 800a8da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	b29e      	uxth	r6, r3
 800a8e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8e6:	f893 c002 	ldrb.w	ip, [r3, #2]
 800a8ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8ee:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800a8f2:	fa0f fe83 	sxth.w	lr, r3
 800a8f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8fa:	f893 8005 	ldrb.w	r8, [r3, #5]
 800a8fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a902:	799b      	ldrb	r3, [r3, #6]
 800a904:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a908:	79d2      	ldrb	r2, [r2, #7]
 800a90a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800a90e:	7a09      	ldrb	r1, [r1, #8]
 800a910:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800a914:	f8b0 0009 	ldrh.w	r0, [r0, #9]
 800a918:	b280      	uxth	r0, r0
 800a91a:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 800a91e:	7ae4      	ldrb	r4, [r4, #11]
 800a920:	f107 0508 	add.w	r5, r7, #8
 800a924:	9505      	str	r5, [sp, #20]
 800a926:	9404      	str	r4, [sp, #16]
 800a928:	9003      	str	r0, [sp, #12]
 800a92a:	9102      	str	r1, [sp, #8]
 800a92c:	9201      	str	r2, [sp, #4]
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	4643      	mov	r3, r8
 800a932:	4672      	mov	r2, lr
 800a934:	4661      	mov	r1, ip
 800a936:	4630      	mov	r0, r6
 800a938:	f001 f929 	bl	800bb8e <hci_le_connectionless_iq_report_event>
                                        rp0->Packet_Status,
                                        rp0->Periodic_Event_Counter,
                                        rp0->Sample_Count,
                                        Samples);

  return status;
 800a93c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800a940:	4618      	mov	r0, r3
 800a942:	3798      	adds	r7, #152	@ 0x98
 800a944:	46bd      	mov	sp, r7
 800a946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a94a <hci_le_connection_iq_report_event_process>:
 * @param Samples See @ref Samples_t
 * @retval None
 */

tBleStatus hci_le_connection_iq_report_event_process(uint8_t *buffer_in)
{
 800a94a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a94e:	b0af      	sub	sp, #188	@ 0xbc
 800a950:	af08      	add	r7, sp, #32
 800a952:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a954:	2300      	movs	r3, #0
 800a956:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_le_connection_iq_report_event_rp0 *rp0 = (hci_le_connection_iq_report_event_rp0 *)buffer_in;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 13;
 800a960:	230d      	movs	r3, #13
 800a962:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Samples_t Samples[HCI_MAX_PAYLOAD_SIZE/sizeof(Samples_t)];
  for (i = 0; i < rp0->Sample_Count; i++) {
 800a966:	2300      	movs	r3, #0
 800a968:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a96c:	e02e      	b.n	800a9cc <hci_le_connection_iq_report_event_process+0x82>
    Samples[i].I_Sample = rp0->Samples[i].I_Sample;
 800a96e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a972:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a976:	3304      	adds	r3, #4
 800a978:	005b      	lsls	r3, r3, #1
 800a97a:	4413      	add	r3, r2
 800a97c:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800a980:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	3398      	adds	r3, #152	@ 0x98
 800a988:	443b      	add	r3, r7
 800a98a:	f803 2c90 	strb.w	r2, [r3, #-144]
    size += 1;
 800a98e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a992:	3301      	adds	r3, #1
 800a994:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Samples[i].Q_Sample = rp0->Samples[i].Q_Sample;
 800a998:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a99c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a9a0:	3304      	adds	r3, #4
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800a9aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	3398      	adds	r3, #152	@ 0x98
 800a9b2:	443b      	add	r3, r7
 800a9b4:	f803 2c8f 	strb.w	r2, [r3, #-143]
    size += 1;
 800a9b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a9bc:	3301      	adds	r3, #1
 800a9be:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Sample_Count; i++) {
 800a9c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a9cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a9d0:	7b1b      	ldrb	r3, [r3, #12]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	dbc8      	blt.n	800a96e <hci_le_connection_iq_report_event_process+0x24>
  }
  hci_le_connection_iq_report_event(rp0->Connection_Handle,
 800a9dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	fa1f fc83 	uxth.w	ip, r3
 800a9e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a9ea:	f893 e002 	ldrb.w	lr, [r3, #2]
 800a9ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a9f2:	f893 8003 	ldrb.w	r8, [r3, #3]
 800a9f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a9fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a9fe:	fa0f f983 	sxth.w	r9, r3
 800aa02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa06:	799b      	ldrb	r3, [r3, #6]
 800aa08:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800aa0c:	79d2      	ldrb	r2, [r2, #7]
 800aa0e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800aa12:	7a09      	ldrb	r1, [r1, #8]
 800aa14:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800aa18:	7a40      	ldrb	r0, [r0, #9]
 800aa1a:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 800aa1e:	8964      	ldrh	r4, [r4, #10]
 800aa20:	b2a4      	uxth	r4, r4
 800aa22:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 800aa26:	7b2d      	ldrb	r5, [r5, #12]
 800aa28:	f107 0608 	add.w	r6, r7, #8
 800aa2c:	9606      	str	r6, [sp, #24]
 800aa2e:	9505      	str	r5, [sp, #20]
 800aa30:	9404      	str	r4, [sp, #16]
 800aa32:	9003      	str	r0, [sp, #12]
 800aa34:	9102      	str	r1, [sp, #8]
 800aa36:	9201      	str	r2, [sp, #4]
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	464b      	mov	r3, r9
 800aa3c:	4642      	mov	r2, r8
 800aa3e:	4671      	mov	r1, lr
 800aa40:	4660      	mov	r0, ip
 800aa42:	f001 f8b8 	bl	800bbb6 <hci_le_connection_iq_report_event>
                                    rp0->Packet_Status,
                                    rp0->Connection_Event_Counter,
                                    rp0->Sample_Count,
                                    Samples);

  return status;
 800aa46:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	379c      	adds	r7, #156	@ 0x9c
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800aa54 <hci_le_cte_request_failed_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_le_cte_request_failed_event_process(uint8_t *buffer_in)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_cte_request_failed_event_rp0 *rp0 = (hci_le_cte_request_failed_event_rp0 *)buffer_in;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	60bb      	str	r3, [r7, #8]
  hci_le_cte_request_failed_event(rp0->Status,
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	781a      	ldrb	r2, [r3, #0]
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	4619      	mov	r1, r3
 800aa72:	4610      	mov	r0, r2
 800aa74:	f001 f8b3 	bl	800bbde <hci_le_cte_request_failed_event>
                                  rp0->Connection_Handle);

  return status;
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <hci_le_periodic_advertising_sync_transfer_received_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_periodic_advertising_sync_transfer_received_event_process(uint8_t *buffer_in)
{
 800aa82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa86:	b08a      	sub	sp, #40	@ 0x28
 800aa88:	af06      	add	r7, sp, #24
 800aa8a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_periodic_advertising_sync_transfer_received_event_rp0 *rp0 = (hci_le_periodic_advertising_sync_transfer_received_event_rp0 *)buffer_in;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	60bb      	str	r3, [r7, #8]
  hci_le_periodic_advertising_sync_transfer_received_event(rp0->Status,
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	781e      	ldrb	r6, [r3, #0]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa9e:	fa1f fc83 	uxth.w	ip, r3
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800aaa8:	fa1f fe83 	uxth.w	lr, r3
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800aab2:	fa1f f883 	uxth.w	r8, r3
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	79db      	ldrb	r3, [r3, #7]
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	7a12      	ldrb	r2, [r2, #8]
                                                           rp0->Connection_Handle,
                                                           rp0->Service_data,
                                                           rp0->Sync_Handle,
                                                           rp0->Advertising_SID,
                                                           rp0->Advertiser_Address_Type,
                                                           rp0->Advertiser_Address,
 800aabe:	68b9      	ldr	r1, [r7, #8]
 800aac0:	3109      	adds	r1, #9
  hci_le_periodic_advertising_sync_transfer_received_event(rp0->Status,
 800aac2:	68b8      	ldr	r0, [r7, #8]
 800aac4:	7bc0      	ldrb	r0, [r0, #15]
 800aac6:	68bc      	ldr	r4, [r7, #8]
 800aac8:	8a24      	ldrh	r4, [r4, #16]
 800aaca:	b2a4      	uxth	r4, r4
 800aacc:	68bd      	ldr	r5, [r7, #8]
 800aace:	7cad      	ldrb	r5, [r5, #18]
 800aad0:	9505      	str	r5, [sp, #20]
 800aad2:	9404      	str	r4, [sp, #16]
 800aad4:	9003      	str	r0, [sp, #12]
 800aad6:	9102      	str	r1, [sp, #8]
 800aad8:	9201      	str	r2, [sp, #4]
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	4643      	mov	r3, r8
 800aade:	4672      	mov	r2, lr
 800aae0:	4661      	mov	r1, ip
 800aae2:	4630      	mov	r0, r6
 800aae4:	f001 f889 	bl	800bbfa <hci_le_periodic_advertising_sync_transfer_received_event>
                                                           rp0->Advertiser_PHY,
                                                           rp0->Periodic_Advertising_Interval,
                                                           rp0->Advertiser_Clock_Accuracy);

  return status;
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aaf4 <hci_le_cis_established_event_process>:
 *        - 0x0004 (5.00 ms)  ... 0x0C80 (4000.00 ms) 
 * @retval None
 */

tBleStatus hci_le_cis_established_event_process(uint8_t *buffer_in)
{
 800aaf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aaf8:	b095      	sub	sp, #84	@ 0x54
 800aafa:	af0c      	add	r7, sp, #48	@ 0x30
 800aafc:	6178      	str	r0, [r7, #20]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800aafe:	2300      	movs	r3, #0
 800ab00:	77fb      	strb	r3, [r7, #31]
  /* Input params */
  hci_le_cis_established_event_rp0 *rp0 = (hci_le_cis_established_event_rp0 *)buffer_in;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	61bb      	str	r3, [r7, #24]
  hci_le_cis_established_event(rp0->Status,
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	f893 c000 	ldrb.w	ip, [r3]
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ab12:	fa1f fe83 	uxth.w	lr, r3
                               rp0->Connection_Handle,
                               rp0->CIG_Sync_Delay,
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	f103 0803 	add.w	r8, r3, #3
                               rp0->CIS_Sync_Delay,
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	f103 0906 	add.w	r9, r3, #6
                               rp0->Transport_Latency_C_To_P,
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	f103 0009 	add.w	r0, r3, #9
                               rp0->Transport_Latency_P_To_C,
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	f103 040c 	add.w	r4, r3, #12
  hci_le_cis_established_event(rp0->Status,
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	7bdd      	ldrb	r5, [r3, #15]
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	7c1e      	ldrb	r6, [r3, #16]
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	7c5b      	ldrb	r3, [r3, #17]
 800ab3a:	613b      	str	r3, [r7, #16]
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	7c9a      	ldrb	r2, [r3, #18]
 800ab40:	60fa      	str	r2, [r7, #12]
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	7cd9      	ldrb	r1, [r3, #19]
 800ab46:	60b9      	str	r1, [r7, #8]
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	7d1b      	ldrb	r3, [r3, #20]
 800ab4c:	607b      	str	r3, [r7, #4]
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	7d5a      	ldrb	r2, [r3, #21]
 800ab52:	603a      	str	r2, [r7, #0]
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	8adb      	ldrh	r3, [r3, #22]
 800ab58:	b299      	uxth	r1, r3
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	8b1b      	ldrh	r3, [r3, #24]
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	8b5b      	ldrh	r3, [r3, #26]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab68:	920a      	str	r2, [sp, #40]	@ 0x28
 800ab6a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	9208      	str	r2, [sp, #32]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	9307      	str	r3, [sp, #28]
 800ab74:	68b9      	ldr	r1, [r7, #8]
 800ab76:	9106      	str	r1, [sp, #24]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	9205      	str	r2, [sp, #20]
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	9304      	str	r3, [sp, #16]
 800ab80:	9603      	str	r6, [sp, #12]
 800ab82:	9502      	str	r5, [sp, #8]
 800ab84:	9401      	str	r4, [sp, #4]
 800ab86:	9000      	str	r0, [sp, #0]
 800ab88:	464b      	mov	r3, r9
 800ab8a:	4642      	mov	r2, r8
 800ab8c:	4671      	mov	r1, lr
 800ab8e:	4660      	mov	r0, ip
 800ab90:	f001 f847 	bl	800bc22 <hci_le_cis_established_event>
                               rp0->FT_P_To_C,
                               rp0->Max_PDU_C_To_P,
                               rp0->Max_PDU_P_To_C,
                               rp0->ISO_Interval);

  return status;
 800ab94:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3724      	adds	r7, #36	@ 0x24
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800aba0 <hci_le_cis_request_event_process>:
 *        - 0x00 ... 0xEF
 * @retval None
 */

tBleStatus hci_le_cis_request_event_process(uint8_t *buffer_in)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_cis_request_event_rp0 *rp0 = (hci_le_cis_request_event_rp0 *)buffer_in;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	60bb      	str	r3, [r7, #8]
  hci_le_cis_request_event(rp0->ACL_Connection_Handle,
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	b298      	uxth	r0, r3
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	885b      	ldrh	r3, [r3, #2]
 800abba:	b299      	uxth	r1, r3
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	791a      	ldrb	r2, [r3, #4]
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	795b      	ldrb	r3, [r3, #5]
 800abc4:	f001 f83c 	bl	800bc40 <hci_le_cis_request_event>
                           rp0->CIS_Connection_Handle,
                           rp0->CIG_ID,
                           rp0->CIS_ID);

  return status;
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <hci_le_create_big_complete_event_process>:
 * @param Connection_Handle The connection handles of the BISes in the BIG.
 * @retval None
 */

tBleStatus hci_le_create_big_complete_event_process(uint8_t *buffer_in)
{
 800abd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abd6:	b0b1      	sub	sp, #196	@ 0xc4
 800abd8:	af0a      	add	r7, sp, #40	@ 0x28
 800abda:	60f8      	str	r0, [r7, #12]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800abdc:	2300      	movs	r3, #0
 800abde:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  /* Input params */
  hci_le_create_big_complete_event_rp0 *rp0 = (hci_le_create_big_complete_event_rp0 *)buffer_in;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  
  uint16_t Connection_Handle[HCI_MAX_PAYLOAD_SIZE/sizeof(uint16_t)];
  
  STM32WB_memcpy(Connection_Handle, rp0->Connection_Handle, rp0->Num_BIS * sizeof(uint16_t));
 800abe8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800abec:	f103 0112 	add.w	r1, r3, #18
 800abf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800abf4:	7c5b      	ldrb	r3, [r3, #17]
 800abf6:	005a      	lsls	r2, r3, #1
 800abf8:	f107 0310 	add.w	r3, r7, #16
 800abfc:	4618      	mov	r0, r3
 800abfe:	f004 f84c 	bl	800ec9a <memcpy>
  
  hci_le_create_big_complete_event(rp0->Status,
 800ac02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac06:	f893 c000 	ldrb.w	ip, [r3]
 800ac0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac0e:	f893 e001 	ldrb.w	lr, [r3, #1]
                                   rp0->BIG_Handle,
                                   rp0->BIG_Sync_Delay,
 800ac12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac16:	f103 0802 	add.w	r8, r3, #2
                                   rp0->Transport_Latency_BIG,
 800ac1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac1e:	f103 0905 	add.w	r9, r3, #5
  hci_le_create_big_complete_event(rp0->Status,
 800ac22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac26:	7a1b      	ldrb	r3, [r3, #8]
 800ac28:	60bb      	str	r3, [r7, #8]
 800ac2a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800ac2e:	7a52      	ldrb	r2, [r2, #9]
 800ac30:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ac34:	7a89      	ldrb	r1, [r1, #10]
 800ac36:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800ac3a:	7ac0      	ldrb	r0, [r0, #11]
 800ac3c:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 800ac40:	7b24      	ldrb	r4, [r4, #12]
 800ac42:	f8d7 5090 	ldr.w	r5, [r7, #144]	@ 0x90
 800ac46:	f8b5 500d 	ldrh.w	r5, [r5, #13]
 800ac4a:	b2ad      	uxth	r5, r5
 800ac4c:	f8d7 6090 	ldr.w	r6, [r7, #144]	@ 0x90
 800ac50:	f8b6 600f 	ldrh.w	r6, [r6, #15]
 800ac54:	b2b6      	uxth	r6, r6
 800ac56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac5a:	7c5b      	ldrb	r3, [r3, #17]
 800ac5c:	607b      	str	r3, [r7, #4]
 800ac5e:	f107 0310 	add.w	r3, r7, #16
 800ac62:	9308      	str	r3, [sp, #32]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	9307      	str	r3, [sp, #28]
 800ac68:	9606      	str	r6, [sp, #24]
 800ac6a:	9505      	str	r5, [sp, #20]
 800ac6c:	9404      	str	r4, [sp, #16]
 800ac6e:	9003      	str	r0, [sp, #12]
 800ac70:	9102      	str	r1, [sp, #8]
 800ac72:	9201      	str	r2, [sp, #4]
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	464b      	mov	r3, r9
 800ac7a:	4642      	mov	r2, r8
 800ac7c:	4671      	mov	r1, lr
 800ac7e:	4660      	mov	r0, ip
 800ac80:	f000 fff2 	bl	800bc68 <hci_le_create_big_complete_event>
                                   rp0->Max_PDU,
                                   rp0->ISO_Interval,
                                   rp0->Num_BIS,
                                   Connection_Handle);

  return status;
 800ac84:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	379c      	adds	r7, #156	@ 0x9c
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ac92 <hci_le_terminate_big_complete_event_process>:
 * @param Reason Reason for termination. See Error Codes.
 * @retval None
 */

tBleStatus hci_le_terminate_big_complete_event_process(uint8_t *buffer_in)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b084      	sub	sp, #16
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_terminate_big_complete_event_rp0 *rp0 = (hci_le_terminate_big_complete_event_rp0 *)buffer_in;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	60bb      	str	r3, [r7, #8]
  hci_le_terminate_big_complete_event(rp0->BIG_Handle,
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	781a      	ldrb	r2, [r3, #0]
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	785b      	ldrb	r3, [r3, #1]
 800acaa:	4619      	mov	r1, r3
 800acac:	4610      	mov	r0, r2
 800acae:	f000 ffea 	bl	800bc86 <hci_le_terminate_big_complete_event>
                                      rp0->Reason);

  return status;
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <hci_le_big_sync_established_event_process>:
 * @param Connection_Handle The connection handles of the BISes in the BIG.
 * @retval None
 */

tBleStatus hci_le_big_sync_established_event_process(uint8_t *buffer_in)
{
 800acbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acc0:	b0ad      	sub	sp, #180	@ 0xb4
 800acc2:	af08      	add	r7, sp, #32
 800acc4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800acc6:	2300      	movs	r3, #0
 800acc8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_le_big_sync_established_event_rp0 *rp0 = (hci_le_big_sync_established_event_rp0 *)buffer_in;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  
  uint16_t Connection_Handle[HCI_MAX_PAYLOAD_SIZE/sizeof(uint16_t)];
  
  STM32WB_memcpy(Connection_Handle, rp0->Connection_Handle, rp0->Num_BIS * sizeof(uint16_t));
 800acd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800acd6:	f103 010e 	add.w	r1, r3, #14
 800acda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800acde:	7b5b      	ldrb	r3, [r3, #13]
 800ace0:	005a      	lsls	r2, r3, #1
 800ace2:	f107 0308 	add.w	r3, r7, #8
 800ace6:	4618      	mov	r0, r3
 800ace8:	f003 ffd7 	bl	800ec9a <memcpy>
  
  hci_le_big_sync_established_event(rp0->Status,
 800acec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800acf0:	f893 c000 	ldrb.w	ip, [r3]
 800acf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800acf8:	f893 e001 	ldrb.w	lr, [r3, #1]
                                    rp0->BIG_Handle,
                                    rp0->Transport_Latency_BIG,
 800acfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ad00:	f103 0802 	add.w	r8, r3, #2
  hci_le_big_sync_established_event(rp0->Status,
 800ad04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ad08:	f893 9005 	ldrb.w	r9, [r3, #5]
 800ad0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ad10:	799b      	ldrb	r3, [r3, #6]
 800ad12:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ad16:	79d2      	ldrb	r2, [r2, #7]
 800ad18:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800ad1c:	7a09      	ldrb	r1, [r1, #8]
 800ad1e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800ad22:	f8b0 0009 	ldrh.w	r0, [r0, #9]
 800ad26:	b280      	uxth	r0, r0
 800ad28:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 800ad2c:	f8b4 400b 	ldrh.w	r4, [r4, #11]
 800ad30:	b2a4      	uxth	r4, r4
 800ad32:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 800ad36:	7b6d      	ldrb	r5, [r5, #13]
 800ad38:	f107 0608 	add.w	r6, r7, #8
 800ad3c:	9606      	str	r6, [sp, #24]
 800ad3e:	9505      	str	r5, [sp, #20]
 800ad40:	9404      	str	r4, [sp, #16]
 800ad42:	9003      	str	r0, [sp, #12]
 800ad44:	9102      	str	r1, [sp, #8]
 800ad46:	9201      	str	r2, [sp, #4]
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	464b      	mov	r3, r9
 800ad4c:	4642      	mov	r2, r8
 800ad4e:	4671      	mov	r1, lr
 800ad50:	4660      	mov	r0, ip
 800ad52:	f000 ffa6 	bl	800bca2 <hci_le_big_sync_established_event>
                                    rp0->Max_PDU,
                                    rp0->ISO_Interval,
                                    rp0->Num_BIS,
                                    Connection_Handle);

  return status;
 800ad56:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3794      	adds	r7, #148	@ 0x94
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ad64 <hci_le_big_sync_lost_event_process>:
 * @param Reason Reason for termination. See Error Codes.
 * @retval None
 */

tBleStatus hci_le_big_sync_lost_event_process(uint8_t *buffer_in)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_big_sync_lost_event_rp0 *rp0 = (hci_le_big_sync_lost_event_rp0 *)buffer_in;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	60bb      	str	r3, [r7, #8]
  hci_le_big_sync_lost_event(rp0->BIG_Handle,
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	781a      	ldrb	r2, [r3, #0]
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	785b      	ldrb	r3, [r3, #1]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4610      	mov	r0, r2
 800ad80:	f000 ffa0 	bl	800bcc4 <hci_le_big_sync_lost_event>
                             rp0->Reason);

  return status;
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <hci_le_request_peer_sca_complete_event_process>:
 *        - 0x07: 0 ppm to 20 ppm
 * @retval None
 */

tBleStatus hci_le_request_peer_sca_complete_event_process(uint8_t *buffer_in)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b084      	sub	sp, #16
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ad96:	2300      	movs	r3, #0
 800ad98:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_request_peer_sca_complete_event_rp0 *rp0 = (hci_le_request_peer_sca_complete_event_rp0 *)buffer_in;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	60bb      	str	r3, [r7, #8]
  hci_le_request_peer_sca_complete_event(rp0->Status,
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	7818      	ldrb	r0, [r3, #0]
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ada8:	b299      	uxth	r1, r3
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	78db      	ldrb	r3, [r3, #3]
 800adae:	461a      	mov	r2, r3
 800adb0:	f000 ff96 	bl	800bce0 <hci_le_request_peer_sca_complete_event>
                                         rp0->Connection_Handle,
                                         rp0->Peer_Clock_Accuracy);

  return status;
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <hci_le_path_loss_threshold_event_process>:
 *        - 0x02: HIGH_ZONE
 * @retval None
 */

tBleStatus hci_le_path_loss_threshold_event_process(uint8_t *buffer_in)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800adc6:	2300      	movs	r3, #0
 800adc8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_path_loss_threshold_event_rp0 *rp0 = (hci_le_path_loss_threshold_event_rp0 *)buffer_in;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	60bb      	str	r3, [r7, #8]
  hci_le_path_loss_threshold_event(rp0->Connection_Handle,
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	b298      	uxth	r0, r3
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	7899      	ldrb	r1, [r3, #2]
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	78db      	ldrb	r3, [r3, #3]
 800addc:	461a      	mov	r2, r3
 800adde:	f000 ff8e 	bl	800bcfe <hci_le_path_loss_threshold_event>
                                   rp0->Current_Path_Loss,
                                   rp0->Zone_Entered);

  return status;
 800ade2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <hci_le_transmit_power_reporting_event_process>:
 *        - 127: NA
 * @retval None
 */

tBleStatus hci_le_transmit_power_reporting_event_process(uint8_t *buffer_in)
{
 800adec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adee:	b089      	sub	sp, #36	@ 0x24
 800adf0:	af04      	add	r7, sp, #16
 800adf2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_transmit_power_reporting_event_rp0 *rp0 = (hci_le_transmit_power_reporting_event_rp0 *)buffer_in;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	60bb      	str	r3, [r7, #8]
  hci_le_transmit_power_reporting_event(rp0->Status,
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	7818      	ldrb	r0, [r3, #0]
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ae06:	b29c      	uxth	r4, r3
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	78dd      	ldrb	r5, [r3, #3]
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	791e      	ldrb	r6, [r3, #4]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ae16:	68ba      	ldr	r2, [r7, #8]
 800ae18:	7992      	ldrb	r2, [r2, #6]
 800ae1a:	68b9      	ldr	r1, [r7, #8]
 800ae1c:	f991 1007 	ldrsb.w	r1, [r1, #7]
 800ae20:	9102      	str	r1, [sp, #8]
 800ae22:	9201      	str	r2, [sp, #4]
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	4633      	mov	r3, r6
 800ae28:	462a      	mov	r2, r5
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	f000 ff76 	bl	800bd1c <hci_le_transmit_power_reporting_event>
                                        rp0->PHY,
                                        rp0->Transmit_Power_Level,
                                        rp0->Transmit_Power_Level_Flag,
                                        rp0->Delta);

  return status;
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3714      	adds	r7, #20
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae3a <hci_le_biginfo_advertising_report_event_process>:
 *        - 0x01: Encrypted
 * @retval None
 */

tBleStatus hci_le_biginfo_advertising_report_event_process(uint8_t *buffer_in)
{
 800ae3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae3e:	b091      	sub	sp, #68	@ 0x44
 800ae40:	af0a      	add	r7, sp, #40	@ 0x28
 800ae42:	60f8      	str	r0, [r7, #12]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ae44:	2300      	movs	r3, #0
 800ae46:	75fb      	strb	r3, [r7, #23]
  /* Input params */
  hci_le_biginfo_advertising_report_event_rp0 *rp0 = (hci_le_biginfo_advertising_report_event_rp0 *)buffer_in;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	613b      	str	r3, [r7, #16]
  hci_le_biginfo_advertising_report_event(rp0->Sync_Handle,
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	fa1f fc83 	uxth.w	ip, r3
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	f893 e002 	ldrb.w	lr, [r3, #2]
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	f893 8003 	ldrb.w	r8, [r3, #3]
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	889b      	ldrh	r3, [r3, #4]
 800ae64:	fa1f f983 	uxth.w	r9, r3
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	799b      	ldrb	r3, [r3, #6]
 800ae6c:	60bb      	str	r3, [r7, #8]
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	79d2      	ldrb	r2, [r2, #7]
 800ae72:	6939      	ldr	r1, [r7, #16]
 800ae74:	7a09      	ldrb	r1, [r1, #8]
 800ae76:	6938      	ldr	r0, [r7, #16]
 800ae78:	f8b0 0009 	ldrh.w	r0, [r0, #9]
 800ae7c:	b280      	uxth	r0, r0
                                          rp0->ISO_Interval,
                                          rp0->BN,
                                          rp0->PTO,
                                          rp0->IRC,
                                          rp0->Max_PDU,
                                          rp0->SDU_Interval,
 800ae7e:	693c      	ldr	r4, [r7, #16]
 800ae80:	340b      	adds	r4, #11
  hci_le_biginfo_advertising_report_event(rp0->Sync_Handle,
 800ae82:	693d      	ldr	r5, [r7, #16]
 800ae84:	89ed      	ldrh	r5, [r5, #14]
 800ae86:	b2ad      	uxth	r5, r5
 800ae88:	693e      	ldr	r6, [r7, #16]
 800ae8a:	7c36      	ldrb	r6, [r6, #16]
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	7c5b      	ldrb	r3, [r3, #17]
 800ae90:	607b      	str	r3, [r7, #4]
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	7c9b      	ldrb	r3, [r3, #18]
 800ae96:	9308      	str	r3, [sp, #32]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	9307      	str	r3, [sp, #28]
 800ae9c:	9606      	str	r6, [sp, #24]
 800ae9e:	9505      	str	r5, [sp, #20]
 800aea0:	9404      	str	r4, [sp, #16]
 800aea2:	9003      	str	r0, [sp, #12]
 800aea4:	9102      	str	r1, [sp, #8]
 800aea6:	9201      	str	r2, [sp, #4]
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	464b      	mov	r3, r9
 800aeae:	4642      	mov	r2, r8
 800aeb0:	4671      	mov	r1, lr
 800aeb2:	4660      	mov	r0, ip
 800aeb4:	f000 ff46 	bl	800bd44 <hci_le_biginfo_advertising_report_event>
                                          rp0->Max_SDU,
                                          rp0->PHY,
                                          rp0->Framing,
                                          rp0->Encryption);

  return status;
 800aeb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	371c      	adds	r7, #28
 800aebe:	46bd      	mov	sp, r7
 800aec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800aec4 <hci_le_subrate_change_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_subrate_change_event_process(uint8_t *buffer_in)
{
 800aec4:	b5b0      	push	{r4, r5, r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af02      	add	r7, sp, #8
 800aeca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800aecc:	2300      	movs	r3, #0
 800aece:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_subrate_change_event_rp0 *rp0 = (hci_le_subrate_change_event_rp0 *)buffer_in;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	60bb      	str	r3, [r7, #8]
  hci_le_subrate_change_event(rp0->Status,
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	7818      	ldrb	r0, [r3, #0]
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aede:	b299      	uxth	r1, r3
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800aee6:	b29c      	uxth	r4, r3
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800aeee:	b29d      	uxth	r5, r3
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800aefe:	b292      	uxth	r2, r2
 800af00:	9201      	str	r2, [sp, #4]
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	462b      	mov	r3, r5
 800af06:	4622      	mov	r2, r4
 800af08:	f000 ff30 	bl	800bd6c <hci_le_subrate_change_event>
                              rp0->Subrate_Factor,
                              rp0->Peripheral_Latency,
                              rp0->Continuation_Number,
                              rp0->Supervision_Timeout);

  return status;
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bdb0      	pop	{r4, r5, r7, pc}

0800af16 <hci_le_periodic_advertising_sync_established_v2_event_process>:
 *        - 0x02 (0.250 ms)  ... 0xFF (31.875 ms) 
 * @retval None
 */

tBleStatus hci_le_periodic_advertising_sync_established_v2_event_process(uint8_t *buffer_in)
{
 800af16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af1a:	b08d      	sub	sp, #52	@ 0x34
 800af1c:	af08      	add	r7, sp, #32
 800af1e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800af20:	2300      	movs	r3, #0
 800af22:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_periodic_advertising_sync_established_v2_event_rp0 *rp0 = (hci_le_periodic_advertising_sync_established_v2_event_rp0 *)buffer_in;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	60bb      	str	r3, [r7, #8]
  hci_le_periodic_advertising_sync_established_v2_event(rp0->Status,
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	f893 c000 	ldrb.w	ip, [r3]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800af34:	fa1f fe83 	uxth.w	lr, r3
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	f893 8003 	ldrb.w	r8, [r3, #3]
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f893 9004 	ldrb.w	r9, [r3, #4]
                                                        rp0->Sync_Handle,
                                                        rp0->Advertising_SID,
                                                        rp0->Advertiser_Address_Type,
                                                        rp0->Advertiser_Address,
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	3305      	adds	r3, #5
 800af48:	603b      	str	r3, [r7, #0]
  hci_le_periodic_advertising_sync_established_v2_event(rp0->Status,
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	7ad2      	ldrb	r2, [r2, #11]
 800af4e:	68b9      	ldr	r1, [r7, #8]
 800af50:	8989      	ldrh	r1, [r1, #12]
 800af52:	b289      	uxth	r1, r1
 800af54:	68b8      	ldr	r0, [r7, #8]
 800af56:	7b80      	ldrb	r0, [r0, #14]
 800af58:	68bc      	ldr	r4, [r7, #8]
 800af5a:	7be4      	ldrb	r4, [r4, #15]
 800af5c:	68bd      	ldr	r5, [r7, #8]
 800af5e:	7c2d      	ldrb	r5, [r5, #16]
 800af60:	68be      	ldr	r6, [r7, #8]
 800af62:	7c76      	ldrb	r6, [r6, #17]
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	7c9b      	ldrb	r3, [r3, #18]
 800af68:	9307      	str	r3, [sp, #28]
 800af6a:	9606      	str	r6, [sp, #24]
 800af6c:	9505      	str	r5, [sp, #20]
 800af6e:	9404      	str	r4, [sp, #16]
 800af70:	9003      	str	r0, [sp, #12]
 800af72:	9102      	str	r1, [sp, #8]
 800af74:	9201      	str	r2, [sp, #4]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	464b      	mov	r3, r9
 800af7c:	4642      	mov	r2, r8
 800af7e:	4671      	mov	r1, lr
 800af80:	4660      	mov	r0, ip
 800af82:	f000 ff07 	bl	800bd94 <hci_le_periodic_advertising_sync_established_v2_event>
                                                        rp0->Num_Subevents,
                                                        rp0->Subevent_Interval,
                                                        rp0->Response_Slot_Delay,
                                                        rp0->Response_Slot_Spacing);

  return status;
 800af86:	7bfb      	ldrb	r3, [r7, #15]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3714      	adds	r7, #20
 800af8c:	46bd      	mov	sp, r7
 800af8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800af92 <hci_le_periodic_advertising_report_v2_event_process>:
 * @param Data Data received from a Periodic Advertising packet
 * @retval None
 */

tBleStatus hci_le_periodic_advertising_report_v2_event_process(uint8_t *buffer_in)
{
 800af92:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af94:	b08b      	sub	sp, #44	@ 0x2c
 800af96:	af06      	add	r7, sp, #24
 800af98:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800af9a:	2300      	movs	r3, #0
 800af9c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_periodic_advertising_report_v2_event_rp0 *rp0 = (hci_le_periodic_advertising_report_v2_event_rp0 *)buffer_in;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	60bb      	str	r3, [r7, #8]
  hci_le_periodic_advertising_report_v2_event(rp0->Sync_Handle,
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	b29d      	uxth	r5, r3
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	f993 6002 	ldrsb.w	r6, [r3, #2]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	f993 c003 	ldrsb.w	ip, [r3, #3]
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	f893 e004 	ldrb.w	lr, [r3, #4]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	79d2      	ldrb	r2, [r2, #7]
 800afc6:	68b9      	ldr	r1, [r7, #8]
 800afc8:	7a09      	ldrb	r1, [r1, #8]
 800afca:	68b8      	ldr	r0, [r7, #8]
 800afcc:	7a40      	ldrb	r0, [r0, #9]
                                              rp0->CTE_Type,
                                              rp0->Periodic_Event_Counter,
                                              rp0->Subevent,
                                              rp0->Data_Status,
                                              rp0->Data_Length,
                                              rp0->Data);
 800afce:	68bc      	ldr	r4, [r7, #8]
 800afd0:	340a      	adds	r4, #10
  hci_le_periodic_advertising_report_v2_event(rp0->Sync_Handle,
 800afd2:	9404      	str	r4, [sp, #16]
 800afd4:	9003      	str	r0, [sp, #12]
 800afd6:	9102      	str	r1, [sp, #8]
 800afd8:	9201      	str	r2, [sp, #4]
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	4673      	mov	r3, lr
 800afde:	4662      	mov	r2, ip
 800afe0:	4631      	mov	r1, r6
 800afe2:	4628      	mov	r0, r5
 800afe4:	f000 feea 	bl	800bdbc <hci_le_periodic_advertising_report_v2_event>

  return status;
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aff2 <hci_le_periodic_advertising_sync_transfer_received_v2_event_process>:
 *        - 0x02 (0.250 ms)  ... 0xFF (31.875 ms) 
 * @retval None
 */

tBleStatus hci_le_periodic_advertising_sync_transfer_received_v2_event_process(uint8_t *buffer_in)
{
 800aff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff6:	b090      	sub	sp, #64	@ 0x40
 800aff8:	af0a      	add	r7, sp, #40	@ 0x28
 800affa:	60f8      	str	r0, [r7, #12]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800affc:	2300      	movs	r3, #0
 800affe:	75fb      	strb	r3, [r7, #23]
  /* Input params */
  hci_le_periodic_advertising_sync_transfer_received_v2_event_rp0 *rp0 = (hci_le_periodic_advertising_sync_transfer_received_v2_event_rp0 *)buffer_in;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	613b      	str	r3, [r7, #16]
  hci_le_periodic_advertising_sync_transfer_received_v2_event(rp0->Status,
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	f893 c000 	ldrb.w	ip, [r3]
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b010:	fa1f fe83 	uxth.w	lr, r3
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b01a:	fa1f f883 	uxth.w	r8, r3
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b024:	fa1f f983 	uxth.w	r9, r3
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	79da      	ldrb	r2, [r3, #7]
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	7a19      	ldrb	r1, [r3, #8]
                                                              rp0->Connection_Handle,
                                                              rp0->Service_data,
                                                              rp0->Sync_Handle,
                                                              rp0->Advertising_SID,
                                                              rp0->Advertiser_Address_Type,
                                                              rp0->Advertiser_Address,
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	f103 0009 	add.w	r0, r3, #9
  hci_le_periodic_advertising_sync_transfer_received_v2_event(rp0->Status,
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	7bdc      	ldrb	r4, [r3, #15]
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	8a1b      	ldrh	r3, [r3, #16]
 800b03e:	b29d      	uxth	r5, r3
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	7c9e      	ldrb	r6, [r3, #18]
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	7cdb      	ldrb	r3, [r3, #19]
 800b048:	60bb      	str	r3, [r7, #8]
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	7d1b      	ldrb	r3, [r3, #20]
 800b04e:	607b      	str	r3, [r7, #4]
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	f893 a015 	ldrb.w	sl, [r3, #21]
 800b056:	4653      	mov	r3, sl
 800b058:	603b      	str	r3, [r7, #0]
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	7d9b      	ldrb	r3, [r3, #22]
 800b05e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	9308      	str	r3, [sp, #32]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	9307      	str	r3, [sp, #28]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	9306      	str	r3, [sp, #24]
 800b06c:	9605      	str	r6, [sp, #20]
 800b06e:	9504      	str	r5, [sp, #16]
 800b070:	9403      	str	r4, [sp, #12]
 800b072:	9002      	str	r0, [sp, #8]
 800b074:	9101      	str	r1, [sp, #4]
 800b076:	9200      	str	r2, [sp, #0]
 800b078:	464b      	mov	r3, r9
 800b07a:	4642      	mov	r2, r8
 800b07c:	4671      	mov	r1, lr
 800b07e:	4660      	mov	r0, ip
 800b080:	f000 feb0 	bl	800bde4 <hci_le_periodic_advertising_sync_transfer_received_v2_event>
                                                              rp0->Num_Subevents,
                                                              rp0->Subevent_Interval,
                                                              rp0->Response_Slot_Delay,
                                                              rp0->Response_Slot_Spacing);

  return status;
 800b084:	7dfb      	ldrb	r3, [r7, #23]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b090 <hci_le_periodic_advertising_subevent_data_request_event_process>:
 *        - 0x01 ... 0x80
 * @retval None
 */

tBleStatus hci_le_periodic_advertising_subevent_data_request_event_process(uint8_t *buffer_in)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800b098:	2300      	movs	r3, #0
 800b09a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_periodic_advertising_subevent_data_request_event_rp0 *rp0 = (hci_le_periodic_advertising_subevent_data_request_event_rp0 *)buffer_in;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	60bb      	str	r3, [r7, #8]
  hci_le_periodic_advertising_subevent_data_request_event(rp0->Advertising_Handle,
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	7818      	ldrb	r0, [r3, #0]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	7859      	ldrb	r1, [r3, #1]
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	789b      	ldrb	r3, [r3, #2]
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	f000 fead 	bl	800be0c <hci_le_periodic_advertising_subevent_data_request_event>
                                                          rp0->Subevent_Start,
                                                          rp0->Subevent_Data_Count);

  return status;
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3710      	adds	r7, #16
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <hci_le_periodic_advertising_response_report_event_process>:
 * @param Periodic_Advertising_Response See @ref Periodic_Advertising_Response_t
 * @retval None
 */

tBleStatus hci_le_periodic_advertising_response_report_event_process(uint8_t *buffer_in)
{
 800b0bc:	b590      	push	{r4, r7, lr}
 800b0be:	b0a7      	sub	sp, #156	@ 0x9c
 800b0c0:	af02      	add	r7, sp, #8
 800b0c2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  /* Input params */
  hci_le_periodic_advertising_response_report_event_rp0 *rp0 = (hci_le_periodic_advertising_response_report_event_rp0 *)buffer_in;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint8_t size = 4;
 800b0d0:	2304      	movs	r3, #4
 800b0d2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  int i;
  Periodic_Advertising_Response_t Periodic_Advertising_Response[HCI_MAX_PAYLOAD_SIZE/sizeof(Periodic_Advertising_Response_t)];
  for (i = 0; i < rp0->Num_Responses; i++) {
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b0dc:	e0c5      	b.n	800b26a <hci_le_periodic_advertising_response_report_event_process+0x1ae>
    Periodic_Advertising_Response[i].TX_Power = rp0->Periodic_Advertising_Response[i].TX_Power;
 800b0de:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800b0e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	00db      	lsls	r3, r3, #3
 800b0ea:	1a9b      	subs	r3, r3, r2
 800b0ec:	440b      	add	r3, r1
 800b0ee:	3304      	adds	r3, #4
 800b0f0:	f993 1000 	ldrsb.w	r1, [r3]
 800b0f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	005b      	lsls	r3, r3, #1
 800b0fc:	4413      	add	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	3390      	adds	r3, #144	@ 0x90
 800b102:	443b      	add	r3, r7
 800b104:	3b88      	subs	r3, #136	@ 0x88
 800b106:	460a      	mov	r2, r1
 800b108:	701a      	strb	r2, [r3, #0]
    size += 1;
 800b10a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b10e:	3301      	adds	r3, #1
 800b110:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Periodic_Advertising_Response[i].RSSI = rp0->Periodic_Advertising_Response[i].RSSI;
 800b114:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800b118:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b11c:	4613      	mov	r3, r2
 800b11e:	00db      	lsls	r3, r3, #3
 800b120:	1a9b      	subs	r3, r3, r2
 800b122:	440b      	add	r3, r1
 800b124:	3305      	adds	r3, #5
 800b126:	f993 1000 	ldrsb.w	r1, [r3]
 800b12a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b12e:	4613      	mov	r3, r2
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	4413      	add	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	3390      	adds	r3, #144	@ 0x90
 800b138:	443b      	add	r3, r7
 800b13a:	3b87      	subs	r3, #135	@ 0x87
 800b13c:	460a      	mov	r2, r1
 800b13e:	701a      	strb	r2, [r3, #0]
    size += 1;
 800b140:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b144:	3301      	adds	r3, #1
 800b146:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Periodic_Advertising_Response[i].CTE_Type = rp0->Periodic_Advertising_Response[i].CTE_Type;
 800b14a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800b14e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b152:	4613      	mov	r3, r2
 800b154:	00db      	lsls	r3, r3, #3
 800b156:	1a9b      	subs	r3, r3, r2
 800b158:	440b      	add	r3, r1
 800b15a:	3306      	adds	r3, #6
 800b15c:	7819      	ldrb	r1, [r3, #0]
 800b15e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b162:	4613      	mov	r3, r2
 800b164:	005b      	lsls	r3, r3, #1
 800b166:	4413      	add	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	3390      	adds	r3, #144	@ 0x90
 800b16c:	443b      	add	r3, r7
 800b16e:	3b86      	subs	r3, #134	@ 0x86
 800b170:	460a      	mov	r2, r1
 800b172:	701a      	strb	r2, [r3, #0]
    size += 1;
 800b174:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b178:	3301      	adds	r3, #1
 800b17a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Periodic_Advertising_Response[i].Response_Slot = rp0->Periodic_Advertising_Response[i].Response_Slot;
 800b17e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800b182:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b186:	4613      	mov	r3, r2
 800b188:	00db      	lsls	r3, r3, #3
 800b18a:	1a9b      	subs	r3, r3, r2
 800b18c:	440b      	add	r3, r1
 800b18e:	3307      	adds	r3, #7
 800b190:	7819      	ldrb	r1, [r3, #0]
 800b192:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b196:	4613      	mov	r3, r2
 800b198:	005b      	lsls	r3, r3, #1
 800b19a:	4413      	add	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	3390      	adds	r3, #144	@ 0x90
 800b1a0:	443b      	add	r3, r7
 800b1a2:	3b85      	subs	r3, #133	@ 0x85
 800b1a4:	460a      	mov	r2, r1
 800b1a6:	701a      	strb	r2, [r3, #0]
    size += 1;
 800b1a8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Periodic_Advertising_Response[i].Data_Status = rp0->Periodic_Advertising_Response[i].Data_Status;
 800b1b2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800b1b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	00db      	lsls	r3, r3, #3
 800b1be:	1a9b      	subs	r3, r3, r2
 800b1c0:	440b      	add	r3, r1
 800b1c2:	3308      	adds	r3, #8
 800b1c4:	7819      	ldrb	r1, [r3, #0]
 800b1c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	005b      	lsls	r3, r3, #1
 800b1ce:	4413      	add	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	3390      	adds	r3, #144	@ 0x90
 800b1d4:	443b      	add	r3, r7
 800b1d6:	3b84      	subs	r3, #132	@ 0x84
 800b1d8:	460a      	mov	r2, r1
 800b1da:	701a      	strb	r2, [r3, #0]
    size += 1;
 800b1dc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Periodic_Advertising_Response[i].Data_Length = rp0->Periodic_Advertising_Response[i].Data_Length;
 800b1e6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800b1ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	00db      	lsls	r3, r3, #3
 800b1f2:	1a9b      	subs	r3, r3, r2
 800b1f4:	440b      	add	r3, r1
 800b1f6:	3309      	adds	r3, #9
 800b1f8:	7819      	ldrb	r1, [r3, #0]
 800b1fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b1fe:	4613      	mov	r3, r2
 800b200:	005b      	lsls	r3, r3, #1
 800b202:	4413      	add	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	3390      	adds	r3, #144	@ 0x90
 800b208:	443b      	add	r3, r7
 800b20a:	3b83      	subs	r3, #131	@ 0x83
 800b20c:	460a      	mov	r2, r1
 800b20e:	701a      	strb	r2, [r3, #0]
    size += 1;
 800b210:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b214:	3301      	adds	r3, #1
 800b216:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Periodic_Advertising_Response[i].Data = rp0->Periodic_Advertising_Response[i].Data;
 800b21a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b21e:	4613      	mov	r3, r2
 800b220:	00db      	lsls	r3, r3, #3
 800b222:	1a9b      	subs	r3, r3, r2
 800b224:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b228:	4413      	add	r3, r2
 800b22a:	f103 010a 	add.w	r1, r3, #10
 800b22e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b232:	4613      	mov	r3, r2
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	4413      	add	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	3390      	adds	r3, #144	@ 0x90
 800b23c:	443b      	add	r3, r7
 800b23e:	3b80      	subs	r3, #128	@ 0x80
 800b240:	6019      	str	r1, [r3, #0]
    size += rp0->Periodic_Advertising_Response[i].Data_Length;
 800b242:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800b246:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b24a:	4613      	mov	r3, r2
 800b24c:	00db      	lsls	r3, r3, #3
 800b24e:	1a9b      	subs	r3, r3, r2
 800b250:	440b      	add	r3, r1
 800b252:	3309      	adds	r3, #9
 800b254:	781a      	ldrb	r2, [r3, #0]
 800b256:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b25a:	4413      	add	r3, r2
 800b25c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  for (i = 0; i < rp0->Num_Responses; i++) {
 800b260:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b264:	3301      	adds	r3, #1
 800b266:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b26a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b26e:	78db      	ldrb	r3, [r3, #3]
 800b270:	461a      	mov	r2, r3
 800b272:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b276:	4293      	cmp	r3, r2
 800b278:	f6ff af31 	blt.w	800b0de <hci_le_periodic_advertising_response_report_event_process+0x22>
  }
  hci_le_periodic_advertising_response_report_event(rp0->Advertising_Handle,
 800b27c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b280:	7818      	ldrb	r0, [r3, #0]
 800b282:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b286:	7859      	ldrb	r1, [r3, #1]
 800b288:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b28c:	789a      	ldrb	r2, [r3, #2]
 800b28e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b292:	78dc      	ldrb	r4, [r3, #3]
 800b294:	f107 0308 	add.w	r3, r7, #8
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	4623      	mov	r3, r4
 800b29c:	f000 fdc5 	bl	800be2a <hci_le_periodic_advertising_response_report_event>
                                                    rp0->Subevent,
                                                    rp0->Tx_Status,
                                                    rp0->Num_Responses,
                                                    Periodic_Advertising_Response);

  return status;
 800b2a0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3794      	adds	r7, #148	@ 0x94
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd90      	pop	{r4, r7, pc}

0800b2ac <hci_le_enhanced_connection_complete_v2_event_process>:
 *        - 0xFFFF: No Sync_Handle
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_v2_event_process(uint8_t *buffer_in)
{
 800b2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b0:	b090      	sub	sp, #64	@ 0x40
 800b2b2:	af0a      	add	r7, sp, #40	@ 0x28
 800b2b4:	60f8      	str	r0, [r7, #12]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	75fb      	strb	r3, [r7, #23]
  /* Input params */
  hci_le_enhanced_connection_complete_v2_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_v2_event_rp0 *)buffer_in;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	613b      	str	r3, [r7, #16]
  hci_le_enhanced_connection_complete_v2_event(rp0->Status,
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f893 c000 	ldrb.w	ip, [r3]
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b2ca:	fa1f fe83 	uxth.w	lr, r3
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	f893 8003 	ldrb.w	r8, [r3, #3]
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	f893 9004 	ldrb.w	r9, [r3, #4]
                                               rp0->Connection_Handle,
                                               rp0->Role,
                                               rp0->Peer_Address_Type,
                                               rp0->Peer_Address,
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	3305      	adds	r3, #5
 800b2de:	60bb      	str	r3, [r7, #8]
                                               rp0->Local_Resolvable_Private_Address,
 800b2e0:	693a      	ldr	r2, [r7, #16]
 800b2e2:	320b      	adds	r2, #11
                                               rp0->Peer_Resolvable_Private_Address,
 800b2e4:	6939      	ldr	r1, [r7, #16]
 800b2e6:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_v2_event(rp0->Status,
 800b2e8:	6938      	ldr	r0, [r7, #16]
 800b2ea:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 800b2ee:	b280      	uxth	r0, r0
 800b2f0:	693c      	ldr	r4, [r7, #16]
 800b2f2:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800b2f6:	b2a4      	uxth	r4, r4
 800b2f8:	693d      	ldr	r5, [r7, #16]
 800b2fa:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 800b2fe:	b2ad      	uxth	r5, r5
 800b300:	693e      	ldr	r6, [r7, #16]
 800b302:	7f76      	ldrb	r6, [r6, #29]
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	7f9b      	ldrb	r3, [r3, #30]
 800b308:	607b      	str	r3, [r7, #4]
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	f8b3 a01f 	ldrh.w	sl, [r3, #31]
 800b310:	fa1f f38a 	uxth.w	r3, sl
 800b314:	9308      	str	r3, [sp, #32]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	9307      	str	r3, [sp, #28]
 800b31a:	9606      	str	r6, [sp, #24]
 800b31c:	9505      	str	r5, [sp, #20]
 800b31e:	9404      	str	r4, [sp, #16]
 800b320:	9003      	str	r0, [sp, #12]
 800b322:	9102      	str	r1, [sp, #8]
 800b324:	9201      	str	r2, [sp, #4]
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	464b      	mov	r3, r9
 800b32c:	4642      	mov	r2, r8
 800b32e:	4671      	mov	r1, lr
 800b330:	4660      	mov	r0, ip
 800b332:	f000 fd8e 	bl	800be52 <hci_le_enhanced_connection_complete_v2_event>
                                               rp0->Supervision_Timeout,
                                               rp0->Central_Clock_Accuracy,
                                               rp0->Advertising_Handle,
                                               rp0->Sync_Handle);

  return status;
 800b336:	7dfb      	ldrb	r3, [r7, #23]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b342 <hci_encryption_change_event>:
 * @retval None
 */
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 800b342:	b480      	push	{r7}
 800b344:	b083      	sub	sp, #12
 800b346:	af00      	add	r7, sp, #0
 800b348:	4603      	mov	r3, r0
 800b34a:	71fb      	strb	r3, [r7, #7]
 800b34c:	460b      	mov	r3, r1
 800b34e:	80bb      	strh	r3, [r7, #4]
 800b350:	4613      	mov	r3, r2
 800b352:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_encryption_change_event\r\n");
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800b360:	b490      	push	{r4, r7}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	4604      	mov	r4, r0
 800b368:	4608      	mov	r0, r1
 800b36a:	4611      	mov	r1, r2
 800b36c:	461a      	mov	r2, r3
 800b36e:	4623      	mov	r3, r4
 800b370:	71fb      	strb	r3, [r7, #7]
 800b372:	4603      	mov	r3, r0
 800b374:	80bb      	strh	r3, [r7, #4]
 800b376:	460b      	mov	r3, r1
 800b378:	71bb      	strb	r3, [r7, #6]
 800b37a:	4613      	mov	r3, r2
 800b37c:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800b37e:	bf00      	nop
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bc90      	pop	{r4, r7}
 800b386:	4770      	bx	lr

0800b388 <hci_hardware_error_event>:
 *        - 0x04: Late Radio ISR
 *        - 0x05: TX Error
 * @retval None
 */
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_hardware_error_event\r\n");
}
 800b392:	bf00      	nop
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <hci_number_of_completed_packets_event>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b083      	sub	sp, #12
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	6039      	str	r1, [r7, #0]
 800b3a8:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800b3aa:	bf00      	nop
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <hci_data_buffer_overflow_event>:
 *        Values:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	4603      	mov	r3, r0
 800b3be:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 800b3c0:	bf00      	nop
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <hci_encryption_key_refresh_complete_event>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	460a      	mov	r2, r1
 800b3d6:	71fb      	strb	r3, [r7, #7]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <hci_authenticated_payload_timeout_expired_event>:
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */
WEAK_FUNCTION(void hci_authenticated_payload_timeout_expired_event(uint16_t Connection_Handle))
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_authenticated_payload_timeout_expired_event\r\n");
}
 800b3f2:	bf00      	nop
 800b3f4:	370c      	adds	r7, #12
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <aci_blue_initialized_event>:
 *        - 0x08: System reset due to crash
 *        - 0x09: System reset due to ECC error
 * @retval None
 */
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800b3fe:	b480      	push	{r7}
 800b400:	b083      	sub	sp, #12
 800b402:	af00      	add	r7, sp, #0
 800b404:	4603      	mov	r3, r0
 800b406:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_blue_initialized_event\r\n");
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60b9      	str	r1, [r7, #8]
 800b41c:	607a      	str	r2, [r7, #4]
 800b41e:	603b      	str	r3, [r7, #0]
 800b420:	4603      	mov	r3, r0
 800b422:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_blue_crash_info_event\r\n");
}
 800b424:	bf00      	nop
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <aci_hal_end_of_radio_activity_event>:
 * @retval None
 */
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	4603      	mov	r3, r0
 800b438:	603a      	str	r2, [r7, #0]
 800b43a:	71fb      	strb	r3, [r7, #7]
 800b43c:	460b      	mov	r3, r1
 800b43e:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <aci_hal_fw_error_event>:
 * @retval None
 */
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	4603      	mov	r3, r0
 800b454:	603a      	str	r2, [r7, #0]
 800b456:	71fb      	strb	r3, [r7, #7]
 800b458:	460b      	mov	r3, r1
 800b45a:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_hal_fw_error_event\r\n");
}
 800b45c:	bf00      	nop
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <aci_hal_le_test_end_event>:
 *        specified with aci_hal_transmitter_test_packets() has been reached.
 * @param Number_Of_Packets The number of test packets actually transmitted.
 * @retval None
 */
WEAK_FUNCTION(void aci_hal_le_test_end_event(uint16_t Number_Of_Packets))
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	4603      	mov	r3, r0
 800b470:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_hal_le_test_end_event\r\n");
}
 800b472:	bf00      	nop
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <aci_gap_limited_discoverable_event>:
 * @brief This event is generated by the controller when the limited
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800b47e:	b480      	push	{r7}
 800b480:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800b482:	bf00      	nop
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <aci_gap_passkey_req_event>:
 *        - 0x01: PASSKEY_INPUT
 * @retval None
 */
WEAK_FUNCTION(void aci_gap_passkey_req_event(uint16_t Connection_Handle,
                               uint8_t Display_Input))
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	4603      	mov	r3, r0
 800b494:	460a      	mov	r2, r1
 800b496:	80fb      	strh	r3, [r7, #6]
 800b498:	4613      	mov	r3, r2
 800b49a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gap_passkey_req_event\r\n");
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <aci_gap_proc_complete_event>:
 */
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	603b      	str	r3, [r7, #0]
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	71fb      	strb	r3, [r7, #7]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	71bb      	strb	r3, [r7, #6]
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gap_proc_complete_event\r\n");
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <aci_gap_addr_not_resolved_event>:
 * @param Connection_Handle Connection handle for which the private address
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 800b4d2:	bf00      	nop
 800b4d4:	370c      	adds	r7, #12
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr

0800b4de <aci_gap_numeric_comparison_value_event>:
 * @param Numeric_Value
 * @retval None
 */
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b083      	sub	sp, #12
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	6039      	str	r1, [r7, #0]
 800b4e8:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 800b4ea:	bf00      	nop
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <aci_gap_keypress_notification_event>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b083      	sub	sp, #12
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	460a      	mov	r2, r1
 800b500:	80fb      	strh	r3, [r7, #6]
 800b502:	4613      	mov	r3, r2
 800b504:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800b506:	bf00      	nop
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <aci_gap_pairing_event>:
 * @retval None
 */

WEAK_FUNCTION(void aci_gap_pairing_event(uint16_t Connection_Handle,
                                      uint8_t Bonded))
{
 800b512:	b480      	push	{r7}
 800b514:	b083      	sub	sp, #12
 800b516:	af00      	add	r7, sp, #0
 800b518:	4603      	mov	r3, r0
 800b51a:	460a      	mov	r2, r1
 800b51c:	80fb      	strh	r3, [r7, #6]
 800b51e:	4613      	mov	r3, r2
 800b520:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gap_pairing_event\r\n");
}
 800b522:	bf00      	nop
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <aci_l2cap_connection_update_resp_event>:
 * @param Result
 * @retval None
 */
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800b52e:	b480      	push	{r7}
 800b530:	b083      	sub	sp, #12
 800b532:	af00      	add	r7, sp, #0
 800b534:	4603      	mov	r3, r0
 800b536:	460a      	mov	r2, r1
 800b538:	80fb      	strh	r3, [r7, #6]
 800b53a:	4613      	mov	r3, r2
 800b53c:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 800b53e:	bf00      	nop
 800b540:	370c      	adds	r7, #12
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <aci_l2cap_proc_timeout_event>:
 * @retval None
 */
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800b54a:	b480      	push	{r7}
 800b54c:	b083      	sub	sp, #12
 800b54e:	af00      	add	r7, sp, #0
 800b550:	4603      	mov	r3, r0
 800b552:	603a      	str	r2, [r7, #0]
 800b554:	80fb      	strh	r3, [r7, #6]
 800b556:	460b      	mov	r3, r1
 800b558:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 800b55a:	bf00      	nop
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Connection_Interval_Min,
                                           uint16_t Connection_Interval_Max,
                                           uint16_t Max_Latency,
                                           uint16_t Timeout_Multiplier))
{
 800b566:	b490      	push	{r4, r7}
 800b568:	b082      	sub	sp, #8
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	4604      	mov	r4, r0
 800b56e:	4608      	mov	r0, r1
 800b570:	4611      	mov	r1, r2
 800b572:	461a      	mov	r2, r3
 800b574:	4623      	mov	r3, r4
 800b576:	80fb      	strh	r3, [r7, #6]
 800b578:	4603      	mov	r3, r0
 800b57a:	717b      	strb	r3, [r7, #5]
 800b57c:	460b      	mov	r3, r1
 800b57e:	807b      	strh	r3, [r7, #2]
 800b580:	4613      	mov	r3, r2
 800b582:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800b584:	bf00      	nop
 800b586:	3708      	adds	r7, #8
 800b588:	46bd      	mov	sp, r7
 800b58a:	bc90      	pop	{r4, r7}
 800b58c:	4770      	bx	lr

0800b58e <aci_l2cap_cos_disconnection_complete_event>:
 * @param CID The local channel endpoint that identifies the L2CAP channel.
 * @retval None
 */
WEAK_FUNCTION(void aci_l2cap_cos_disconnection_complete_event(uint16_t Connection_Handle,
                                                uint16_t CID))
{
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	4603      	mov	r3, r0
 800b596:	460a      	mov	r2, r1
 800b598:	80fb      	strh	r3, [r7, #6]
 800b59a:	4613      	mov	r3, r2
 800b59c:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_l2cap_cos_disconnection_complete_event\r\n");
}
 800b59e:	bf00      	nop
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <aci_l2cap_cos_flow_control_credit_event>:
 */
WEAK_FUNCTION(void aci_l2cap_cos_flow_control_credit_event(uint16_t Connection_Handle,
                                             uint16_t CID,
                                             uint16_t TX_Credits,
                                             uint16_t TX_Credit_Balance))
{
 800b5aa:	b490      	push	{r4, r7}
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	4608      	mov	r0, r1
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	4623      	mov	r3, r4
 800b5ba:	80fb      	strh	r3, [r7, #6]
 800b5bc:	4603      	mov	r3, r0
 800b5be:	80bb      	strh	r3, [r7, #4]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	807b      	strh	r3, [r7, #2]
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_l2cap_cos_flow_control_credit_event\r\n");
}
 800b5c8:	bf00      	nop
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bc90      	pop	{r4, r7}
 800b5d0:	4770      	bx	lr

0800b5d2 <aci_l2cap_cos_sdu_data_tx_event>:
 */
WEAK_FUNCTION(void aci_l2cap_cos_sdu_data_tx_event(uint16_t Connection_Handle,
                                     uint16_t CID,
                                     uint16_t SDU_Length,
                                     uint16_t TX_Credit_Balance))
{
 800b5d2:	b490      	push	{r4, r7}
 800b5d4:	b082      	sub	sp, #8
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	4604      	mov	r4, r0
 800b5da:	4608      	mov	r0, r1
 800b5dc:	4611      	mov	r1, r2
 800b5de:	461a      	mov	r2, r3
 800b5e0:	4623      	mov	r3, r4
 800b5e2:	80fb      	strh	r3, [r7, #6]
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	80bb      	strh	r3, [r7, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	807b      	strh	r3, [r7, #2]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_l2cap_cos_sdu_data_tx_event\r\n");
}
 800b5f0:	bf00      	nop
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bc90      	pop	{r4, r7}
 800b5f8:	4770      	bx	lr

0800b5fa <aci_l2cap_cos_sdu_data_rx_nwk_event>:
WEAK_FUNCTION(void aci_l2cap_cos_sdu_data_rx_nwk_event(uint16_t Connection_Handle,
                                         uint16_t CID,
                                         uint16_t RX_Credit_Balance,
                                         uint16_t SDU_Length,
                                         uint8_t SDU_Data[]))
{
 800b5fa:	b490      	push	{r4, r7}
 800b5fc:	b082      	sub	sp, #8
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	4604      	mov	r4, r0
 800b602:	4608      	mov	r0, r1
 800b604:	4611      	mov	r1, r2
 800b606:	461a      	mov	r2, r3
 800b608:	4623      	mov	r3, r4
 800b60a:	80fb      	strh	r3, [r7, #6]
 800b60c:	4603      	mov	r3, r0
 800b60e:	80bb      	strh	r3, [r7, #4]
 800b610:	460b      	mov	r3, r1
 800b612:	807b      	strh	r3, [r7, #2]
 800b614:	4613      	mov	r3, r2
 800b616:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_l2cap_cos_sdu_data_rx_nwk_event\r\n");
}
 800b618:	bf00      	nop
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bc90      	pop	{r4, r7}
 800b620:	4770      	bx	lr

0800b622 <aci_l2cap_cos_reconfiguration_event>:
                                         uint8_t Identifier,
                                         uint16_t Peer_MTU,
                                         uint16_t Peer_MPS,
                                         uint8_t CID_Count,
                                         uint16_t Local_CID[]))
{
 800b622:	b490      	push	{r4, r7}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	4604      	mov	r4, r0
 800b62a:	4608      	mov	r0, r1
 800b62c:	4611      	mov	r1, r2
 800b62e:	461a      	mov	r2, r3
 800b630:	4623      	mov	r3, r4
 800b632:	80fb      	strh	r3, [r7, #6]
 800b634:	4603      	mov	r3, r0
 800b636:	717b      	strb	r3, [r7, #5]
 800b638:	460b      	mov	r3, r1
 800b63a:	807b      	strh	r3, [r7, #2]
 800b63c:	4613      	mov	r3, r2
 800b63e:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_l2cap_cos_reconfiguration_event\r\n");
}
 800b640:	bf00      	nop
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bc90      	pop	{r4, r7}
 800b648:	4770      	bx	lr

0800b64a <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800b64a:	b490      	push	{r4, r7}
 800b64c:	b082      	sub	sp, #8
 800b64e:	af00      	add	r7, sp, #0
 800b650:	4604      	mov	r4, r0
 800b652:	4608      	mov	r0, r1
 800b654:	4611      	mov	r1, r2
 800b656:	461a      	mov	r2, r3
 800b658:	4623      	mov	r3, r4
 800b65a:	80fb      	strh	r3, [r7, #6]
 800b65c:	4603      	mov	r3, r0
 800b65e:	717b      	strb	r3, [r7, #5]
 800b660:	460b      	mov	r3, r1
 800b662:	807b      	strh	r3, [r7, #2]
 800b664:	4613      	mov	r3, r2
 800b666:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800b668:	bf00      	nop
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bc90      	pop	{r4, r7}
 800b670:	4770      	bx	lr

0800b672 <aci_l2cap_cos_connection_req_event>:
                                                        uint16_t SPSM,
                                                        uint16_t Peer_MTU,
                                                        uint16_t Peer_MPS,
                                                        uint16_t Initial_Credits,
                                                        uint8_t CID_Count))
{
 800b672:	b490      	push	{r4, r7}
 800b674:	b082      	sub	sp, #8
 800b676:	af00      	add	r7, sp, #0
 800b678:	4604      	mov	r4, r0
 800b67a:	4608      	mov	r0, r1
 800b67c:	4611      	mov	r1, r2
 800b67e:	461a      	mov	r2, r3
 800b680:	4623      	mov	r3, r4
 800b682:	80fb      	strh	r3, [r7, #6]
 800b684:	4603      	mov	r3, r0
 800b686:	717b      	strb	r3, [r7, #5]
 800b688:	460b      	mov	r3, r1
 800b68a:	713b      	strb	r3, [r7, #4]
 800b68c:	4613      	mov	r3, r2
 800b68e:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_l2cap_cos_connection_req_event\r\n");
}
 800b690:	bf00      	nop
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bc90      	pop	{r4, r7}
 800b698:	4770      	bx	lr

0800b69a <aci_l2cap_cos_connection_resp_event>:
                                              uint16_t Peer_MPS,
                                              uint16_t Initial_Credits,
                                              uint16_t Result,
                                              uint8_t CID_Count,
                                              uint16_t CID[]))
{
 800b69a:	b490      	push	{r4, r7}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	4608      	mov	r0, r1
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	4623      	mov	r3, r4
 800b6aa:	80fb      	strh	r3, [r7, #6]
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	717b      	strb	r3, [r7, #5]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	807b      	strh	r3, [r7, #2]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_l2cap_cos_connection_resp_event\r\n");
}
 800b6b8:	bf00      	nop
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bc90      	pop	{r4, r7}
 800b6c0:	4770      	bx	lr

0800b6c2 <aci_gatt_proc_timeout_event>:
 *        enhanced ATT bearer.
 * @retval None
 */
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle,
                                 uint16_t CID))
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	460a      	mov	r2, r1
 800b6cc:	80fb      	strh	r3, [r7, #6]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 800b6d2:	bf00      	nop
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <aci_att_exchange_mtu_resp_event>:
 *        minimum of the Client Rx MTU and the Server Rx MTU.
 * @retval None
 */
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t MTU))
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	460a      	mov	r2, r1
 800b6e8:	80fb      	strh	r3, [r7, #6]
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 800b6ee:	bf00      	nop
 800b6f0:	370c      	adds	r7, #12
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <aci_att_clt_find_info_resp_event>:
WEAK_FUNCTION(void aci_att_clt_find_info_resp_event(uint16_t Connection_Handle,
                                      uint16_t CID,
                                      uint8_t Format,
                                      uint16_t Event_Data_Length,
                                      uint8_t Handle_UUID_Pair[]))
{
 800b6fa:	b490      	push	{r4, r7}
 800b6fc:	b082      	sub	sp, #8
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	4604      	mov	r4, r0
 800b702:	4608      	mov	r0, r1
 800b704:	4611      	mov	r1, r2
 800b706:	461a      	mov	r2, r3
 800b708:	4623      	mov	r3, r4
 800b70a:	80fb      	strh	r3, [r7, #6]
 800b70c:	4603      	mov	r3, r0
 800b70e:	80bb      	strh	r3, [r7, #4]
 800b710:	460b      	mov	r3, r1
 800b712:	70fb      	strb	r3, [r7, #3]
 800b714:	4613      	mov	r3, r2
 800b716:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_att_clt_find_info_resp_event\r\n");
}
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bc90      	pop	{r4, r7}
 800b720:	4770      	bx	lr

0800b722 <aci_att_clt_find_by_type_value_resp_event>:
 */
WEAK_FUNCTION(void aci_att_clt_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                               uint16_t CID,
                                               uint8_t Num_of_Handle_Pair,
                                               Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800b722:	b480      	push	{r7}
 800b724:	b085      	sub	sp, #20
 800b726:	af00      	add	r7, sp, #0
 800b728:	607b      	str	r3, [r7, #4]
 800b72a:	4603      	mov	r3, r0
 800b72c:	81fb      	strh	r3, [r7, #14]
 800b72e:	460b      	mov	r3, r1
 800b730:	81bb      	strh	r3, [r7, #12]
 800b732:	4613      	mov	r3, r2
 800b734:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_att_clt_find_by_type_value_resp_event\r\n");
}
 800b736:	bf00      	nop
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <aci_att_clt_read_by_type_resp_event>:
WEAK_FUNCTION(void aci_att_clt_read_by_type_resp_event(uint16_t Connection_Handle,
                                         uint16_t CID,
                                         uint8_t Handle_Value_Pair_Length,
                                         uint16_t Data_Length,
                                         uint8_t Handle_Value_Pair_Data[]))
{
 800b742:	b490      	push	{r4, r7}
 800b744:	b082      	sub	sp, #8
 800b746:	af00      	add	r7, sp, #0
 800b748:	4604      	mov	r4, r0
 800b74a:	4608      	mov	r0, r1
 800b74c:	4611      	mov	r1, r2
 800b74e:	461a      	mov	r2, r3
 800b750:	4623      	mov	r3, r4
 800b752:	80fb      	strh	r3, [r7, #6]
 800b754:	4603      	mov	r3, r0
 800b756:	80bb      	strh	r3, [r7, #4]
 800b758:	460b      	mov	r3, r1
 800b75a:	70fb      	strb	r3, [r7, #3]
 800b75c:	4613      	mov	r3, r2
 800b75e:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_att_clt_read_by_type_resp_event\r\n");
}
 800b760:	bf00      	nop
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bc90      	pop	{r4, r7}
 800b768:	4770      	bx	lr

0800b76a <aci_att_clt_read_resp_event>:
 */
WEAK_FUNCTION(void aci_att_clt_read_resp_event(uint16_t Connection_Handle,
                                 uint16_t CID,
                                 uint16_t Event_Data_Length,
                                 uint8_t Attribute_Value[]))
{
 800b76a:	b480      	push	{r7}
 800b76c:	b085      	sub	sp, #20
 800b76e:	af00      	add	r7, sp, #0
 800b770:	607b      	str	r3, [r7, #4]
 800b772:	4603      	mov	r3, r0
 800b774:	81fb      	strh	r3, [r7, #14]
 800b776:	460b      	mov	r3, r1
 800b778:	81bb      	strh	r3, [r7, #12]
 800b77a:	4613      	mov	r3, r2
 800b77c:	817b      	strh	r3, [r7, #10]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_att_clt_read_resp_event\r\n");
}
 800b77e:	bf00      	nop
 800b780:	3714      	adds	r7, #20
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <aci_att_clt_read_blob_resp_event>:
 */
WEAK_FUNCTION(void aci_att_clt_read_blob_resp_event(uint16_t Connection_Handle,
                                      uint16_t CID,
                                      uint16_t Event_Data_Length,
                                      uint8_t Attribute_Value[]))
{
 800b78a:	b480      	push	{r7}
 800b78c:	b085      	sub	sp, #20
 800b78e:	af00      	add	r7, sp, #0
 800b790:	607b      	str	r3, [r7, #4]
 800b792:	4603      	mov	r3, r0
 800b794:	81fb      	strh	r3, [r7, #14]
 800b796:	460b      	mov	r3, r1
 800b798:	81bb      	strh	r3, [r7, #12]
 800b79a:	4613      	mov	r3, r2
 800b79c:	817b      	strh	r3, [r7, #10]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_att_clt_read_blob_resp_event\r\n");
}
 800b79e:	bf00      	nop
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <aci_att_clt_read_multiple_resp_event>:
 */
WEAK_FUNCTION(void aci_att_clt_read_multiple_resp_event(uint16_t Connection_Handle,
                                          uint16_t CID,
                                          uint16_t Event_Data_Length,
                                          uint8_t Set_Of_Values[]))
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b085      	sub	sp, #20
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	607b      	str	r3, [r7, #4]
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	81fb      	strh	r3, [r7, #14]
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	81bb      	strh	r3, [r7, #12]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	817b      	strh	r3, [r7, #10]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_att_clt_read_multiple_resp_event\r\n");
}
 800b7be:	bf00      	nop
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <aci_att_clt_read_by_group_type_resp_event>:
WEAK_FUNCTION(void aci_att_clt_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                               uint16_t CID,
                                               uint8_t Attribute_Data_Length,
                                               uint16_t Data_Length,
                                               uint8_t Attribute_Data_List[]))
{
 800b7ca:	b490      	push	{r4, r7}
 800b7cc:	b082      	sub	sp, #8
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	4623      	mov	r3, r4
 800b7da:	80fb      	strh	r3, [r7, #6]
 800b7dc:	4603      	mov	r3, r0
 800b7de:	80bb      	strh	r3, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_att_clt_read_by_group_type_resp_event\r\n");
}
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bc90      	pop	{r4, r7}
 800b7f0:	4770      	bx	lr

0800b7f2 <aci_att_clt_prepare_write_resp_event>:
                                          uint16_t CID,
                                          uint16_t Attribute_Handle,
                                          uint16_t Offset,
                                          uint16_t Part_Attribute_Value_Length,
                                          uint8_t Part_Attribute_Value[]))
{
 800b7f2:	b490      	push	{r4, r7}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	4608      	mov	r0, r1
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	461a      	mov	r2, r3
 800b800:	4623      	mov	r3, r4
 800b802:	80fb      	strh	r3, [r7, #6]
 800b804:	4603      	mov	r3, r0
 800b806:	80bb      	strh	r3, [r7, #4]
 800b808:	460b      	mov	r3, r1
 800b80a:	807b      	strh	r3, [r7, #2]
 800b80c:	4613      	mov	r3, r2
 800b80e:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_att_clt_prepare_write_resp_event\r\n");
}
 800b810:	bf00      	nop
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bc90      	pop	{r4, r7}
 800b818:	4770      	bx	lr

0800b81a <aci_att_clt_exec_write_resp_event>:
 *        enhanced ATT bearer.
 * @retval None
 */
WEAK_FUNCTION(void aci_att_clt_exec_write_resp_event(uint16_t Connection_Handle,
                                       uint16_t CID))
{
 800b81a:	b480      	push	{r7}
 800b81c:	b083      	sub	sp, #12
 800b81e:	af00      	add	r7, sp, #0
 800b820:	4603      	mov	r3, r0
 800b822:	460a      	mov	r2, r1
 800b824:	80fb      	strh	r3, [r7, #6]
 800b826:	4613      	mov	r3, r2
 800b828:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_att_clt_exec_write_resp_event\r\n");
}
 800b82a:	bf00      	nop
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <aci_gatt_clt_indication_event>:
WEAK_FUNCTION(void aci_gatt_clt_indication_event(uint16_t Connection_Handle,
                                   uint16_t CID,
                                   uint16_t Attribute_Handle,
                                   uint16_t Attribute_Value_Length,
                                   uint8_t Attribute_Value[]))
{
 800b836:	b490      	push	{r4, r7}
 800b838:	b082      	sub	sp, #8
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	4604      	mov	r4, r0
 800b83e:	4608      	mov	r0, r1
 800b840:	4611      	mov	r1, r2
 800b842:	461a      	mov	r2, r3
 800b844:	4623      	mov	r3, r4
 800b846:	80fb      	strh	r3, [r7, #6]
 800b848:	4603      	mov	r3, r0
 800b84a:	80bb      	strh	r3, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	807b      	strh	r3, [r7, #2]
 800b850:	4613      	mov	r3, r2
 800b852:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gatt_clt_indication_event\r\n");
}
 800b854:	bf00      	nop
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bc90      	pop	{r4, r7}
 800b85c:	4770      	bx	lr

0800b85e <aci_gatt_clt_notification_event>:
WEAK_FUNCTION(void aci_gatt_clt_notification_event(uint16_t Connection_Handle,
                                     uint16_t CID,
                                     uint16_t Attribute_Handle,
                                     uint16_t Attribute_Value_Length,
                                     uint8_t Attribute_Value[]))
{
 800b85e:	b490      	push	{r4, r7}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	4604      	mov	r4, r0
 800b866:	4608      	mov	r0, r1
 800b868:	4611      	mov	r1, r2
 800b86a:	461a      	mov	r2, r3
 800b86c:	4623      	mov	r3, r4
 800b86e:	80fb      	strh	r3, [r7, #6]
 800b870:	4603      	mov	r3, r0
 800b872:	80bb      	strh	r3, [r7, #4]
 800b874:	460b      	mov	r3, r1
 800b876:	807b      	strh	r3, [r7, #2]
 800b878:	4613      	mov	r3, r2
 800b87a:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gatt_clt_notification_event\r\n");
}
 800b87c:	bf00      	nop
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bc90      	pop	{r4, r7}
 800b884:	4770      	bx	lr

0800b886 <aci_gatt_clt_proc_complete_event>:
 * @retval None
 */
WEAK_FUNCTION(void aci_gatt_clt_proc_complete_event(uint16_t Connection_Handle,
                                      uint16_t CID,
                                      uint8_t Error_Code))
{
 800b886:	b480      	push	{r7}
 800b888:	b083      	sub	sp, #12
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	4603      	mov	r3, r0
 800b88e:	80fb      	strh	r3, [r7, #6]
 800b890:	460b      	mov	r3, r1
 800b892:	80bb      	strh	r3, [r7, #4]
 800b894:	4613      	mov	r3, r2
 800b896:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gatt_clt_proc_complete_event\r\n");
}
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <aci_gatt_clt_error_resp_event>:
WEAK_FUNCTION(void aci_gatt_clt_error_resp_event(uint16_t Connection_Handle,
                                   uint16_t CID,
                                   uint8_t Req_Opcode,
                                   uint16_t Attribute_Handle,
                                   uint8_t Error_Code))
{
 800b8a4:	b490      	push	{r4, r7}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	4623      	mov	r3, r4
 800b8b4:	80fb      	strh	r3, [r7, #6]
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	80bb      	strh	r3, [r7, #4]
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	70fb      	strb	r3, [r7, #3]
 800b8be:	4613      	mov	r3, r2
 800b8c0:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gatt_clt_error_resp_event\r\n");
}
 800b8c2:	bf00      	nop
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bc90      	pop	{r4, r7}
 800b8ca:	4770      	bx	lr

0800b8cc <aci_gatt_clt_disc_read_char_by_uuid_resp_event>:
WEAK_FUNCTION(void aci_gatt_clt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                    uint16_t CID,
                                                    uint16_t Attribute_Handle,
                                                    uint8_t Attribute_Value_Length,
                                                    uint8_t Attribute_Value[]))
{
 800b8cc:	b490      	push	{r4, r7}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	4608      	mov	r0, r1
 800b8d6:	4611      	mov	r1, r2
 800b8d8:	461a      	mov	r2, r3
 800b8da:	4623      	mov	r3, r4
 800b8dc:	80fb      	strh	r3, [r7, #6]
 800b8de:	4603      	mov	r3, r0
 800b8e0:	80bb      	strh	r3, [r7, #4]
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	807b      	strh	r3, [r7, #2]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gatt_clt_disc_read_char_by_uuid_resp_event\r\n");
}
 800b8ea:	bf00      	nop
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bc90      	pop	{r4, r7}
 800b8f2:	4770      	bx	lr

0800b8f4 <aci_gatt_tx_pool_available_event>:
 * @param Available_Buffers Not used.
 * @retval None
 */
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	460a      	mov	r2, r1
 800b8fe:	80fb      	strh	r3, [r7, #6]
 800b900:	4613      	mov	r3, r2
 800b902:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <aci_gatt_srv_confirmation_event>:
 *        enhanced ATT bearer.
 * @retval None
 */
WEAK_FUNCTION(void aci_gatt_srv_confirmation_event(uint16_t Connection_Handle,
                                     uint16_t CID))
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	4603      	mov	r3, r0
 800b918:	460a      	mov	r2, r1
 800b91a:	80fb      	strh	r3, [r7, #6]
 800b91c:	4613      	mov	r3, r2
 800b91e:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gatt_srv_confirmation_event\r\n");
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <aci_att_srv_exec_write_req_event>:
 * @retval None
 */
WEAK_FUNCTION(void aci_att_srv_exec_write_req_event(uint16_t Connection_Handle,
                                      uint16_t CID,
                                      uint8_t Flags))
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	80fb      	strh	r3, [r7, #6]
 800b936:	460b      	mov	r3, r1
 800b938:	80bb      	strh	r3, [r7, #4]
 800b93a:	4613      	mov	r3, r2
 800b93c:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_att_srv_exec_write_req_event\r\n");
}
 800b93e:	bf00      	nop
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <aci_gatt_srv_authorize_nwk_event>:
                                      uint16_t Attr_Handle,
                                      uint8_t Operation_Type,
                                      uint16_t Attr_Val_Offset,
                                      uint8_t Data_Length,
                                      uint8_t Data[]))
{
 800b94a:	b490      	push	{r4, r7}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	4604      	mov	r4, r0
 800b952:	4608      	mov	r0, r1
 800b954:	4611      	mov	r1, r2
 800b956:	461a      	mov	r2, r3
 800b958:	4623      	mov	r3, r4
 800b95a:	80fb      	strh	r3, [r7, #6]
 800b95c:	4603      	mov	r3, r0
 800b95e:	80bb      	strh	r3, [r7, #4]
 800b960:	460b      	mov	r3, r1
 800b962:	807b      	strh	r3, [r7, #2]
 800b964:	4613      	mov	r3, r2
 800b966:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_gatt_srv_authorize_nwk_event\r\n");
}
 800b968:	bf00      	nop
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bc90      	pop	{r4, r7}
 800b970:	4770      	bx	lr

0800b972 <aci_att_clt_read_multiple_var_len_resp_event>:
 */
WEAK_FUNCTION(void aci_att_clt_read_multiple_var_len_resp_event(uint16_t Connection_Handle,
                                                  uint16_t CID,
                                                  uint16_t Event_Data_Length,
                                                  uint8_t Set_Of_Values[]))
{
 800b972:	b480      	push	{r7}
 800b974:	b085      	sub	sp, #20
 800b976:	af00      	add	r7, sp, #0
 800b978:	607b      	str	r3, [r7, #4]
 800b97a:	4603      	mov	r3, r0
 800b97c:	81fb      	strh	r3, [r7, #14]
 800b97e:	460b      	mov	r3, r1
 800b980:	81bb      	strh	r3, [r7, #12]
 800b982:	4613      	mov	r3, r2
 800b984:	817b      	strh	r3, [r7, #10]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("aci_att_clt_read_multiple_var_len_resp_event\r\n");
}
 800b986:	bf00      	nop
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <hci_le_advertising_report_event>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 800b992:	b480      	push	{r7}
 800b994:	b083      	sub	sp, #12
 800b996:	af00      	add	r7, sp, #0
 800b998:	4603      	mov	r3, r0
 800b99a:	6039      	str	r1, [r7, #0]
 800b99c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_advertising_report_event\r\n");
}
 800b99e:	bf00      	nop
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Connection_Interval,
                                             uint16_t Peripheral_Latency,
                                             uint16_t Supervision_Timeout))
{
 800b9aa:	b490      	push	{r4, r7}
 800b9ac:	b082      	sub	sp, #8
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	4608      	mov	r0, r1
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	4623      	mov	r3, r4
 800b9ba:	71fb      	strb	r3, [r7, #7]
 800b9bc:	4603      	mov	r3, r0
 800b9be:	80bb      	strh	r3, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	807b      	strh	r3, [r7, #2]
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 800b9c8:	bf00      	nop
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bc90      	pop	{r4, r7}
 800b9d0:	4770      	bx	lr

0800b9d2 <hci_le_read_remote_features_complete_event>:
 * @retval None
 */
WEAK_FUNCTION(void hci_le_read_remote_features_complete_event(uint8_t Status,
                                                uint16_t Connection_Handle,
                                                uint8_t LE_Features[8]))
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	b083      	sub	sp, #12
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	4603      	mov	r3, r0
 800b9da:	603a      	str	r2, [r7, #0]
 800b9dc:	71fb      	strb	r3, [r7, #7]
 800b9de:	460b      	mov	r3, r1
 800b9e0:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800b9e2:	bf00      	nop
 800b9e4:	370c      	adds	r7, #12
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <hci_le_long_term_key_request_event>:
 * @retval None
 */
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	6039      	str	r1, [r7, #0]
 800b9f8:	80fb      	strh	r3, [r7, #6]
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800b9fe:	bf00      	nop
 800ba00:	370c      	adds	r7, #12
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 800ba0a:	b490      	push	{r4, r7}
 800ba0c:	b082      	sub	sp, #8
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	4604      	mov	r4, r0
 800ba12:	4608      	mov	r0, r1
 800ba14:	4611      	mov	r1, r2
 800ba16:	461a      	mov	r2, r3
 800ba18:	4623      	mov	r3, r4
 800ba1a:	80fb      	strh	r3, [r7, #6]
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	80bb      	strh	r3, [r7, #4]
 800ba20:	460b      	mov	r3, r1
 800ba22:	807b      	strh	r3, [r7, #2]
 800ba24:	4613      	mov	r3, r2
 800ba26:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_data_length_change_event\r\n");
}
 800ba28:	bf00      	nop
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bc90      	pop	{r4, r7}
 800ba30:	4770      	bx	lr

0800ba32 <hci_le_read_local_p256_public_key_complete_event>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	4603      	mov	r3, r0
 800ba3a:	6039      	str	r1, [r7, #0]
 800ba3c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 800ba3e:	bf00      	nop
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <hci_le_generate_dhkey_complete_event>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b083      	sub	sp, #12
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	4603      	mov	r3, r0
 800ba52:	6039      	str	r1, [r7, #0]
 800ba54:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 800ba56:	bf00      	nop
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <hci_le_directed_advertising_report_event>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */
WEAK_FUNCTION(void hci_le_directed_advertising_report_event(uint8_t Num_Reports,
                                              Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	4603      	mov	r3, r0
 800ba6a:	6039      	str	r1, [r7, #0]
 800ba6c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 800ba6e:	bf00      	nop
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <hci_le_phy_update_complete_event>:
 */
WEAK_FUNCTION(void hci_le_phy_update_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t TX_PHY,
                                      uint8_t RX_PHY))
{
 800ba7a:	b490      	push	{r4, r7}
 800ba7c:	b082      	sub	sp, #8
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	4604      	mov	r4, r0
 800ba82:	4608      	mov	r0, r1
 800ba84:	4611      	mov	r1, r2
 800ba86:	461a      	mov	r2, r3
 800ba88:	4623      	mov	r3, r4
 800ba8a:	71fb      	strb	r3, [r7, #7]
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	80bb      	strh	r3, [r7, #4]
 800ba90:	460b      	mov	r3, r1
 800ba92:	71bb      	strb	r3, [r7, #6]
 800ba94:	4613      	mov	r3, r2
 800ba96:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_phy_update_complete_event\r\n");
}
 800ba98:	bf00      	nop
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bc90      	pop	{r4, r7}
 800baa0:	4770      	bx	lr

0800baa2 <hci_le_extended_advertising_report_event>:
 * @param Extended_Advertising_Report See @ref Extended_Advertising_Report_t
 * @retval None
 */
WEAK_FUNCTION(void hci_le_extended_advertising_report_event(uint8_t Num_Reports,
                                              Extended_Advertising_Report_t Extended_Advertising_Report[]))
{
 800baa2:	b480      	push	{r7}
 800baa4:	b083      	sub	sp, #12
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	4603      	mov	r3, r0
 800baaa:	6039      	str	r1, [r7, #0]
 800baac:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_extended_advertising_report_event\r\n");
}
 800baae:	bf00      	nop
 800bab0:	370c      	adds	r7, #12
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <hci_le_periodic_advertising_sync_established_event>:
                                                        uint8_t Advertiser_Address_Type,
                                                        uint8_t Advertiser_Address[6],
                                                        uint8_t Advertiser_PHY,
                                                        uint16_t Periodic_Advertising_Interval,
                                                        uint8_t Advertiser_Clock_Accuracy))
{
 800baba:	b490      	push	{r4, r7}
 800babc:	b082      	sub	sp, #8
 800babe:	af00      	add	r7, sp, #0
 800bac0:	4604      	mov	r4, r0
 800bac2:	4608      	mov	r0, r1
 800bac4:	4611      	mov	r1, r2
 800bac6:	461a      	mov	r2, r3
 800bac8:	4623      	mov	r3, r4
 800baca:	71fb      	strb	r3, [r7, #7]
 800bacc:	4603      	mov	r3, r0
 800bace:	80bb      	strh	r3, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	71bb      	strb	r3, [r7, #6]
 800bad4:	4613      	mov	r3, r2
 800bad6:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_periodic_advertising_sync_established_event\r\n");
}
 800bad8:	bf00      	nop
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bc90      	pop	{r4, r7}
 800bae0:	4770      	bx	lr

0800bae2 <hci_le_periodic_advertising_report_event>:
                                              int8_t RSSI,
                                              uint8_t CTE_Type,
                                              uint8_t Data_Status,
                                              uint8_t Data_Length,
                                              uint8_t Data[]))
{
 800bae2:	b490      	push	{r4, r7}
 800bae4:	b082      	sub	sp, #8
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	4604      	mov	r4, r0
 800baea:	4608      	mov	r0, r1
 800baec:	4611      	mov	r1, r2
 800baee:	461a      	mov	r2, r3
 800baf0:	4623      	mov	r3, r4
 800baf2:	80fb      	strh	r3, [r7, #6]
 800baf4:	4603      	mov	r3, r0
 800baf6:	717b      	strb	r3, [r7, #5]
 800baf8:	460b      	mov	r3, r1
 800bafa:	713b      	strb	r3, [r7, #4]
 800bafc:	4613      	mov	r3, r2
 800bafe:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_periodic_advertising_report_event\r\n");
}
 800bb00:	bf00      	nop
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bc90      	pop	{r4, r7}
 800bb08:	4770      	bx	lr

0800bb0a <hci_le_periodic_advertising_sync_lost_event>:
 *        Values:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */
WEAK_FUNCTION(void hci_le_periodic_advertising_sync_lost_event(uint16_t Sync_Handle))
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b083      	sub	sp, #12
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	4603      	mov	r3, r0
 800bb12:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_periodic_advertising_sync_lost_event\r\n");
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <hci_le_scan_timeout_event>:
 *        the duration has expired. This event shall only be generated if
 *        scanning was enabled using the LE Set Extended Scan Enable command.
 * @retval None
 */
WEAK_FUNCTION(void hci_le_scan_timeout_event(void))
{
 800bb20:	b480      	push	{r7}
 800bb22:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_scan_timeout_event\r\n");
}
 800bb24:	bf00      	nop
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <hci_le_advertising_set_terminated_event>:
 */
WEAK_FUNCTION(void hci_le_advertising_set_terminated_event(uint8_t Status,
                                             uint8_t Advertising_Handle,
                                             uint16_t Connection_Handle,
                                             uint8_t Num_Completed_Extended_Advertising_Events))
{
 800bb2e:	b490      	push	{r4, r7}
 800bb30:	b082      	sub	sp, #8
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	4604      	mov	r4, r0
 800bb36:	4608      	mov	r0, r1
 800bb38:	4611      	mov	r1, r2
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	4623      	mov	r3, r4
 800bb3e:	71fb      	strb	r3, [r7, #7]
 800bb40:	4603      	mov	r3, r0
 800bb42:	71bb      	strb	r3, [r7, #6]
 800bb44:	460b      	mov	r3, r1
 800bb46:	80bb      	strh	r3, [r7, #4]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_advertising_set_terminated_event\r\n");
}
 800bb4c:	bf00      	nop
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bc90      	pop	{r4, r7}
 800bb54:	4770      	bx	lr

0800bb56 <hci_le_scan_request_received_event>:
 * @retval None
 */
WEAK_FUNCTION(void hci_le_scan_request_received_event(uint8_t Advertising_Handle,
                                        uint8_t Scanner_Address_Type,
                                        uint8_t Scanner_Address[6]))
{
 800bb56:	b480      	push	{r7}
 800bb58:	b083      	sub	sp, #12
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	603a      	str	r2, [r7, #0]
 800bb60:	71fb      	strb	r3, [r7, #7]
 800bb62:	460b      	mov	r3, r1
 800bb64:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_scan_request_received_event\r\n");
}
 800bb66:	bf00      	nop
 800bb68:	370c      	adds	r7, #12
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr

0800bb72 <hci_le_channel_selection_algorithm_event>:
 *        - 0x02 ... 0xFF: Reserved for future use
 * @retval None
 */
WEAK_FUNCTION(void hci_le_channel_selection_algorithm_event(uint16_t Connection_Handle,
                                              uint8_t Channel_Selection_Algorithm))
{
 800bb72:	b480      	push	{r7}
 800bb74:	b083      	sub	sp, #12
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	4603      	mov	r3, r0
 800bb7a:	460a      	mov	r2, r1
 800bb7c:	80fb      	strh	r3, [r7, #6]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_channel_selection_algorithm_event\r\n");
}
 800bb82:	bf00      	nop
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr

0800bb8e <hci_le_connectionless_iq_report_event>:
                                           uint8_t Slot_Durations,
                                           uint8_t Packet_Status,
                                           uint16_t Periodic_Event_Counter,
                                           uint8_t Sample_Count,
                                           Samples_t Samples[]))
{
 800bb8e:	b490      	push	{r4, r7}
 800bb90:	b082      	sub	sp, #8
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	4604      	mov	r4, r0
 800bb96:	4608      	mov	r0, r1
 800bb98:	4611      	mov	r1, r2
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	4623      	mov	r3, r4
 800bb9e:	80fb      	strh	r3, [r7, #6]
 800bba0:	4603      	mov	r3, r0
 800bba2:	717b      	strb	r3, [r7, #5]
 800bba4:	460b      	mov	r3, r1
 800bba6:	807b      	strh	r3, [r7, #2]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_connectionless_iq_report_event\r\n");
}
 800bbac:	bf00      	nop
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bc90      	pop	{r4, r7}
 800bbb4:	4770      	bx	lr

0800bbb6 <hci_le_connection_iq_report_event>:
                                       uint8_t Slot_Durations,
                                       uint8_t Packet_Status,
                                       uint16_t Connection_Event_Counter,
                                       uint8_t Sample_Count,
                                       Samples_t Samples[]))
{
 800bbb6:	b490      	push	{r4, r7}
 800bbb8:	b082      	sub	sp, #8
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	4608      	mov	r0, r1
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	4623      	mov	r3, r4
 800bbc6:	80fb      	strh	r3, [r7, #6]
 800bbc8:	4603      	mov	r3, r0
 800bbca:	717b      	strb	r3, [r7, #5]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	713b      	strb	r3, [r7, #4]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_connection_iq_report_event\r\n");
}
 800bbd4:	bf00      	nop
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bc90      	pop	{r4, r7}
 800bbdc:	4770      	bx	lr

0800bbde <hci_le_cte_request_failed_event>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */
WEAK_FUNCTION(void hci_le_cte_request_failed_event(uint8_t Status,
                                     uint16_t Connection_Handle))
{
 800bbde:	b480      	push	{r7}
 800bbe0:	b083      	sub	sp, #12
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	460a      	mov	r2, r1
 800bbe8:	71fb      	strb	r3, [r7, #7]
 800bbea:	4613      	mov	r3, r2
 800bbec:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_cte_request_failed_event\r\n");
}
 800bbee:	bf00      	nop
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <hci_le_periodic_advertising_sync_transfer_received_event>:
                                                              uint8_t Advertiser_Address_Type,
                                                              uint8_t Advertiser_Address[6],
                                                              uint8_t Advertiser_PHY,
                                                              uint16_t Periodic_Advertising_Interval,
                                                              uint8_t Advertiser_Clock_Accuracy))
{
 800bbfa:	b490      	push	{r4, r7}
 800bbfc:	b082      	sub	sp, #8
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	4604      	mov	r4, r0
 800bc02:	4608      	mov	r0, r1
 800bc04:	4611      	mov	r1, r2
 800bc06:	461a      	mov	r2, r3
 800bc08:	4623      	mov	r3, r4
 800bc0a:	71fb      	strb	r3, [r7, #7]
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	80bb      	strh	r3, [r7, #4]
 800bc10:	460b      	mov	r3, r1
 800bc12:	807b      	strh	r3, [r7, #2]
 800bc14:	4613      	mov	r3, r2
 800bc16:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_periodic_advertising_sync_transfer_received_event\r\n");
}
 800bc18:	bf00      	nop
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bc90      	pop	{r4, r7}
 800bc20:	4770      	bx	lr

0800bc22 <hci_le_cis_established_event>:
                                  uint8_t FT_C_To_P,
                                  uint8_t FT_P_To_C,
                                  uint16_t Max_PDU_C_To_P,
                                  uint16_t Max_PDU_P_To_C,
                                  uint16_t ISO_Interval))
{
 800bc22:	b480      	push	{r7}
 800bc24:	b085      	sub	sp, #20
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	60ba      	str	r2, [r7, #8]
 800bc2a:	607b      	str	r3, [r7, #4]
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	73fb      	strb	r3, [r7, #15]
 800bc30:	460b      	mov	r3, r1
 800bc32:	81bb      	strh	r3, [r7, #12]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_cis_established_event\r\n");
}
 800bc34:	bf00      	nop
 800bc36:	3714      	adds	r7, #20
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <hci_le_cis_request_event>:
 */
WEAK_FUNCTION(void hci_le_cis_request_event(uint16_t ACL_Connection_Handle,
                              uint16_t CIS_Connection_Handle,
                              uint8_t CIG_ID,
                              uint8_t CIS_ID))
{
 800bc40:	b490      	push	{r4, r7}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	4604      	mov	r4, r0
 800bc48:	4608      	mov	r0, r1
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	4623      	mov	r3, r4
 800bc50:	80fb      	strh	r3, [r7, #6]
 800bc52:	4603      	mov	r3, r0
 800bc54:	80bb      	strh	r3, [r7, #4]
 800bc56:	460b      	mov	r3, r1
 800bc58:	70fb      	strb	r3, [r7, #3]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	70bb      	strb	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_cis_request_event\r\n");
}
 800bc5e:	bf00      	nop
 800bc60:	3708      	adds	r7, #8
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bc90      	pop	{r4, r7}
 800bc66:	4770      	bx	lr

0800bc68 <hci_le_create_big_complete_event>:
                                      uint8_t IRC,
                                      uint16_t Max_PDU,
                                      uint16_t ISO_Interval,
                                      uint8_t Num_BIS,
                                      uint16_t Connection_Handle[]))
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60ba      	str	r2, [r7, #8]
 800bc70:	607b      	str	r3, [r7, #4]
 800bc72:	4603      	mov	r3, r0
 800bc74:	73fb      	strb	r3, [r7, #15]
 800bc76:	460b      	mov	r3, r1
 800bc78:	73bb      	strb	r3, [r7, #14]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_create_big_complete_event\r\n");
}
 800bc7a:	bf00      	nop
 800bc7c:	3714      	adds	r7, #20
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <hci_le_terminate_big_complete_event>:
 * @param Reason Reason for termination. See Error Codes.
 * @retval None
 */
WEAK_FUNCTION(void hci_le_terminate_big_complete_event(uint8_t BIG_Handle,
                                         uint8_t Reason))
{
 800bc86:	b480      	push	{r7}
 800bc88:	b083      	sub	sp, #12
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	460a      	mov	r2, r1
 800bc90:	71fb      	strb	r3, [r7, #7]
 800bc92:	4613      	mov	r3, r2
 800bc94:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_terminate_big_complete_event\r\n");
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <hci_le_big_sync_established_event>:
                                       uint8_t IRC,
                                       uint16_t Max_PDU,
                                       uint16_t ISO_Interval,
                                       uint8_t Num_BIS,
                                       uint16_t Connection_Handle[]))
{
 800bca2:	b480      	push	{r7}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	603a      	str	r2, [r7, #0]
 800bcaa:	461a      	mov	r2, r3
 800bcac:	4603      	mov	r3, r0
 800bcae:	71fb      	strb	r3, [r7, #7]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	71bb      	strb	r3, [r7, #6]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_big_sync_established_event\r\n");
}
 800bcb8:	bf00      	nop
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <hci_le_big_sync_lost_event>:
 * @param Reason Reason for termination. See Error Codes.
 * @retval None
 */
WEAK_FUNCTION(void hci_le_big_sync_lost_event(uint8_t BIG_Handle,
                                uint8_t Reason))
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	4603      	mov	r3, r0
 800bccc:	460a      	mov	r2, r1
 800bcce:	71fb      	strb	r3, [r7, #7]
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_big_sync_lost_event\r\n");
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <hci_le_request_peer_sca_complete_event>:
 * @retval None
 */
WEAK_FUNCTION(void hci_le_request_peer_sca_complete_event(uint8_t Status,
                                            uint16_t Connection_Handle,
                                            uint8_t Peer_Clock_Accuracy))
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	4603      	mov	r3, r0
 800bce8:	71fb      	strb	r3, [r7, #7]
 800bcea:	460b      	mov	r3, r1
 800bcec:	80bb      	strh	r3, [r7, #4]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_request_peer_sca_complete_event\r\n");
}
 800bcf2:	bf00      	nop
 800bcf4:	370c      	adds	r7, #12
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr

0800bcfe <hci_le_path_loss_threshold_event>:
 * @retval None
 */
WEAK_FUNCTION(void hci_le_path_loss_threshold_event(uint16_t Connection_Handle,
                                      uint8_t Current_Path_Loss,
                                      uint8_t Zone_Entered))
{
 800bcfe:	b480      	push	{r7}
 800bd00:	b083      	sub	sp, #12
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	4603      	mov	r3, r0
 800bd06:	80fb      	strh	r3, [r7, #6]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	717b      	strb	r3, [r7, #5]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_path_loss_threshold_event\r\n");
}
 800bd10:	bf00      	nop
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <hci_le_transmit_power_reporting_event>:
                                           uint8_t Reason,
                                           uint8_t PHY,
                                           int8_t Transmit_Power_Level,
                                           uint8_t Transmit_Power_Level_Flag,
                                           int8_t Delta))
{
 800bd1c:	b490      	push	{r4, r7}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4604      	mov	r4, r0
 800bd24:	4608      	mov	r0, r1
 800bd26:	4611      	mov	r1, r2
 800bd28:	461a      	mov	r2, r3
 800bd2a:	4623      	mov	r3, r4
 800bd2c:	71fb      	strb	r3, [r7, #7]
 800bd2e:	4603      	mov	r3, r0
 800bd30:	80bb      	strh	r3, [r7, #4]
 800bd32:	460b      	mov	r3, r1
 800bd34:	71bb      	strb	r3, [r7, #6]
 800bd36:	4613      	mov	r3, r2
 800bd38:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_transmit_power_reporting_event\r\n");
}
 800bd3a:	bf00      	nop
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bc90      	pop	{r4, r7}
 800bd42:	4770      	bx	lr

0800bd44 <hci_le_biginfo_advertising_report_event>:
                                             uint8_t SDU_Interval[3],
                                             uint16_t Max_SDU,
                                             uint8_t PHY,
                                             uint8_t Framing,
                                             uint8_t Encryption))
{
 800bd44:	b490      	push	{r4, r7}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	4608      	mov	r0, r1
 800bd4e:	4611      	mov	r1, r2
 800bd50:	461a      	mov	r2, r3
 800bd52:	4623      	mov	r3, r4
 800bd54:	80fb      	strh	r3, [r7, #6]
 800bd56:	4603      	mov	r3, r0
 800bd58:	717b      	strb	r3, [r7, #5]
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	713b      	strb	r3, [r7, #4]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_biginfo_advertising_report_event\r\n");
}
 800bd62:	bf00      	nop
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bc90      	pop	{r4, r7}
 800bd6a:	4770      	bx	lr

0800bd6c <hci_le_subrate_change_event>:
                                 uint16_t Connection_Handle,
                                 uint16_t Subrate_Factor,
                                 uint16_t Peripheral_Latency,
                                 uint16_t Continuation_Number,
                                 uint16_t Supervision_Timeout))
{
 800bd6c:	b490      	push	{r4, r7}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4604      	mov	r4, r0
 800bd74:	4608      	mov	r0, r1
 800bd76:	4611      	mov	r1, r2
 800bd78:	461a      	mov	r2, r3
 800bd7a:	4623      	mov	r3, r4
 800bd7c:	71fb      	strb	r3, [r7, #7]
 800bd7e:	4603      	mov	r3, r0
 800bd80:	80bb      	strh	r3, [r7, #4]
 800bd82:	460b      	mov	r3, r1
 800bd84:	807b      	strh	r3, [r7, #2]
 800bd86:	4613      	mov	r3, r2
 800bd88:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_subrate_change_event\r\n");
}
 800bd8a:	bf00      	nop
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bc90      	pop	{r4, r7}
 800bd92:	4770      	bx	lr

0800bd94 <hci_le_periodic_advertising_sync_established_v2_event>:
                                                              uint8_t Advertiser_Clock_Accuracy,
                                                              uint8_t Num_Subevents,
                                                              uint8_t Subevent_Interval,
                                                              uint8_t Response_Slot_Delay,
                                                              uint8_t Response_Slot_Spacing))
{
 800bd94:	b490      	push	{r4, r7}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	4608      	mov	r0, r1
 800bd9e:	4611      	mov	r1, r2
 800bda0:	461a      	mov	r2, r3
 800bda2:	4623      	mov	r3, r4
 800bda4:	71fb      	strb	r3, [r7, #7]
 800bda6:	4603      	mov	r3, r0
 800bda8:	80bb      	strh	r3, [r7, #4]
 800bdaa:	460b      	mov	r3, r1
 800bdac:	71bb      	strb	r3, [r7, #6]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_periodic_advertising_sync_established_v2_event\r\n");
}
 800bdb2:	bf00      	nop
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bc90      	pop	{r4, r7}
 800bdba:	4770      	bx	lr

0800bdbc <hci_le_periodic_advertising_report_v2_event>:
                                                    uint16_t Periodic_Event_Counter,
                                                    uint8_t Subevent,
                                                    uint8_t Data_Status,
                                                    uint8_t Data_Length,
                                                    uint8_t Data[]))
{
 800bdbc:	b490      	push	{r4, r7}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	4608      	mov	r0, r1
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	461a      	mov	r2, r3
 800bdca:	4623      	mov	r3, r4
 800bdcc:	80fb      	strh	r3, [r7, #6]
 800bdce:	4603      	mov	r3, r0
 800bdd0:	717b      	strb	r3, [r7, #5]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	713b      	strb	r3, [r7, #4]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_periodic_advertising_report_v2_event\r\n");
}
 800bdda:	bf00      	nop
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bc90      	pop	{r4, r7}
 800bde2:	4770      	bx	lr

0800bde4 <hci_le_periodic_advertising_sync_transfer_received_v2_event>:
                                                                      uint8_t Advertiser_Clock_Accuracy,
                                                                      uint8_t Num_Subevents,
                                                                      uint8_t Subevent_Interval,
                                                                      uint8_t Response_Slot_Delay,
                                                                      uint8_t Response_Slot_Spacing))
{
 800bde4:	b490      	push	{r4, r7}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4604      	mov	r4, r0
 800bdec:	4608      	mov	r0, r1
 800bdee:	4611      	mov	r1, r2
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	4623      	mov	r3, r4
 800bdf4:	71fb      	strb	r3, [r7, #7]
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	80bb      	strh	r3, [r7, #4]
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	807b      	strh	r3, [r7, #2]
 800bdfe:	4613      	mov	r3, r2
 800be00:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_periodic_advertising_sync_transfer_received_v2_event\r\n");
}
 800be02:	bf00      	nop
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bc90      	pop	{r4, r7}
 800be0a:	4770      	bx	lr

0800be0c <hci_le_periodic_advertising_subevent_data_request_event>:
 */

WEAK_FUNCTION(void hci_le_periodic_advertising_subevent_data_request_event(uint8_t Advertising_Handle,
                                                                uint8_t Subevent_Start,
                                                                uint8_t Subevent_Data_Count))
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	71fb      	strb	r3, [r7, #7]
 800be16:	460b      	mov	r3, r1
 800be18:	71bb      	strb	r3, [r7, #6]
 800be1a:	4613      	mov	r3, r2
 800be1c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_periodic_advertising_subevent_data_request_event\r\n");
}
 800be1e:	bf00      	nop
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <hci_le_periodic_advertising_response_report_event>:
WEAK_FUNCTION(void hci_le_periodic_advertising_response_report_event(uint8_t Advertising_Handle,
                                                            uint8_t Subevent,
                                                            uint8_t Tx_Status,
                                                            uint8_t Num_Responses,
                                                            Periodic_Advertising_Response_t Periodic_Advertising_Response[]))
{
 800be2a:	b490      	push	{r4, r7}
 800be2c:	b082      	sub	sp, #8
 800be2e:	af00      	add	r7, sp, #0
 800be30:	4604      	mov	r4, r0
 800be32:	4608      	mov	r0, r1
 800be34:	4611      	mov	r1, r2
 800be36:	461a      	mov	r2, r3
 800be38:	4623      	mov	r3, r4
 800be3a:	71fb      	strb	r3, [r7, #7]
 800be3c:	4603      	mov	r3, r0
 800be3e:	71bb      	strb	r3, [r7, #6]
 800be40:	460b      	mov	r3, r1
 800be42:	717b      	strb	r3, [r7, #5]
 800be44:	4613      	mov	r3, r2
 800be46:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_periodic_advertising_response_report_event\r\n");
}
 800be48:	bf00      	nop
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bc90      	pop	{r4, r7}
 800be50:	4770      	bx	lr

0800be52 <hci_le_enhanced_connection_complete_v2_event>:
                                                  uint16_t Peripheral_Latency,
                                                  uint16_t Supervision_Timeout,
                                                  uint8_t Central_Clock_Accuracy,
                                                  uint8_t Advertising_Handle,
                                                  uint16_t Sync_Handle))
{
 800be52:	b490      	push	{r4, r7}
 800be54:	b082      	sub	sp, #8
 800be56:	af00      	add	r7, sp, #0
 800be58:	4604      	mov	r4, r0
 800be5a:	4608      	mov	r0, r1
 800be5c:	4611      	mov	r1, r2
 800be5e:	461a      	mov	r2, r3
 800be60:	4623      	mov	r3, r4
 800be62:	71fb      	strb	r3, [r7, #7]
 800be64:	4603      	mov	r3, r0
 800be66:	80bb      	strh	r3, [r7, #4]
 800be68:	460b      	mov	r3, r1
 800be6a:	71bb      	strb	r3, [r7, #6]
 800be6c:	4613      	mov	r3, r2
 800be6e:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  STM32WB_PRINTF("hci_le_enhanced_connection_complete_v2_event\r\n");
}
 800be70:	bf00      	nop
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bc90      	pop	{r4, r7}
 800be78:	4770      	bx	lr

0800be7a <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b088      	sub	sp, #32
 800be7e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800be80:	2300      	movs	r3, #0
 800be82:	70fb      	strb	r3, [r7, #3]
  STM32WB_memset(&rq, 0, sizeof(rq));
 800be84:	1d3b      	adds	r3, r7, #4
 800be86:	221c      	movs	r2, #28
 800be88:	2100      	movs	r1, #0
 800be8a:	4618      	mov	r0, r3
 800be8c:	f002 fe89 	bl	800eba2 <memset>
  rq.ogf = 0x03;
 800be90:	2303      	movs	r3, #3
 800be92:	80fb      	strh	r3, [r7, #6]
  rq.ocf = 0x003;
 800be94:	2303      	movs	r3, #3
 800be96:	813b      	strh	r3, [r7, #8]
  rq.rparam = &status;
 800be98:	1cfb      	adds	r3, r7, #3
 800be9a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800be9c:	2301      	movs	r3, #1
 800be9e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800bea0:	1d3b      	adds	r3, r7, #4
 800bea2:	2100      	movs	r1, #0
 800bea4:	4618      	mov	r0, r3
 800bea6:	f000 f963 	bl	800c170 <hci_send_req>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	da01      	bge.n	800beb4 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800beb0:	23ff      	movs	r3, #255	@ 0xff
 800beb2:	e005      	b.n	800bec0 <hci_reset+0x46>
  if (status) {
 800beb4:	78fb      	ldrb	r3, [r7, #3]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d001      	beq.n	800bebe <hci_reset+0x44>
    return status;
 800beba:	78fb      	ldrb	r3, [r7, #3]
 800bebc:	e000      	b.n	800bec0 <hci_reset+0x46>
  }
  return BLE_STATUS_SUCCESS;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3720      	adds	r7, #32
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b08e      	sub	sp, #56	@ 0x38
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
 800bed4:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  STM32WB_memset(&resp, 0, sizeof(resp));
 800bed6:	f107 0310 	add.w	r3, r7, #16
 800beda:	2209      	movs	r2, #9
 800bedc:	2100      	movs	r1, #0
 800bede:	4618      	mov	r0, r3
 800bee0:	f002 fe5f 	bl	800eba2 <memset>
  STM32WB_memset(&rq, 0, sizeof(rq));
 800bee4:	f107 031c 	add.w	r3, r7, #28
 800bee8:	221c      	movs	r2, #28
 800beea:	2100      	movs	r1, #0
 800beec:	4618      	mov	r0, r3
 800beee:	f002 fe58 	bl	800eba2 <memset>
  rq.ogf = 0x04;
 800bef2:	2304      	movs	r3, #4
 800bef4:	83fb      	strh	r3, [r7, #30]
  rq.ocf = 0x001;
 800bef6:	2301      	movs	r3, #1
 800bef8:	843b      	strh	r3, [r7, #32]
  rq.rparam = &resp;
 800befa:	f107 0310 	add.w	r3, r7, #16
 800befe:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = sizeof(resp);
 800bf00:	2309      	movs	r3, #9
 800bf02:	637b      	str	r3, [r7, #52]	@ 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 800bf04:	f107 031c 	add.w	r3, r7, #28
 800bf08:	2100      	movs	r1, #0
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 f930 	bl	800c170 <hci_send_req>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	da01      	bge.n	800bf1a <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 800bf16:	23ff      	movs	r3, #255	@ 0xff
 800bf18:	e018      	b.n	800bf4c <hci_read_local_version_information+0x84>
  if (resp.Status) {
 800bf1a:	7c3b      	ldrb	r3, [r7, #16]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d001      	beq.n	800bf24 <hci_read_local_version_information+0x5c>
    return resp.Status;
 800bf20:	7c3b      	ldrb	r3, [r7, #16]
 800bf22:	e013      	b.n	800bf4c <hci_read_local_version_information+0x84>
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 800bf24:	7c7a      	ldrb	r2, [r7, #17]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	701a      	strb	r2, [r3, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 800bf2a:	8a7a      	ldrh	r2, [r7, #18]
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 800bf30:	7d3a      	ldrb	r2, [r7, #20]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	701a      	strb	r2, [r3, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800bf36:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800bf40:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf48:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3738      	adds	r7, #56	@ 0x38
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <send_cmd>:
  * @param  param The HCI command parameters
  * @param  param If extended aci packet
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param, uint8_t ext_aci)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b0a6      	sub	sp, #152	@ 0x98
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	607b      	str	r3, [r7, #4]
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	81fb      	strh	r3, [r7, #14]
 800bf60:	460b      	mov	r3, r1
 800bf62:	81bb      	strh	r3, [r7, #12]
 800bf64:	4613      	mov	r3, r2
 800bf66:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];
  
  if (!ext_aci) {
 800bf68:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d130      	bne.n	800bfd2 <send_cmd+0x7e>
    hci_cmd_hdr hc;
    hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800bf70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bf74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf78:	b21a      	sxth	r2, r3
 800bf7a:	89fb      	ldrh	r3, [r7, #14]
 800bf7c:	029b      	lsls	r3, r3, #10
 800bf7e:	b21b      	sxth	r3, r3
 800bf80:	4313      	orrs	r3, r2
 800bf82:	b21b      	sxth	r3, r3
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	82bb      	strh	r3, [r7, #20]
    hc.plen = plen;
 800bf88:	7afb      	ldrb	r3, [r7, #11]
 800bf8a:	75bb      	strb	r3, [r7, #22]
    payload[0] = HCI_COMMAND_PKT;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	763b      	strb	r3, [r7, #24]
    STM32WB_memcpy(payload + 1, &hc, sizeof(hc));
 800bf90:	f107 0318 	add.w	r3, r7, #24
 800bf94:	3301      	adds	r3, #1
 800bf96:	461a      	mov	r2, r3
 800bf98:	f107 0314 	add.w	r3, r7, #20
 800bf9c:	8819      	ldrh	r1, [r3, #0]
 800bf9e:	789b      	ldrb	r3, [r3, #2]
 800bfa0:	8011      	strh	r1, [r2, #0]
 800bfa2:	7093      	strb	r3, [r2, #2]
    STM32WB_memcpy(payload + HCI_TYPE_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800bfa4:	f107 0318 	add.w	r3, r7, #24
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	7afa      	ldrb	r2, [r7, #11]
 800bfac:	6879      	ldr	r1, [r7, #4]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f002 fe73 	bl	800ec9a <memcpy>
    if (hciContext.io.Send)
 800bfb4:	4b1f      	ldr	r3, [pc, #124]	@ (800c034 <send_cmd+0xe0>)
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d036      	beq.n	800c02a <send_cmd+0xd6>
    {
      hciContext.io.Send (payload, HCI_TYPE_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800bfbc:	4b1d      	ldr	r3, [pc, #116]	@ (800c034 <send_cmd+0xe0>)
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	7afa      	ldrb	r2, [r7, #11]
 800bfc2:	b292      	uxth	r2, r2
 800bfc4:	3204      	adds	r2, #4
 800bfc6:	b291      	uxth	r1, r2
 800bfc8:	f107 0218 	add.w	r2, r7, #24
 800bfcc:	4610      	mov	r0, r2
 800bfce:	4798      	blx	r3
    {
      hciContext.io.Send (payload, HCI_TYPE_SIZE + HCI_COMMAND_EXT_HDR_SIZE + plen);
    }
  }

}
 800bfd0:	e02b      	b.n	800c02a <send_cmd+0xd6>
    hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800bfd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bfd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfda:	b21a      	sxth	r2, r3
 800bfdc:	89fb      	ldrh	r3, [r7, #14]
 800bfde:	029b      	lsls	r3, r3, #10
 800bfe0:	b21b      	sxth	r3, r3
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	b21b      	sxth	r3, r3
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	823b      	strh	r3, [r7, #16]
    hc.plen = plen;
 800bfea:	7afb      	ldrb	r3, [r7, #11]
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	827b      	strh	r3, [r7, #18]
    payload[0] = HCI_COMMAND_EXT_PKT;
 800bff0:	2381      	movs	r3, #129	@ 0x81
 800bff2:	763b      	strb	r3, [r7, #24]
    STM32WB_memcpy(payload + 1, &hc, sizeof(hc));
 800bff4:	f107 0318 	add.w	r3, r7, #24
 800bff8:	3301      	adds	r3, #1
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	601a      	str	r2, [r3, #0]
    STM32WB_memcpy(payload + HCI_TYPE_SIZE + HCI_COMMAND_EXT_HDR_SIZE, param, plen); 
 800bffe:	f107 0318 	add.w	r3, r7, #24
 800c002:	3305      	adds	r3, #5
 800c004:	7afa      	ldrb	r2, [r7, #11]
 800c006:	6879      	ldr	r1, [r7, #4]
 800c008:	4618      	mov	r0, r3
 800c00a:	f002 fe46 	bl	800ec9a <memcpy>
    if (hciContext.io.Send)
 800c00e:	4b09      	ldr	r3, [pc, #36]	@ (800c034 <send_cmd+0xe0>)
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d009      	beq.n	800c02a <send_cmd+0xd6>
      hciContext.io.Send (payload, HCI_TYPE_SIZE + HCI_COMMAND_EXT_HDR_SIZE + plen);
 800c016:	4b07      	ldr	r3, [pc, #28]	@ (800c034 <send_cmd+0xe0>)
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	7afa      	ldrb	r2, [r7, #11]
 800c01c:	b292      	uxth	r2, r2
 800c01e:	3205      	adds	r2, #5
 800c020:	b291      	uxth	r1, r2
 800c022:	f107 0218 	add.w	r2, r7, #24
 800c026:	4610      	mov	r0, r2
 800c028:	4798      	blx	r3
}
 800c02a:	bf00      	nop
 800c02c:	3798      	adds	r7, #152	@ 0x98
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	200006c8 	.word	0x200006c8

0800c038 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800c042:	e00a      	b.n	800c05a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800c044:	f107 030c 	add.w	r3, r7, #12
 800c048:	4619      	mov	r1, r3
 800c04a:	6838      	ldr	r0, [r7, #0]
 800c04c:	f000 fa9e 	bl	800c58c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fa05 	bl	800c464 <list_insert_head>
  while (!list_is_empty(src_list))
 800c05a:	6838      	ldr	r0, [r7, #0]
 800c05c:	f000 f9e0 	bl	800c420 <list_is_empty>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d0ee      	beq.n	800c044 <move_list+0xc>
  }
}
 800c066:	bf00      	nop
 800c068:	bf00      	nop
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800c076:	e009      	b.n	800c08c <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800c078:	1d3b      	adds	r3, r7, #4
 800c07a:	4619      	mov	r1, r3
 800c07c:	4809      	ldr	r0, [pc, #36]	@ (800c0a4 <free_event_list+0x34>)
 800c07e:	f000 fa5e 	bl	800c53e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4619      	mov	r1, r3
 800c086:	4808      	ldr	r0, [pc, #32]	@ (800c0a8 <free_event_list+0x38>)
 800c088:	f000 fa12 	bl	800c4b0 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800c08c:	4806      	ldr	r0, [pc, #24]	@ (800c0a8 <free_event_list+0x38>)
 800c08e:	f000 faa4 	bl	800c5da <list_get_size>
 800c092:	4603      	mov	r3, r0
 800c094:	2b01      	cmp	r3, #1
 800c096:	ddef      	ble.n	800c078 <free_event_list+0x8>
  }
}
 800c098:	bf00      	nop
 800c09a:	bf00      	nop
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20000404 	.word	0x20000404
 800c0a8:	200003fc 	.word	0x200003fc

0800c0ac <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d002      	beq.n	800c0c2 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800c0bc:	4a18      	ldr	r2, [pc, #96]	@ (800c120 <hci_init+0x74>)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800c0c2:	4818      	ldr	r0, [pc, #96]	@ (800c124 <hci_init+0x78>)
 800c0c4:	f000 f99c 	bl	800c400 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800c0c8:	4817      	ldr	r0, [pc, #92]	@ (800c128 <hci_init+0x7c>)
 800c0ca:	f000 f999 	bl	800c400 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800c0ce:	f002 fbb9 	bl	800e844 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	73fb      	strb	r3, [r7, #15]
 800c0d6:	e00c      	b.n	800c0f2 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
 800c0da:	228c      	movs	r2, #140	@ 0x8c
 800c0dc:	fb02 f303 	mul.w	r3, r2, r3
 800c0e0:	4a12      	ldr	r2, [pc, #72]	@ (800c12c <hci_init+0x80>)
 800c0e2:	4413      	add	r3, r2
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	480f      	ldr	r0, [pc, #60]	@ (800c124 <hci_init+0x78>)
 800c0e8:	f000 f9e2 	bl	800c4b0 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	73fb      	strb	r3, [r7, #15]
 800c0f2:	7bfb      	ldrb	r3, [r7, #15]
 800c0f4:	2b04      	cmp	r3, #4
 800c0f6:	d9ef      	bls.n	800c0d8 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init) {
 800c0f8:	4b09      	ldr	r3, [pc, #36]	@ (800c120 <hci_init+0x74>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d003      	beq.n	800c108 <hci_init+0x5c>
    hciContext.io.Init(NULL);
 800c100:	4b07      	ldr	r3, [pc, #28]	@ (800c120 <hci_init+0x74>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2000      	movs	r0, #0
 800c106:	4798      	blx	r3
  } 
    
  if (hciContext.io.Reset){
 800c108:	4b05      	ldr	r3, [pc, #20]	@ (800c120 <hci_init+0x74>)
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d002      	beq.n	800c116 <hci_init+0x6a>
    hciContext.io.Reset();
 800c110:	4b03      	ldr	r3, [pc, #12]	@ (800c120 <hci_init+0x74>)
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	4798      	blx	r3
  }
}
 800c116:	bf00      	nop
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	200006c8 	.word	0x200006c8
 800c124:	200003fc 	.word	0x200003fc
 800c128:	20000404 	.word	0x20000404
 800c12c:	2000040c 	.word	0x2000040c

0800c130 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a0b      	ldr	r2, [pc, #44]	@ (800c16c <hci_register_io_bus+0x3c>)
 800c13e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	4a09      	ldr	r2, [pc, #36]	@ (800c16c <hci_register_io_bus+0x3c>)
 800c146:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	4a07      	ldr	r2, [pc, #28]	@ (800c16c <hci_register_io_bus+0x3c>)
 800c14e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	699b      	ldr	r3, [r3, #24]
 800c154:	4a05      	ldr	r2, [pc, #20]	@ (800c16c <hci_register_io_bus+0x3c>)
 800c156:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	4a03      	ldr	r2, [pc, #12]	@ (800c16c <hci_register_io_bus+0x3c>)
 800c15e:	6093      	str	r3, [r2, #8]
}
 800c160:	bf00      	nop
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	200006c8 	.word	0x200006c8

0800c170 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800c170:	b590      	push	{r4, r7, lr}
 800c172:	b091      	sub	sp, #68	@ 0x44
 800c174:	af02      	add	r7, sp, #8
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	460b      	mov	r3, r1
 800c17a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	889b      	ldrh	r3, [r3, #4]
 800c180:	b21b      	sxth	r3, r3
 800c182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c186:	b21a      	sxth	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	885b      	ldrh	r3, [r3, #2]
 800c18c:	029b      	lsls	r3, r3, #10
 800c18e:	b21b      	sxth	r3, r3
 800c190:	4313      	orrs	r3, r2
 800c192:	b21b      	sxth	r3, r3
 800c194:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800c196:	2300      	movs	r3, #0
 800c198:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800c19a:	f107 0308 	add.w	r3, r7, #8
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f000 f92e 	bl	800c400 <list_init_head>

  free_event_list();
 800c1a4:	f7ff ff64 	bl	800c070 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam, r->ext_aci);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	8858      	ldrh	r0, [r3, #2]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	8899      	ldrh	r1, [r3, #4]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	b2da      	uxtb	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	68dc      	ldr	r4, [r3, #12]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	4623      	mov	r3, r4
 800c1c2:	f7ff fec7 	bl	800bf54 <send_cmd>
  
  if (async)
 800c1c6:	78fb      	ldrb	r3, [r7, #3]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d001      	beq.n	800c1d0 <hci_send_req+0x60>
  {
    return 0;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	e0e2      	b.n	800c396 <hci_send_req+0x226>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800c1d0:	f7f5 fa08 	bl	80015e4 <HAL_GetTick>
 800c1d4:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800c1d6:	f7f5 fa05 	bl	80015e4 <HAL_GetTick>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c1e4:	f200 80b3 	bhi.w	800c34e <hci_send_req+0x1de>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800c1e8:	486d      	ldr	r0, [pc, #436]	@ (800c3a0 <hci_send_req+0x230>)
 800c1ea:	f000 f919 	bl	800c420 <list_is_empty>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d000      	beq.n	800c1f6 <hci_send_req+0x86>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800c1f4:	e7ef      	b.n	800c1d6 <hci_send_req+0x66>
      {
        break;
 800c1f6:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800c1f8:	f107 0310 	add.w	r3, r7, #16
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	4868      	ldr	r0, [pc, #416]	@ (800c3a0 <hci_send_req+0x230>)
 800c200:	f000 f99d 	bl	800c53e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	3308      	adds	r3, #8
 800c208:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800c20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b04      	cmp	r3, #4
 800c210:	d17f      	bne.n	800c312 <hci_send_req+0x1a2>
    {
      event_pckt = (void *)(hci_hdr->data);
 800c212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c214:	3301      	adds	r3, #1
 800c216:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	3308      	adds	r3, #8
 800c21c:	3303      	adds	r3, #3
 800c21e:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800c226:	3b03      	subs	r3, #3
 800c228:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800c22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c230:	d04c      	beq.n	800c2cc <hci_send_req+0x15c>
 800c232:	2b3e      	cmp	r3, #62	@ 0x3e
 800c234:	dc68      	bgt.n	800c308 <hci_send_req+0x198>
 800c236:	2b10      	cmp	r3, #16
 800c238:	f000 808b 	beq.w	800c352 <hci_send_req+0x1e2>
 800c23c:	2b10      	cmp	r3, #16
 800c23e:	dc63      	bgt.n	800c308 <hci_send_req+0x198>
 800c240:	2b0e      	cmp	r3, #14
 800c242:	d023      	beq.n	800c28c <hci_send_req+0x11c>
 800c244:	2b0f      	cmp	r3, #15
 800c246:	d15f      	bne.n	800c308 <hci_send_req+0x198>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800c248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	885b      	ldrh	r3, [r3, #2]
 800c250:	b29b      	uxth	r3, r3
 800c252:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c254:	429a      	cmp	r2, r3
 800c256:	d17e      	bne.n	800c356 <hci_send_req+0x1e6>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	2b0f      	cmp	r3, #15
 800c25e:	d004      	beq.n	800c26a <hci_send_req+0xfa>
          if (cs->status) {
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d051      	beq.n	800c30c <hci_send_req+0x19c>
            goto failed;
 800c268:	e078      	b.n	800c35c <hci_send_req+0x1ec>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	699a      	ldr	r2, [r3, #24]
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	429a      	cmp	r2, r3
 800c272:	bf28      	it	cs
 800c274:	461a      	movcs	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	619a      	str	r2, [r3, #24]
        STM32WB_memcpy(r->rparam, ptr, r->rlen);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6958      	ldr	r0, [r3, #20]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	699b      	ldr	r3, [r3, #24]
 800c282:	461a      	mov	r2, r3
 800c284:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c286:	f002 fd08 	bl	800ec9a <memcpy>
        goto done;
 800c28a:	e078      	b.n	800c37e <hci_send_req+0x20e>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800c28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28e:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c296:	b29b      	uxth	r3, r3
 800c298:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d15d      	bne.n	800c35a <hci_send_req+0x1ea>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800c29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a0:	3303      	adds	r3, #3
 800c2a2:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800c2a4:	6a3b      	ldr	r3, [r7, #32]
 800c2a6:	3b03      	subs	r3, #3
 800c2a8:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	699a      	ldr	r2, [r3, #24]
 800c2ae:	6a3b      	ldr	r3, [r7, #32]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	bf28      	it	cs
 800c2b4:	461a      	movcs	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	619a      	str	r2, [r3, #24]
        STM32WB_memcpy(r->rparam, ptr, r->rlen);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6958      	ldr	r0, [r3, #20]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	699b      	ldr	r3, [r3, #24]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2c6:	f002 fce8 	bl	800ec9a <memcpy>
        goto done;
 800c2ca:	e058      	b.n	800c37e <hci_send_req+0x20e>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800c2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ce:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d118      	bne.n	800c310 <hci_send_req+0x1a0>
          break;
      
        len -= 1;
 800c2de:	6a3b      	ldr	r3, [r7, #32]
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	699a      	ldr	r2, [r3, #24]
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	bf28      	it	cs
 800c2ee:	461a      	movcs	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	619a      	str	r2, [r3, #24]
        STM32WB_memcpy(r->rparam, me->data, r->rlen);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6958      	ldr	r0, [r3, #20]
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	1c59      	adds	r1, r3, #1
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	461a      	mov	r2, r3
 800c302:	f002 fcca 	bl	800ec9a <memcpy>
        goto done;
 800c306:	e03a      	b.n	800c37e <hci_send_req+0x20e>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800c308:	bf00      	nop
 800c30a:	e002      	b.n	800c312 <hci_send_req+0x1a2>
          break;
 800c30c:	bf00      	nop
 800c30e:	e000      	b.n	800c312 <hci_send_req+0x1a2>
          break;
 800c310:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800c312:	4824      	ldr	r0, [pc, #144]	@ (800c3a4 <hci_send_req+0x234>)
 800c314:	f000 f884 	bl	800c420 <list_is_empty>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00d      	beq.n	800c33a <hci_send_req+0x1ca>
 800c31e:	4820      	ldr	r0, [pc, #128]	@ (800c3a0 <hci_send_req+0x230>)
 800c320:	f000 f87e 	bl	800c420 <list_is_empty>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d007      	beq.n	800c33a <hci_send_req+0x1ca>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	4619      	mov	r1, r3
 800c32e:	481d      	ldr	r0, [pc, #116]	@ (800c3a4 <hci_send_req+0x234>)
 800c330:	f000 f8be 	bl	800c4b0 <list_insert_tail>
      hciReadPacket=NULL;
 800c334:	2300      	movs	r3, #0
 800c336:	613b      	str	r3, [r7, #16]
 800c338:	e008      	b.n	800c34c <hci_send_req+0x1dc>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800c33a:	693a      	ldr	r2, [r7, #16]
 800c33c:	f107 0308 	add.w	r3, r7, #8
 800c340:	4611      	mov	r1, r2
 800c342:	4618      	mov	r0, r3
 800c344:	f000 f8b4 	bl	800c4b0 <list_insert_tail>
      hciReadPacket=NULL;
 800c348:	2300      	movs	r3, #0
 800c34a:	613b      	str	r3, [r7, #16]
  {
 800c34c:	e740      	b.n	800c1d0 <hci_send_req+0x60>
        goto failed;
 800c34e:	bf00      	nop
 800c350:	e004      	b.n	800c35c <hci_send_req+0x1ec>
        goto failed;
 800c352:	bf00      	nop
 800c354:	e002      	b.n	800c35c <hci_send_req+0x1ec>
          goto failed;
 800c356:	bf00      	nop
 800c358:	e000      	b.n	800c35c <hci_send_req+0x1ec>
          goto failed;
 800c35a:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d004      	beq.n	800c36c <hci_send_req+0x1fc>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	4619      	mov	r1, r3
 800c366:	480f      	ldr	r0, [pc, #60]	@ (800c3a4 <hci_send_req+0x234>)
 800c368:	f000 f87c 	bl	800c464 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800c36c:	f107 0308 	add.w	r3, r7, #8
 800c370:	4619      	mov	r1, r3
 800c372:	480b      	ldr	r0, [pc, #44]	@ (800c3a0 <hci_send_req+0x230>)
 800c374:	f7ff fe60 	bl	800c038 <move_list>

  return -1;
 800c378:	f04f 33ff 	mov.w	r3, #4294967295
 800c37c:	e00b      	b.n	800c396 <hci_send_req+0x226>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	4619      	mov	r1, r3
 800c382:	4808      	ldr	r0, [pc, #32]	@ (800c3a4 <hci_send_req+0x234>)
 800c384:	f000 f86e 	bl	800c464 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800c388:	f107 0308 	add.w	r3, r7, #8
 800c38c:	4619      	mov	r1, r3
 800c38e:	4804      	ldr	r0, [pc, #16]	@ (800c3a0 <hci_send_req+0x230>)
 800c390:	f7ff fe52 	bl	800c038 <move_list>

  return 0;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	373c      	adds	r7, #60	@ 0x3c
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd90      	pop	{r4, r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	20000404 	.word	0x20000404
 800c3a4:	200003fc 	.word	0x200003fc

0800c3a8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800c3b2:	e013      	b.n	800c3dc <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800c3b4:	1d3b      	adds	r3, r7, #4
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	480e      	ldr	r0, [pc, #56]	@ (800c3f4 <hci_user_evt_proc+0x4c>)
 800c3ba:	f000 f8c0 	bl	800c53e <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800c3be:	4b0e      	ldr	r3, [pc, #56]	@ (800c3f8 <hci_user_evt_proc+0x50>)
 800c3c0:	69db      	ldr	r3, [r3, #28]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d005      	beq.n	800c3d2 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800c3c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c3f8 <hci_user_evt_proc+0x50>)
 800c3c8:	69db      	ldr	r3, [r3, #28]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	3208      	adds	r2, #8
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	4809      	ldr	r0, [pc, #36]	@ (800c3fc <hci_user_evt_proc+0x54>)
 800c3d8:	f000 f86a 	bl	800c4b0 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800c3dc:	4805      	ldr	r0, [pc, #20]	@ (800c3f4 <hci_user_evt_proc+0x4c>)
 800c3de:	f000 f81f 	bl	800c420 <list_is_empty>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d0e5      	beq.n	800c3b4 <hci_user_evt_proc+0xc>
  }
}
 800c3e8:	bf00      	nop
 800c3ea:	bf00      	nop
 800c3ec:	3708      	adds	r7, #8
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	20000404 	.word	0x20000404
 800c3f8:	200006c8 	.word	0x200006c8
 800c3fc:	200003fc 	.word	0x200003fc

0800c400 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	605a      	str	r2, [r3, #4]
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800c420:	b480      	push	{r7}
 800c422:	b087      	sub	sp, #28
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c428:	f3ef 8310 	mrs	r3, PRIMASK
 800c42c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c42e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c430:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c432:	b672      	cpsid	i
}
 800c434:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d102      	bne.n	800c446 <list_is_empty+0x26>
  {
    return_value = 1;
 800c440:	2301      	movs	r3, #1
 800c442:	75fb      	strb	r3, [r7, #23]
 800c444:	e001      	b.n	800c44a <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800c446:	2300      	movs	r3, #0
 800c448:	75fb      	strb	r3, [r7, #23]
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	f383 8810 	msr	PRIMASK, r3
}
 800c454:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800c456:	7dfb      	ldrb	r3, [r7, #23]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	371c      	adds	r7, #28
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800c464:	b480      	push	{r7}
 800c466:	b087      	sub	sp, #28
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c46e:	f3ef 8310 	mrs	r3, PRIMASK
 800c472:	60fb      	str	r3, [r7, #12]
  return(result);
 800c474:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c476:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c478:	b672      	cpsid	i
}
 800c47a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	683a      	ldr	r2, [r7, #0]
 800c48e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	683a      	ldr	r2, [r7, #0]
 800c496:	605a      	str	r2, [r3, #4]
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	f383 8810 	msr	PRIMASK, r3
}
 800c4a2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c4a4:	bf00      	nop
 800c4a6:	371c      	adds	r7, #28
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b087      	sub	sp, #28
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c4ba:	f3ef 8310 	mrs	r3, PRIMASK
 800c4be:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c4c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c4c4:	b672      	cpsid	i
}
 800c4c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	683a      	ldr	r2, [r7, #0]
 800c4da:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	683a      	ldr	r2, [r7, #0]
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	f383 8810 	msr	PRIMASK, r3
}
 800c4ee:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c4f0:	bf00      	nop
 800c4f2:	371c      	adds	r7, #28
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b087      	sub	sp, #28
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c504:	f3ef 8310 	mrs	r3, PRIMASK
 800c508:	60fb      	str	r3, [r7, #12]
  return(result);
 800c50a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c50c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c50e:	b672      	cpsid	i
}
 800c510:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	6812      	ldr	r2, [r2, #0]
 800c51a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	6852      	ldr	r2, [r2, #4]
 800c524:	605a      	str	r2, [r3, #4]
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f383 8810 	msr	PRIMASK, r3
}
 800c530:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c532:	bf00      	nop
 800c534:	371c      	adds	r7, #28
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b086      	sub	sp, #24
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c548:	f3ef 8310 	mrs	r3, PRIMASK
 800c54c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c54e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c550:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c552:	b672      	cpsid	i
}
 800c554:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff ffca 	bl	800c4fc <list_remove_node>
  (*node)->next = NULL;
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2200      	movs	r2, #0
 800c56e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2200      	movs	r2, #0
 800c576:	605a      	str	r2, [r3, #4]
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	f383 8810 	msr	PRIMASK, r3
}
 800c582:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c584:	bf00      	nop
 800c586:	3718      	adds	r7, #24
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c596:	f3ef 8310 	mrs	r3, PRIMASK
 800c59a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c59c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c59e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5a0:	b672      	cpsid	i
}
 800c5a2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	685a      	ldr	r2, [r3, #4]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7ff ffa3 	bl	800c4fc <list_remove_node>
  (*node)->next = NULL;
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	605a      	str	r2, [r3, #4]
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	f383 8810 	msr	PRIMASK, r3
}
 800c5d0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c5d2:	bf00      	nop
 800c5d4:	3718      	adds	r7, #24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b089      	sub	sp, #36	@ 0x24
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
  int size = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c5e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c5ea:	613b      	str	r3, [r7, #16]
  return(result);
 800c5ec:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c5ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5f0:	b672      	cpsid	i
}
 800c5f2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800c5fa:	e005      	b.n	800c608 <list_get_size+0x2e>
  {
    size++;
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	3301      	adds	r3, #1
 800c600:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800c608:	69ba      	ldr	r2, [r7, #24]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d1f5      	bne.n	800c5fc <list_get_size+0x22>
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f383 8810 	msr	PRIMASK, r3
}
 800c61a:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800c61c:	69fb      	ldr	r3, [r7, #28]
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3724      	adds	r7, #36	@ 0x24
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr
	...

0800c62c <MX_STM32WB05N_Init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void MX_STM32WB05N_Init(void)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
  /* USER CODE END STM32WB05N_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 800c632:	f000 f82b 	bl	800c68c <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_USER);
 800c636:	2000      	movs	r0, #0
 800c638:	f7f4 fe24 	bl	8001284 <BSP_PB_GetState>
 800c63c:	4603      	mov	r3, r0
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	4b0c      	ldr	r3, [pc, #48]	@ (800c674 <MX_STM32WB05N_Init+0x48>)
 800c642:	701a      	strb	r2, [r3, #0]

  hci_init(APP_UserEvtRx, NULL);
 800c644:	2100      	movs	r1, #0
 800c646:	480c      	ldr	r0, [pc, #48]	@ (800c678 <MX_STM32WB05N_Init+0x4c>)
 800c648:	f7ff fd30 	bl	800c0ac <hci_init>
  PRINT_DBG("\033[2J"); /* serial console clear screen */
  PRINT_DBG("\033[H");  /* serial console cursor to home */
  PRINT_DBG("STM32WB05N SensorDemo_BLESensor-App Application\r\n");

  /* Init Sensor Device */
  ret = Sensor_DeviceInit();
 800c64c:	f000 f83c 	bl	800c6c8 <Sensor_DeviceInit>
 800c650:	4603      	mov	r3, r0
 800c652:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 800c654:	79fb      	ldrb	r3, [r7, #7]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d004      	beq.n	800c664 <MX_STM32WB05N_Init+0x38>
  {
    BSP_LED_On(LED2);
 800c65a:	2000      	movs	r0, #0
 800c65c:	f7f4 fd40 	bl	80010e0 <BSP_LED_On>
    PRINT_DBG("SensorDeviceInit()--> Failed 0x%02x\r\n", ret);
    while(1);
 800c660:	bf00      	nop
 800c662:	e7fd      	b.n	800c660 <MX_STM32WB05N_Init+0x34>
  }
  /* Short delay before starting the user application process */
  HAL_Delay(500);
 800c664:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c668:	f7f4 ffc8 	bl	80015fc <HAL_Delay>
  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");

  /* USER CODE BEGIN STM32WB05N_Init_PostTreatment */

  /* USER CODE END STM32WB05N_Init_PostTreatment */
}
 800c66c:	bf00      	nop
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	2000001d 	.word	0x2000001d
 800c678:	0800e639 	.word	0x0800e639

0800c67c <MX_STM32WB05N_Process>:

/*
 * STM32WB05N background task
 */
void MX_STM32WB05N_Process(void)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN STM32WB05N_Process_PreTreatment */

  /* USER CODE END STM32WB05N_Process_PreTreatment */

  hci_user_evt_proc();
 800c680:	f7ff fe92 	bl	800c3a8 <hci_user_evt_proc>
  User_Process();
 800c684:	f000 f8d0 	bl	800c828 <User_Process>

  /* USER CODE BEGIN STM32WB05N_Process_PostTreatment */

  /* USER CODE END STM32WB05N_Process_PostTreatment */
}
 800c688:	bf00      	nop
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800c692:	2101      	movs	r1, #1
 800c694:	2000      	movs	r0, #0
 800c696:	f7f4 fd7d 	bl	8001194 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 800c69a:	2000      	movs	r0, #0
 800c69c:	f7f4 fce4 	bl	8001068 <BSP_LED_Init>
  COM_InitTypeDef COM_Init;
    COM_Init.BaudRate   = 921600;             // ou 921600 si tu veux
 800c6a0:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 800c6a4:	603b      	str	r3, [r7, #0]
    COM_Init.WordLength = COM_WORDLENGTH_8B;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	607b      	str	r3, [r7, #4]
    COM_Init.StopBits   = COM_STOPBITS_1;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	813b      	strh	r3, [r7, #8]
    COM_Init.Parity     = COM_PARITY_NONE;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	817b      	strh	r3, [r7, #10]
    COM_Init.HwFlowCtl  = COM_HWCONTROL_NONE;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	81bb      	strh	r3, [r7, #12]
    BSP_COM_Init(COM1, &COM_Init);
 800c6b6:	463b      	mov	r3, r7
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	f7f4 fdf8 	bl	80012b0 <BSP_COM_Init>
}
 800c6c0:	bf00      	nop
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <Sensor_DeviceInit>:
 *
 * @param  None
 * @retval None
 */
uint8_t Sensor_DeviceInit(void)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b08c      	sub	sp, #48	@ 0x30
 800c6cc:	af04      	add	r7, sp, #16
  uint8_t  ret;
  uint16_t appearance_char_handle;
  uint16_t service_handle;
  uint16_t dev_name_char_handle = 0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	833b      	strh	r3, [r7, #24]
  uint8_t  device_name[] = {SENSOR_DEMO_NAME};
 800c6d2:	4a53      	ldr	r2, [pc, #332]	@ (800c820 <Sensor_DeviceInit+0x158>)
 800c6d4:	f107 030c 	add.w	r3, r7, #12
 800c6d8:	ca07      	ldmia	r2, {r0, r1, r2}
 800c6da:	c303      	stmia	r3!, {r0, r1}
 800c6dc:	701a      	strb	r2, [r3, #0]
  uint8_t  hwVersion;
  uint16_t fwVersion;
  uint8_t  bdaddr_len_out;
  uint8_t  config_data_stored_static_random_address = 0x80; /* Offset of the static random address stored in NVM */
 800c6de:	2380      	movs	r3, #128	@ 0x80
 800c6e0:	77fb      	strb	r3, [r7, #31]
  uint16_t Periph_Pref_Conn_Param_Char_Handle;

  /* Sw reset of the device */
  ret = hci_reset();
 800c6e2:	f7ff fbca 	bl	800be7a <hci_reset>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	77bb      	strb	r3, [r7, #30]
  if(ret != 0) {
 800c6ea:	7fbb      	ldrb	r3, [r7, #30]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <Sensor_DeviceInit+0x2c>
    PRINT_DBG ("Error in hci_reset() 0x%04x\r\n", ret);
    while(1);
 800c6f0:	bf00      	nop
 800c6f2:	e7fd      	b.n	800c6f0 <Sensor_DeviceInit+0x28>
  else {
    PRINT_DBG ("hci_reset() --> SUCCESS\r\n");
  }

  /* Wait some time for the STM32WB05N to be fully operational */
  HAL_Delay(2000);
 800c6f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800c6f8:	f7f4 ff80 	bl	80015fc <HAL_Delay>

  /* get the STM32WB05N HW and FW versions */
  getSTM32WBVersion(&hwVersion, &fwVersion);
 800c6fc:	f107 0208 	add.w	r2, r7, #8
 800c700:	f107 030b 	add.w	r3, r7, #11
 800c704:	4611      	mov	r1, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f001 fb16 	bl	800dd38 <getSTM32WBVersion>

  PRINT_DBG("HWver %d\nFWver %d\r\n", hwVersion, fwVersion);

  ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 800c70c:	1df9      	adds	r1, r7, #7
 800c70e:	7ffb      	ldrb	r3, [r7, #31]
 800c710:	4a44      	ldr	r2, [pc, #272]	@ (800c824 <Sensor_DeviceInit+0x15c>)
 800c712:	4618      	mov	r0, r3
 800c714:	f7fc faf7 	bl	8008d06 <aci_hal_read_config_data>
 800c718:	4603      	mov	r3, r0
 800c71a:	77bb      	strb	r3, [r7, #30]

  if (ret) {
    PRINT_DBG("Read Static Random address failed.\r\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 800c71c:	4b41      	ldr	r3, [pc, #260]	@ (800c824 <Sensor_DeviceInit+0x15c>)
 800c71e:	795b      	ldrb	r3, [r3, #5]
 800c720:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c724:	2bc0      	cmp	r3, #192	@ 0xc0
 800c726:	d001      	beq.n	800c72c <Sensor_DeviceInit+0x64>
    PRINT_DBG("Static Random address not well formed.\r\n");
    while(1);
 800c728:	bf00      	nop
 800c72a:	e7fd      	b.n	800c728 <Sensor_DeviceInit+0x60>
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800c72c:	79fb      	ldrb	r3, [r7, #7]
 800c72e:	4a3d      	ldr	r2, [pc, #244]	@ (800c824 <Sensor_DeviceInit+0x15c>)
 800c730:	4619      	mov	r1, r3
 800c732:	2000      	movs	r0, #0
 800c734:	f7fc fa55 	bl	8008be2 <aci_hal_write_config_data>
 800c738:	4603      	mov	r3, r0
 800c73a:	77bb      	strb	r3, [r7, #30]
  else {
    PRINT_DBG("aci_hal_write_config_data --> SUCCESS\r\n");
  }

  /* Set the TX power -2 dBm */
  ret = aci_hal_set_tx_power_level(0, 25);
 800c73c:	2119      	movs	r1, #25
 800c73e:	2000      	movs	r0, #0
 800c740:	f7fc fb69 	bl	8008e16 <aci_hal_set_tx_power_level>
 800c744:	4603      	mov	r3, r0
 800c746:	77bb      	strb	r3, [r7, #30]
  else {
    PRINT_DBG("aci_hal_set_tx_power_level --> SUCCESS\r\n");
  }

  /* GATT Init */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &service_handle);
 800c748:	f107 031a 	add.w	r3, r7, #26
 800c74c:	4619      	mov	r1, r3
 800c74e:	2001      	movs	r0, #1
 800c750:	f7fb fe86 	bl	8008460 <aci_gatt_srv_profile_init>
 800c754:	4603      	mov	r3, r0
 800c756:	77bb      	strb	r3, [r7, #30]
  if (ret != BLE_STATUS_SUCCESS) {
 800c758:	7fbb      	ldrb	r3, [r7, #30]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d001      	beq.n	800c762 <Sensor_DeviceInit+0x9a>
    PRINT_DBG("aci_gatt_srv_profile_init() failed: 0x%02x\r\n", ret);
    return ret;
 800c75e:	7fbb      	ldrb	r3, [r7, #30]
 800c760:	e059      	b.n	800c816 <Sensor_DeviceInit+0x14e>
  else {
    PRINT_DBG("aci_gatt_srv_profile_init() --> SUCCESS\r\n");
  }

  /* GAP Init */
  ret = aci_gap_init(PRIVACY_DISABLED, HCI_ADDR_PUBLIC);
 800c762:	2100      	movs	r1, #0
 800c764:	2000      	movs	r0, #0
 800c766:	f7fb f903 	bl	8007970 <aci_gap_init>
 800c76a:	4603      	mov	r3, r0
 800c76c:	77bb      	strb	r3, [r7, #30]
  if (ret != BLE_STATUS_SUCCESS) {
 800c76e:	7fbb      	ldrb	r3, [r7, #30]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <Sensor_DeviceInit+0xb0>
    PRINT_DBG("aci_gap_init() failed: 0x%02x\r\n", ret);
    return ret;
 800c774:	7fbb      	ldrb	r3, [r7, #30]
 800c776:	e04e      	b.n	800c816 <Sensor_DeviceInit+0x14e>
  else {
    PRINT_DBG("aci_gap_init() --> SUCCESS\r\n");
  }

     /* Init the GAP Profile */
  ret = aci_gap_profile_init(GAP_PERIPHERAL_ROLE, PRIVACY_DISABLED, &dev_name_char_handle, &appearance_char_handle, &Periph_Pref_Conn_Param_Char_Handle);
 800c778:	f107 011c 	add.w	r1, r7, #28
 800c77c:	f107 0218 	add.w	r2, r7, #24
 800c780:	1d3b      	adds	r3, r7, #4
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	460b      	mov	r3, r1
 800c786:	2100      	movs	r1, #0
 800c788:	2001      	movs	r0, #1
 800c78a:	f7fb fa82 	bl	8007c92 <aci_gap_profile_init>
 800c78e:	4603      	mov	r3, r0
 800c790:	77bb      	strb	r3, [r7, #30]
  if(ret != 0) {
 800c792:	7fbb      	ldrb	r3, [r7, #30]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d001      	beq.n	800c79c <Sensor_DeviceInit+0xd4>
    PRINT_DBG ("Error in aci_gap_profile_init() 0x%04xr\n", ret);
    while(1);
 800c798:	bf00      	nop
 800c79a:	e7fd      	b.n	800c798 <Sensor_DeviceInit+0xd0>
  }
  else
    PRINT_DBG ("aci_gap_profile_init() --> SUCCESS\r\n");

  /* Update device name */
  ret = aci_gatt_srv_write_handle_value_nwk(dev_name_char_handle + 1, 0, sizeof(device_name), device_name);
 800c79c:	8b3b      	ldrh	r3, [r7, #24]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	b298      	uxth	r0, r3
 800c7a2:	f107 030c 	add.w	r3, r7, #12
 800c7a6:	2209      	movs	r2, #9
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	f7fc f8b4 	bl	8008916 <aci_gatt_srv_write_handle_value_nwk>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	77bb      	strb	r3, [r7, #30]
  if (ret != BLE_STATUS_SUCCESS) {
 800c7b2:	7fbb      	ldrb	r3, [r7, #30]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d001      	beq.n	800c7bc <Sensor_DeviceInit+0xf4>
    PRINT_DBG("aci_gatt_srv_write_handle_value_nwk() failed: 0x%02x\r\n", ret);
    return ret;
 800c7b8:	7fbb      	ldrb	r3, [r7, #30]
 800c7ba:	e02c      	b.n	800c816 <Sensor_DeviceInit+0x14e>

  /*
   * Clear security database: this implies that each time the application is executed
   * the full bonding process is executed (with PassKey generation and setting).
   */
  ret = aci_gap_clear_security_db();
 800c7bc:	f7fb fb98 	bl	8007ef0 <aci_gap_clear_security_db>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	77bb      	strb	r3, [r7, #30]

  /*
   * Set the I/O capability otherwise the Central device (e.g. the smartphone) will
   * propose a PIN that will be accepted without any control.
   */
  if (aci_gap_set_io_capability(GAP_IO_CAP_DISPLAY_ONLY)==BLE_STATUS_SUCCESS) {
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	f7fb f947 	bl	8007a58 <aci_gap_set_io_capability>
  } else {
    PRINT_DBG("Error Setting I/O Capability\r\n");
  }

  /* BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype) */
  ret = aci_gap_set_security_requirements(BONDING,
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	9302      	str	r3, [sp, #8]
 800c7ce:	2310      	movs	r3, #16
 800c7d0:	9301      	str	r3, [sp, #4]
 800c7d2:	2307      	movs	r3, #7
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	2201      	movs	r2, #1
 800c7da:	2101      	movs	r1, #1
 800c7dc:	2001      	movs	r0, #1
 800c7de:	f7fb f99c 	bl	8007b1a <aci_gap_set_security_requirements>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	77bb      	strb	r3, [r7, #30]
                                          GAP_SC_OPTIONAL,
                                          GAP_KEYPRESS_NOT_SUPPORTED,
                                          7,
                                          16,
                                          GAP_PAIRING_RESP_NONE);
  if (ret != BLE_STATUS_SUCCESS) {
 800c7e6:	7fbb      	ldrb	r3, [r7, #30]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d001      	beq.n	800c7f0 <Sensor_DeviceInit+0x128>
    PRINT_DBG("aci_gap_set_security_requirements()failed: 0x%02x\r\n", ret);
    return ret;
 800c7ec:	7fbb      	ldrb	r3, [r7, #30]
 800c7ee:	e012      	b.n	800c816 <Sensor_DeviceInit+0x14e>
    PRINT_DBG("aci_gap_set_security_requirements() --> SUCCESS\r\n");
  }

  PRINT_DBG("BLE Stack Initialized with SUCCESS\r\n");

  ret = Add_HWServW2ST_Service();
 800c7f0:	f001 fba2 	bl	800df38 <Add_HWServW2ST_Service>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	77bb      	strb	r3, [r7, #30]
  if (ret == BLE_STATUS_SUCCESS) {
 800c7f8:	7fbb      	ldrb	r3, [r7, #30]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d001      	beq.n	800c802 <Sensor_DeviceInit+0x13a>
    PRINT_DBG("STM32WB05N HW service added successfully.\r\n");
  }
  else {
    PRINT_DBG("Error while adding STM32WB05N HW service: 0x%02x\r\n", ret);
    while(1);
 800c7fe:	bf00      	nop
 800c800:	e7fd      	b.n	800c7fe <Sensor_DeviceInit+0x136>
  }

  ret = Add_SWServW2ST_Service();
 800c802:	f001 fc73 	bl	800e0ec <Add_SWServW2ST_Service>
 800c806:	4603      	mov	r3, r0
 800c808:	77bb      	strb	r3, [r7, #30]
  if(ret == BLE_STATUS_SUCCESS) {
 800c80a:	7fbb      	ldrb	r3, [r7, #30]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d001      	beq.n	800c814 <Sensor_DeviceInit+0x14c>
     PRINT_DBG("STM32WB05N SW service added successfully.\r\n");
  }
  else {
     PRINT_DBG("Error while adding STM32WB05N SW service: 0x%02x\r\n", ret);
     while(1);
 800c810:	bf00      	nop
 800c812:	e7fd      	b.n	800c810 <Sensor_DeviceInit+0x148>
  }

  return BLE_STATUS_SUCCESS;
 800c814:	2300      	movs	r3, #0
}
 800c816:	4618      	mov	r0, r3
 800c818:	3720      	adds	r7, #32
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	0800f92c 	.word	0x0800f92c
 800c824:	200006e8 	.word	0x200006e8

0800c828 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  /* Make the device discoverable */
  if(set_connectable)
 800c82e:	4b48      	ldr	r3, [pc, #288]	@ (800c950 <User_Process+0x128>)
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	b2db      	uxtb	r3, r3
 800c834:	2b00      	cmp	r3, #0
 800c836:	d004      	beq.n	800c842 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 800c838:	f001 fe6a 	bl	800e510 <Set_DeviceConnectable>
    set_connectable = FALSE;
 800c83c:	4b44      	ldr	r3, [pc, #272]	@ (800c950 <User_Process+0x128>)
 800c83e:	2200      	movs	r2, #0
 800c840:	701a      	strb	r2, [r3, #0]
  }

  if ((connected) && (!pairing))
 800c842:	4b44      	ldr	r3, [pc, #272]	@ (800c954 <User_Process+0x12c>)
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	b2db      	uxtb	r3, r3
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d011      	beq.n	800c870 <User_Process+0x48>
 800c84c:	4b42      	ldr	r3, [pc, #264]	@ (800c958 <User_Process+0x130>)
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10c      	bne.n	800c870 <User_Process+0x48>
  {
    ret = aci_gap_set_security(connection_handle, GAP_SECURITY_LEVEL_1, SECURE_PAIRING);
 800c856:	4b41      	ldr	r3, [pc, #260]	@ (800c95c <User_Process+0x134>)
 800c858:	881b      	ldrh	r3, [r3, #0]
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	2200      	movs	r2, #0
 800c85e:	2101      	movs	r1, #1
 800c860:	4618      	mov	r0, r3
 800c862:	f7fb fabb 	bl	8007ddc <aci_gap_set_security>
 800c866:	4603      	mov	r3, r0
 800c868:	73fb      	strb	r3, [r7, #15]
    if (ret != BLE_STATUS_SUCCESS) {
      PRINT_DBG("aci_gap_set_security() failed:0x%02x\r\n", ret);
    }
    else {
      PRINT_DBG("aci_gap_set_security --> SUCCESS\r\n");
    }    pairing = TRUE;
 800c86a:	4b3b      	ldr	r3, [pc, #236]	@ (800c958 <User_Process+0x130>)
 800c86c:	2201      	movs	r2, #1
 800c86e:	701a      	strb	r2, [r3, #0]
    HAL_Delay(50);

    BSP_LED_Toggle(LED2);
#endif /* USE_BUTTON */

    if (paired)
 800c870:	4b3b      	ldr	r3, [pc, #236]	@ (800c960 <User_Process+0x138>)
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	b2db      	uxtb	r3, r3
 800c876:	2b00      	cmp	r3, #0
 800c878:	d066      	beq.n	800c948 <User_Process+0x120>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 800c87a:	f7f4 feb3 	bl	80015e4 <HAL_GetTick>
 800c87e:	4603      	mov	r3, r0
 800c880:	4618      	mov	r0, r3
 800c882:	f002 f81d 	bl	800e8c0 <srand>

      if (send_env) {
 800c886:	4b37      	ldr	r3, [pc, #220]	@ (800c964 <User_Process+0x13c>)
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d025      	beq.n	800c8dc <User_Process+0xb4>
        /* Update emulated Environmental data */
        Set_Random_Environmental_Values(&data_t, &data_p);
 800c890:	1d3a      	adds	r2, r7, #4
 800c892:	f107 0308 	add.w	r3, r7, #8
 800c896:	4611      	mov	r1, r2
 800c898:	4618      	mov	r0, r3
 800c89a:	f000 f875 	bl	800c988 <Set_Random_Environmental_Values>
        Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 800c89e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8a2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c968 <User_Process+0x140>
 800c8a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c8aa:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800c8ae:	edd7 7a02 	vldr	s15, [r7, #8]
 800c8b2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800c8b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c8ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8be:	ee17 3a90 	vmov	r3, s15
 800c8c2:	b21b      	sxth	r3, r3
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	ee16 0a90 	vmov	r0, s13
 800c8ca:	f001 fc9d 	bl	800e208 <Environmental_Update>
#if (!USE_BUTTON)
        BSP_LED_Toggle(LED2);
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	f7f4 fc42 	bl	8001158 <BSP_LED_Toggle>
        HAL_Delay(1000); /* wait 1 sec before sending new data */
 800c8d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c8d8:	f7f4 fe90 	bl	80015fc <HAL_Delay>
#endif /* (!USE_BUTTON) */
      }

      if ((send_mot) || (send_quat)) {
 800c8dc:	4b23      	ldr	r3, [pc, #140]	@ (800c96c <User_Process+0x144>)
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d104      	bne.n	800c8f0 <User_Process+0xc8>
 800c8e6:	4b22      	ldr	r3, [pc, #136]	@ (800c970 <User_Process+0x148>)
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d02b      	beq.n	800c948 <User_Process+0x120>
        /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
        Set_Random_Motion_Values(counter);
 800c8f0:	4b20      	ldr	r3, [pc, #128]	@ (800c974 <User_Process+0x14c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f000 f8c7 	bl	800ca88 <Set_Random_Motion_Values>
        if (send_mot) {
 800c8fa:	4b1c      	ldr	r3, [pc, #112]	@ (800c96c <User_Process+0x144>)
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b00      	cmp	r3, #0
 800c902:	d004      	beq.n	800c90e <User_Process+0xe6>
          Acc_Update(&x_axes, &g_axes, &m_axes);
 800c904:	4a1c      	ldr	r2, [pc, #112]	@ (800c978 <User_Process+0x150>)
 800c906:	491d      	ldr	r1, [pc, #116]	@ (800c97c <User_Process+0x154>)
 800c908:	481d      	ldr	r0, [pc, #116]	@ (800c980 <User_Process+0x158>)
 800c90a:	f001 fcc7 	bl	800e29c <Acc_Update>
        }
        if (send_quat) {
 800c90e:	4b18      	ldr	r3, [pc, #96]	@ (800c970 <User_Process+0x148>)
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b00      	cmp	r3, #0
 800c916:	d002      	beq.n	800c91e <User_Process+0xf6>
          Quat_Update(&q_axes);
 800c918:	481a      	ldr	r0, [pc, #104]	@ (800c984 <User_Process+0x15c>)
 800c91a:	f001 fd4f 	bl	800e3bc <Quat_Update>
        }
        counter ++;
 800c91e:	4b15      	ldr	r3, [pc, #84]	@ (800c974 <User_Process+0x14c>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	3301      	adds	r3, #1
 800c924:	4a13      	ldr	r2, [pc, #76]	@ (800c974 <User_Process+0x14c>)
 800c926:	6013      	str	r3, [r2, #0]
        if (counter == 40) {
 800c928:	4b12      	ldr	r3, [pc, #72]	@ (800c974 <User_Process+0x14c>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2b28      	cmp	r3, #40	@ 0x28
 800c92e:	d104      	bne.n	800c93a <User_Process+0x112>
          counter = 0;
 800c930:	4b10      	ldr	r3, [pc, #64]	@ (800c974 <User_Process+0x14c>)
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]
          Reset_Motion_Values();
 800c936:	f001 f915 	bl	800db64 <Reset_Motion_Values>
        }
#if (!USE_BUTTON)
        BSP_LED_Toggle(LED2);
 800c93a:	2000      	movs	r0, #0
 800c93c:	f7f4 fc0c 	bl	8001158 <BSP_LED_Toggle>
        HAL_Delay(1000); /* wait 1 sec before sending new data */
 800c940:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c944:	f7f4 fe5a 	bl	80015fc <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif /* USE_BUTTON */
}
 800c948:	bf00      	nop
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	2000001e 	.word	0x2000001e
 800c954:	20000726 	.word	0x20000726
 800c958:	20000727 	.word	0x20000727
 800c95c:	20000724 	.word	0x20000724
 800c960:	20000728 	.word	0x20000728
 800c964:	20000720 	.word	0x20000720
 800c968:	42c80000 	.word	0x42c80000
 800c96c:	20000721 	.word	0x20000721
 800c970:	20000722 	.word	0x20000722
 800c974:	200006f0 	.word	0x200006f0
 800c978:	20000744 	.word	0x20000744
 800c97c:	20000738 	.word	0x20000738
 800c980:	2000072c 	.word	0x2000072c
 800c984:	20000750 	.word	0x20000750

0800c988 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 800c988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c98c:	b084      	sub	sp, #16
 800c98e:	af00      	add	r7, sp, #0
 800c990:	60f8      	str	r0, [r7, #12]
 800c992:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 800c994:	f001 ffc2 	bl	800e91c <rand>
 800c998:	4603      	mov	r3, r0
 800c99a:	17da      	asrs	r2, r3, #31
 800c99c:	469a      	mov	sl, r3
 800c99e:	4693      	mov	fp, r2
 800c9a0:	4652      	mov	r2, sl
 800c9a2:	465b      	mov	r3, fp
 800c9a4:	f04f 0000 	mov.w	r0, #0
 800c9a8:	f04f 0100 	mov.w	r1, #0
 800c9ac:	0099      	lsls	r1, r3, #2
 800c9ae:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c9b2:	0090      	lsls	r0, r2, #2
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	eb12 010a 	adds.w	r1, r2, sl
 800c9bc:	6039      	str	r1, [r7, #0]
 800c9be:	eb43 030b 	adc.w	r3, r3, fp
 800c9c2:	607b      	str	r3, [r7, #4]
 800c9c4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800c9c8:	f04f 0300 	mov.w	r3, #0
 800c9cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9d0:	f7f3 fe5e 	bl	8000690 <__aeabi_uldivmod>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	4610      	mov	r0, r2
 800c9da:	4619      	mov	r1, r3
 800c9dc:	f7f3 fdd2 	bl	8000584 <__aeabi_ul2d>
 800c9e0:	f04f 0200 	mov.w	r2, #0
 800c9e4:	4b26      	ldr	r3, [pc, #152]	@ (800ca80 <Set_Random_Environmental_Values+0xf8>)
 800c9e6:	f7f3 fc4d 	bl	8000284 <__adddf3>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	f7f3 fdfd 	bl	80005f0 <__aeabi_d2f>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX;  /* P sensor emulation */
 800c9fc:	f001 ff8e 	bl	800e91c <rand>
 800ca00:	4603      	mov	r3, r0
 800ca02:	17da      	asrs	r2, r3, #31
 800ca04:	4698      	mov	r8, r3
 800ca06:	4691      	mov	r9, r2
 800ca08:	4642      	mov	r2, r8
 800ca0a:	464b      	mov	r3, r9
 800ca0c:	f04f 0000 	mov.w	r0, #0
 800ca10:	f04f 0100 	mov.w	r1, #0
 800ca14:	0099      	lsls	r1, r3, #2
 800ca16:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800ca1a:	0090      	lsls	r0, r2, #2
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	460b      	mov	r3, r1
 800ca20:	eb12 0408 	adds.w	r4, r2, r8
 800ca24:	eb43 0509 	adc.w	r5, r3, r9
 800ca28:	f04f 0200 	mov.w	r2, #0
 800ca2c:	f04f 0300 	mov.w	r3, #0
 800ca30:	012b      	lsls	r3, r5, #4
 800ca32:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800ca36:	0122      	lsls	r2, r4, #4
 800ca38:	4614      	mov	r4, r2
 800ca3a:	461d      	mov	r5, r3
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	4629      	mov	r1, r5
 800ca40:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800ca44:	f04f 0300 	mov.w	r3, #0
 800ca48:	f7f3 fe22 	bl	8000690 <__aeabi_uldivmod>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4610      	mov	r0, r2
 800ca52:	4619      	mov	r1, r3
 800ca54:	f7f3 fd96 	bl	8000584 <__aeabi_ul2d>
 800ca58:	f04f 0200 	mov.w	r2, #0
 800ca5c:	4b09      	ldr	r3, [pc, #36]	@ (800ca84 <Set_Random_Environmental_Values+0xfc>)
 800ca5e:	f7f3 fc11 	bl	8000284 <__adddf3>
 800ca62:	4602      	mov	r2, r0
 800ca64:	460b      	mov	r3, r1
 800ca66:	4610      	mov	r0, r2
 800ca68:	4619      	mov	r1, r3
 800ca6a:	f7f3 fdc1 	bl	80005f0 <__aeabi_d2f>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	601a      	str	r2, [r3, #0]
}
 800ca74:	bf00      	nop
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca7e:	bf00      	nop
 800ca80:	403b0000 	.word	0x403b0000
 800ca84:	408f4000 	.word	0x408f4000

0800ca88 <Set_Random_Motion_Values>:
 *
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 800ca88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca8c:	f5ad 7d7a 	sub.w	sp, sp, #1000	@ 0x3e8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 800ca96:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800ca9a:	2b13      	cmp	r3, #19
 800ca9c:	f200 8426 	bhi.w	800d2ec <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800caa0:	f001 ff3c 	bl	800e91c <rand>
 800caa4:	4603      	mov	r3, r0
 800caa6:	17da      	asrs	r2, r3, #31
 800caa8:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 800caac:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 800cab0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800cab4:	2200      	movs	r2, #0
 800cab6:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 800caba:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 800cabe:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 800cac2:	462b      	mov	r3, r5
 800cac4:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	@ 0x320
 800cac8:	4652      	mov	r2, sl
 800caca:	fb02 f203 	mul.w	r2, r2, r3
 800cace:	465b      	mov	r3, fp
 800cad0:	4621      	mov	r1, r4
 800cad2:	fb01 f303 	mul.w	r3, r1, r3
 800cad6:	4413      	add	r3, r2
 800cad8:	4622      	mov	r2, r4
 800cada:	4651      	mov	r1, sl
 800cadc:	fba2 8901 	umull	r8, r9, r2, r1
 800cae0:	444b      	add	r3, r9
 800cae2:	4699      	mov	r9, r3
 800cae4:	4642      	mov	r2, r8
 800cae6:	464b      	mov	r3, r9
 800cae8:	1891      	adds	r1, r2, r2
 800caea:	66b9      	str	r1, [r7, #104]	@ 0x68
 800caec:	415b      	adcs	r3, r3
 800caee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800caf0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800caf4:	eb12 0108 	adds.w	r1, r2, r8
 800caf8:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
 800cafc:	eb43 0309 	adc.w	r3, r3, r9
 800cb00:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 800cb04:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800cb08:	f04f 0300 	mov.w	r3, #0
 800cb0c:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
 800cb10:	f7f3 fdbe 	bl	8000690 <__aeabi_uldivmod>
 800cb14:	4602      	mov	r2, r0
 800cb16:	460b      	mov	r3, r1
 800cb18:	f112 010a 	adds.w	r1, r2, #10
 800cb1c:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 800cb20:	f143 0300 	adc.w	r3, r3, #0
 800cb24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cb28:	4bec      	ldr	r3, [pc, #944]	@ (800cedc <Set_Random_Motion_Values+0x454>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cb32:	4413      	add	r3, r2
 800cb34:	461a      	mov	r2, r3
 800cb36:	4be9      	ldr	r3, [pc, #932]	@ (800cedc <Set_Random_Motion_Values+0x454>)
 800cb38:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800cb3a:	f001 feef 	bl	800e91c <rand>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	17da      	asrs	r2, r3, #31
 800cb42:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 800cb46:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 800cb4a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 800cb54:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 800cb58:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 800cb5c:	462b      	mov	r3, r5
 800cb5e:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 800cb62:	4642      	mov	r2, r8
 800cb64:	fb02 f203 	mul.w	r2, r2, r3
 800cb68:	464b      	mov	r3, r9
 800cb6a:	4621      	mov	r1, r4
 800cb6c:	fb01 f303 	mul.w	r3, r1, r3
 800cb70:	4413      	add	r3, r2
 800cb72:	4622      	mov	r2, r4
 800cb74:	4641      	mov	r1, r8
 800cb76:	fba2 1201 	umull	r1, r2, r2, r1
 800cb7a:	f8c7 23dc 	str.w	r2, [r7, #988]	@ 0x3dc
 800cb7e:	460a      	mov	r2, r1
 800cb80:	f8c7 23d8 	str.w	r2, [r7, #984]	@ 0x3d8
 800cb84:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 800cb88:	4413      	add	r3, r2
 800cb8a:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 800cb8e:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 800cb92:	4622      	mov	r2, r4
 800cb94:	462b      	mov	r3, r5
 800cb96:	f04f 0000 	mov.w	r0, #0
 800cb9a:	f04f 0100 	mov.w	r1, #0
 800cb9e:	0099      	lsls	r1, r3, #2
 800cba0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cba4:	0090      	lsls	r0, r2, #2
 800cba6:	4602      	mov	r2, r0
 800cba8:	460b      	mov	r3, r1
 800cbaa:	4621      	mov	r1, r4
 800cbac:	1851      	adds	r1, r2, r1
 800cbae:	f8c7 1300 	str.w	r1, [r7, #768]	@ 0x300
 800cbb2:	4629      	mov	r1, r5
 800cbb4:	eb43 0101 	adc.w	r1, r3, r1
 800cbb8:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 800cbbc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800cbc0:	f04f 0300 	mov.w	r3, #0
 800cbc4:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 800cbc8:	f7f3 fd62 	bl	8000690 <__aeabi_uldivmod>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	460b      	mov	r3, r1
 800cbd0:	f06f 0009 	mvn.w	r0, #9
 800cbd4:	f04f 31ff 	mov.w	r1, #4294967295
 800cbd8:	1a80      	subs	r0, r0, r2
 800cbda:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800cbde:	eb61 0303 	sbc.w	r3, r1, r3
 800cbe2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cbe6:	4bbd      	ldr	r3, [pc, #756]	@ (800cedc <Set_Random_Motion_Values+0x454>)
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	461a      	mov	r2, r3
 800cbec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cbf0:	4413      	add	r3, r2
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	4bb9      	ldr	r3, [pc, #740]	@ (800cedc <Set_Random_Motion_Values+0x454>)
 800cbf6:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800cbf8:	f001 fe90 	bl	800e91c <rand>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	17da      	asrs	r2, r3, #31
 800cc00:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 800cc04:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 800cc08:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 800cc12:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 800cc16:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 800cc1a:	462b      	mov	r3, r5
 800cc1c:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 800cc20:	4642      	mov	r2, r8
 800cc22:	fb02 f203 	mul.w	r2, r2, r3
 800cc26:	464b      	mov	r3, r9
 800cc28:	4621      	mov	r1, r4
 800cc2a:	fb01 f303 	mul.w	r3, r1, r3
 800cc2e:	4413      	add	r3, r2
 800cc30:	4622      	mov	r2, r4
 800cc32:	4641      	mov	r1, r8
 800cc34:	fba2 1201 	umull	r1, r2, r2, r1
 800cc38:	f8c7 23d4 	str.w	r2, [r7, #980]	@ 0x3d4
 800cc3c:	460a      	mov	r2, r1
 800cc3e:	f8c7 23d0 	str.w	r2, [r7, #976]	@ 0x3d0
 800cc42:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 800cc46:	4413      	add	r3, r2
 800cc48:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 800cc4c:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 800cc50:	4622      	mov	r2, r4
 800cc52:	462b      	mov	r3, r5
 800cc54:	f04f 0000 	mov.w	r0, #0
 800cc58:	f04f 0100 	mov.w	r1, #0
 800cc5c:	00d9      	lsls	r1, r3, #3
 800cc5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cc62:	00d0      	lsls	r0, r2, #3
 800cc64:	4602      	mov	r2, r0
 800cc66:	460b      	mov	r3, r1
 800cc68:	4621      	mov	r1, r4
 800cc6a:	1a51      	subs	r1, r2, r1
 800cc6c:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 800cc70:	4629      	mov	r1, r5
 800cc72:	eb63 0301 	sbc.w	r3, r3, r1
 800cc76:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800cc7a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800cc7e:	f04f 0300 	mov.w	r3, #0
 800cc82:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 800cc86:	f7f3 fd03 	bl	8000690 <__aeabi_uldivmod>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	f112 010a 	adds.w	r1, r2, #10
 800cc92:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 800cc96:	f143 0300 	adc.w	r3, r3, #0
 800cc9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cc9e:	4b8f      	ldr	r3, [pc, #572]	@ (800cedc <Set_Random_Motion_Values+0x454>)
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	461a      	mov	r2, r3
 800cca4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cca8:	4413      	add	r3, r2
 800ccaa:	461a      	mov	r2, r3
 800ccac:	4b8b      	ldr	r3, [pc, #556]	@ (800cedc <Set_Random_Motion_Values+0x454>)
 800ccae:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 800ccb0:	f001 fe34 	bl	800e91c <rand>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	17da      	asrs	r2, r3, #31
 800ccb8:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800ccbc:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 800ccc0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 800ccca:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 800ccce:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 800ccd2:	462b      	mov	r3, r5
 800ccd4:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	@ 0x2d8
 800ccd8:	4642      	mov	r2, r8
 800ccda:	fb02 f203 	mul.w	r2, r2, r3
 800ccde:	464b      	mov	r3, r9
 800cce0:	4621      	mov	r1, r4
 800cce2:	fb01 f303 	mul.w	r3, r1, r3
 800cce6:	4413      	add	r3, r2
 800cce8:	4622      	mov	r2, r4
 800ccea:	4641      	mov	r1, r8
 800ccec:	fba2 1201 	umull	r1, r2, r2, r1
 800ccf0:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 800ccf4:	460a      	mov	r2, r1
 800ccf6:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 800ccfa:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 800ccfe:	4413      	add	r3, r2
 800cd00:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 800cd04:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	@ 0x3c8
 800cd08:	460b      	mov	r3, r1
 800cd0a:	18db      	adds	r3, r3, r3
 800cd0c:	663b      	str	r3, [r7, #96]	@ 0x60
 800cd0e:	4613      	mov	r3, r2
 800cd10:	eb42 0303 	adc.w	r3, r2, r3
 800cd14:	667b      	str	r3, [r7, #100]	@ 0x64
 800cd16:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800cd1a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800cd1e:	f04f 0300 	mov.w	r3, #0
 800cd22:	f7f3 fcb5 	bl	8000690 <__aeabi_uldivmod>
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800cd2e:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800cd32:	f143 0300 	adc.w	r3, r3, #0
 800cd36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cd3a:	4b69      	ldr	r3, [pc, #420]	@ (800cee0 <Set_Random_Motion_Values+0x458>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cd44:	4413      	add	r3, r2
 800cd46:	461a      	mov	r2, r3
 800cd48:	4b65      	ldr	r3, [pc, #404]	@ (800cee0 <Set_Random_Motion_Values+0x458>)
 800cd4a:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800cd4c:	f001 fde6 	bl	800e91c <rand>
 800cd50:	4603      	mov	r3, r0
 800cd52:	17da      	asrs	r2, r3, #31
 800cd54:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 800cd58:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 800cd5c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800cd60:	2200      	movs	r2, #0
 800cd62:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 800cd66:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 800cd6a:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 800cd6e:	462b      	mov	r3, r5
 800cd70:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	@ 0x2c8
 800cd74:	4642      	mov	r2, r8
 800cd76:	fb02 f203 	mul.w	r2, r2, r3
 800cd7a:	464b      	mov	r3, r9
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	fb01 f303 	mul.w	r3, r1, r3
 800cd82:	4413      	add	r3, r2
 800cd84:	4622      	mov	r2, r4
 800cd86:	4641      	mov	r1, r8
 800cd88:	fba2 1201 	umull	r1, r2, r2, r1
 800cd8c:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 800cd90:	460a      	mov	r2, r1
 800cd92:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 800cd96:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 800cda0:	f04f 0000 	mov.w	r0, #0
 800cda4:	f04f 0100 	mov.w	r1, #0
 800cda8:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	@ 0x3c0
 800cdac:	462b      	mov	r3, r5
 800cdae:	0099      	lsls	r1, r3, #2
 800cdb0:	4623      	mov	r3, r4
 800cdb2:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800cdb6:	4623      	mov	r3, r4
 800cdb8:	0098      	lsls	r0, r3, #2
 800cdba:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800cdbe:	f04f 0300 	mov.w	r3, #0
 800cdc2:	f7f3 fc65 	bl	8000690 <__aeabi_uldivmod>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800cdce:	f04f 31ff 	mov.w	r1, #4294967295
 800cdd2:	1a80      	subs	r0, r0, r2
 800cdd4:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 800cdd8:	eb61 0303 	sbc.w	r3, r1, r3
 800cddc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cde0:	4b3f      	ldr	r3, [pc, #252]	@ (800cee0 <Set_Random_Motion_Values+0x458>)
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	461a      	mov	r2, r3
 800cde6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cdea:	4413      	add	r3, r2
 800cdec:	461a      	mov	r2, r3
 800cdee:	4b3c      	ldr	r3, [pc, #240]	@ (800cee0 <Set_Random_Motion_Values+0x458>)
 800cdf0:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 800cdf2:	f001 fd93 	bl	800e91c <rand>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	17da      	asrs	r2, r3, #31
 800cdfa:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 800cdfe:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 800ce02:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800ce06:	2200      	movs	r2, #0
 800ce08:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800ce0c:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 800ce10:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 800ce14:	462b      	mov	r3, r5
 800ce16:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	@ 0x2b8
 800ce1a:	4642      	mov	r2, r8
 800ce1c:	fb02 f203 	mul.w	r2, r2, r3
 800ce20:	464b      	mov	r3, r9
 800ce22:	4621      	mov	r1, r4
 800ce24:	fb01 f303 	mul.w	r3, r1, r3
 800ce28:	4413      	add	r3, r2
 800ce2a:	4622      	mov	r2, r4
 800ce2c:	4641      	mov	r1, r8
 800ce2e:	fba2 1201 	umull	r1, r2, r2, r1
 800ce32:	f8c7 23bc 	str.w	r2, [r7, #956]	@ 0x3bc
 800ce36:	460a      	mov	r2, r1
 800ce38:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
 800ce3c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 800ce40:	4413      	add	r3, r2
 800ce42:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 800ce46:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 800ce4a:	4622      	mov	r2, r4
 800ce4c:	462b      	mov	r3, r5
 800ce4e:	1891      	adds	r1, r2, r2
 800ce50:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ce52:	415b      	adcs	r3, r3
 800ce54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ce5a:	4621      	mov	r1, r4
 800ce5c:	1851      	adds	r1, r2, r1
 800ce5e:	6539      	str	r1, [r7, #80]	@ 0x50
 800ce60:	4629      	mov	r1, r5
 800ce62:	eb43 0101 	adc.w	r1, r3, r1
 800ce66:	6579      	str	r1, [r7, #84]	@ 0x54
 800ce68:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	18db      	adds	r3, r3, r3
 800ce70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce72:	4613      	mov	r3, r2
 800ce74:	eb42 0303 	adc.w	r3, r2, r3
 800ce78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce7a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800ce7e:	4618      	mov	r0, r3
 800ce80:	4621      	mov	r1, r4
 800ce82:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800ce86:	f04f 0300 	mov.w	r3, #0
 800ce8a:	f7f3 fc01 	bl	8000690 <__aeabi_uldivmod>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800ce96:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800ce9a:	f143 0300 	adc.w	r3, r3, #0
 800ce9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cea2:	4b0f      	ldr	r3, [pc, #60]	@ (800cee0 <Set_Random_Motion_Values+0x458>)
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	461a      	mov	r2, r3
 800cea8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ceac:	4413      	add	r3, r2
 800ceae:	461a      	mov	r2, r3
 800ceb0:	4b0b      	ldr	r3, [pc, #44]	@ (800cee0 <Set_Random_Motion_Values+0x458>)
 800ceb2:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800ceb4:	f001 fd32 	bl	800e91c <rand>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	17da      	asrs	r2, r3, #31
 800cebc:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800cec0:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 800cec4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800cec8:	2200      	movs	r2, #0
 800ceca:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 800cece:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 800ced2:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 800ced6:	462b      	mov	r3, r5
 800ced8:	e004      	b.n	800cee4 <Set_Random_Motion_Values+0x45c>
 800ceda:	bf00      	nop
 800cedc:	2000072c 	.word	0x2000072c
 800cee0:	20000738 	.word	0x20000738
 800cee4:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	@ 0x2a8
 800cee8:	4642      	mov	r2, r8
 800ceea:	fb02 f203 	mul.w	r2, r2, r3
 800ceee:	464b      	mov	r3, r9
 800cef0:	4621      	mov	r1, r4
 800cef2:	fb01 f303 	mul.w	r3, r1, r3
 800cef6:	4413      	add	r3, r2
 800cef8:	4622      	mov	r2, r4
 800cefa:	4641      	mov	r1, r8
 800cefc:	fba2 1201 	umull	r1, r2, r2, r1
 800cf00:	f8c7 23b4 	str.w	r2, [r7, #948]	@ 0x3b4
 800cf04:	460a      	mov	r2, r1
 800cf06:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 800cf0a:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 800cf0e:	4413      	add	r3, r2
 800cf10:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 800cf14:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	@ 0x3b0
 800cf18:	4622      	mov	r2, r4
 800cf1a:	462b      	mov	r3, r5
 800cf1c:	1891      	adds	r1, r2, r2
 800cf1e:	6439      	str	r1, [r7, #64]	@ 0x40
 800cf20:	415b      	adcs	r3, r3
 800cf22:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800cf28:	4621      	mov	r1, r4
 800cf2a:	1851      	adds	r1, r2, r1
 800cf2c:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 800cf30:	4629      	mov	r1, r5
 800cf32:	eb43 0101 	adc.w	r1, r3, r1
 800cf36:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 800cf3a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800cf3e:	f04f 0300 	mov.w	r3, #0
 800cf42:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
 800cf46:	f7f3 fba3 	bl	8000690 <__aeabi_uldivmod>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	1cd1      	adds	r1, r2, #3
 800cf50:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800cf54:	f143 0300 	adc.w	r3, r3, #0
 800cf58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf5c:	4be1      	ldr	r3, [pc, #900]	@ (800d2e4 <Set_Random_Motion_Values+0x85c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	461a      	mov	r2, r3
 800cf62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cf66:	4413      	add	r3, r2
 800cf68:	461a      	mov	r2, r3
 800cf6a:	4bde      	ldr	r3, [pc, #888]	@ (800d2e4 <Set_Random_Motion_Values+0x85c>)
 800cf6c:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800cf6e:	f001 fcd5 	bl	800e91c <rand>
 800cf72:	4603      	mov	r3, r0
 800cf74:	17da      	asrs	r2, r3, #31
 800cf76:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800cf7a:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 800cf7e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800cf82:	2200      	movs	r2, #0
 800cf84:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 800cf88:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 800cf8c:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 800cf90:	462b      	mov	r3, r5
 800cf92:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 800cf96:	4642      	mov	r2, r8
 800cf98:	fb02 f203 	mul.w	r2, r2, r3
 800cf9c:	464b      	mov	r3, r9
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	fb01 f303 	mul.w	r3, r1, r3
 800cfa4:	4413      	add	r3, r2
 800cfa6:	4622      	mov	r2, r4
 800cfa8:	4641      	mov	r1, r8
 800cfaa:	fba2 1201 	umull	r1, r2, r2, r1
 800cfae:	f8c7 23ac 	str.w	r2, [r7, #940]	@ 0x3ac
 800cfb2:	460a      	mov	r2, r1
 800cfb4:	f8c7 23a8 	str.w	r2, [r7, #936]	@ 0x3a8
 800cfb8:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 800cfbc:	4413      	add	r3, r2
 800cfbe:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 800cfc2:	f04f 0000 	mov.w	r0, #0
 800cfc6:	f04f 0100 	mov.w	r1, #0
 800cfca:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 800cfce:	462b      	mov	r3, r5
 800cfd0:	0099      	lsls	r1, r3, #2
 800cfd2:	4623      	mov	r3, r4
 800cfd4:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800cfd8:	4623      	mov	r3, r4
 800cfda:	0098      	lsls	r0, r3, #2
 800cfdc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800cfe0:	f04f 0300 	mov.w	r3, #0
 800cfe4:	f7f3 fb54 	bl	8000690 <__aeabi_uldivmod>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	460b      	mov	r3, r1
 800cfec:	f06f 0002 	mvn.w	r0, #2
 800cff0:	f04f 31ff 	mov.w	r1, #4294967295
 800cff4:	1a80      	subs	r0, r0, r2
 800cff6:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 800cffa:	eb61 0303 	sbc.w	r3, r1, r3
 800cffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d002:	4bb8      	ldr	r3, [pc, #736]	@ (800d2e4 <Set_Random_Motion_Values+0x85c>)
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	461a      	mov	r2, r3
 800d008:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d00c:	4413      	add	r3, r2
 800d00e:	461a      	mov	r2, r3
 800d010:	4bb4      	ldr	r3, [pc, #720]	@ (800d2e4 <Set_Random_Motion_Values+0x85c>)
 800d012:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800d014:	f001 fc82 	bl	800e91c <rand>
 800d018:	4603      	mov	r3, r0
 800d01a:	17da      	asrs	r2, r3, #31
 800d01c:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 800d020:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 800d024:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d028:	2200      	movs	r2, #0
 800d02a:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 800d02e:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 800d032:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 800d036:	462b      	mov	r3, r5
 800d038:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 800d03c:	4642      	mov	r2, r8
 800d03e:	fb02 f203 	mul.w	r2, r2, r3
 800d042:	464b      	mov	r3, r9
 800d044:	4621      	mov	r1, r4
 800d046:	fb01 f303 	mul.w	r3, r1, r3
 800d04a:	4413      	add	r3, r2
 800d04c:	4622      	mov	r2, r4
 800d04e:	4641      	mov	r1, r8
 800d050:	fba2 1201 	umull	r1, r2, r2, r1
 800d054:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 800d058:	460a      	mov	r2, r1
 800d05a:	f8c7 23a0 	str.w	r2, [r7, #928]	@ 0x3a0
 800d05e:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 800d062:	4413      	add	r3, r2
 800d064:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 800d068:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	@ 0x3a0
 800d06c:	4622      	mov	r2, r4
 800d06e:	462b      	mov	r3, r5
 800d070:	f04f 0000 	mov.w	r0, #0
 800d074:	f04f 0100 	mov.w	r1, #0
 800d078:	0099      	lsls	r1, r3, #2
 800d07a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800d07e:	0090      	lsls	r0, r2, #2
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	4621      	mov	r1, r4
 800d086:	1851      	adds	r1, r2, r1
 800d088:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 800d08c:	4629      	mov	r1, r5
 800d08e:	eb43 0101 	adc.w	r1, r3, r1
 800d092:	f8c7 127c 	str.w	r1, [r7, #636]	@ 0x27c
 800d096:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d09a:	f04f 0300 	mov.w	r3, #0
 800d09e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 800d0a2:	f7f3 faf5 	bl	8000690 <__aeabi_uldivmod>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	1cd1      	adds	r1, r2, #3
 800d0ac:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800d0b0:	f143 0300 	adc.w	r3, r3, #0
 800d0b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d0b8:	4b8a      	ldr	r3, [pc, #552]	@ (800d2e4 <Set_Random_Motion_Values+0x85c>)
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d0c2:	4413      	add	r3, r2
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	4b87      	ldr	r3, [pc, #540]	@ (800d2e4 <Set_Random_Motion_Values+0x85c>)
 800d0c8:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800d0ca:	f001 fc27 	bl	800e91c <rand>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	17da      	asrs	r2, r3, #31
 800d0d2:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 800d0d6:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 800d0da:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 800d0e4:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 800d0e8:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 800d0ec:	462b      	mov	r3, r5
 800d0ee:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	@ 0x268
 800d0f2:	4642      	mov	r2, r8
 800d0f4:	fb02 f203 	mul.w	r2, r2, r3
 800d0f8:	464b      	mov	r3, r9
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	fb01 f303 	mul.w	r3, r1, r3
 800d100:	4413      	add	r3, r2
 800d102:	4622      	mov	r2, r4
 800d104:	4641      	mov	r1, r8
 800d106:	fba2 1201 	umull	r1, r2, r2, r1
 800d10a:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
 800d10e:	460a      	mov	r2, r1
 800d110:	f8c7 2398 	str.w	r2, [r7, #920]	@ 0x398
 800d114:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 800d118:	4413      	add	r3, r2
 800d11a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 800d11e:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 800d122:	4622      	mov	r2, r4
 800d124:	462b      	mov	r3, r5
 800d126:	1891      	adds	r1, r2, r2
 800d128:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d12a:	415b      	adcs	r3, r3
 800d12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d12e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d132:	4621      	mov	r1, r4
 800d134:	1851      	adds	r1, r2, r1
 800d136:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 800d13a:	4629      	mov	r1, r5
 800d13c:	eb43 0101 	adc.w	r1, r3, r1
 800d140:	f8c7 1264 	str.w	r1, [r7, #612]	@ 0x264
 800d144:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d148:	f04f 0300 	mov.w	r3, #0
 800d14c:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 800d150:	f7f3 fa9e 	bl	8000690 <__aeabi_uldivmod>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800d15c:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800d160:	f143 0300 	adc.w	r3, r3, #0
 800d164:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d168:	4b5f      	ldr	r3, [pc, #380]	@ (800d2e8 <Set_Random_Motion_Values+0x860>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	461a      	mov	r2, r3
 800d16e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d172:	1ad3      	subs	r3, r2, r3
 800d174:	461a      	mov	r2, r3
 800d176:	4b5c      	ldr	r3, [pc, #368]	@ (800d2e8 <Set_Random_Motion_Values+0x860>)
 800d178:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800d17a:	f001 fbcf 	bl	800e91c <rand>
 800d17e:	4603      	mov	r3, r0
 800d180:	17da      	asrs	r2, r3, #31
 800d182:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 800d186:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 800d18a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d18e:	2200      	movs	r2, #0
 800d190:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 800d194:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 800d198:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 800d19c:	462b      	mov	r3, r5
 800d19e:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	@ 0x250
 800d1a2:	4642      	mov	r2, r8
 800d1a4:	fb02 f203 	mul.w	r2, r2, r3
 800d1a8:	464b      	mov	r3, r9
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	fb01 f303 	mul.w	r3, r1, r3
 800d1b0:	4413      	add	r3, r2
 800d1b2:	4622      	mov	r2, r4
 800d1b4:	4641      	mov	r1, r8
 800d1b6:	fba2 1201 	umull	r1, r2, r2, r1
 800d1ba:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 800d1be:	460a      	mov	r2, r1
 800d1c0:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
 800d1c4:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 800d1c8:	4413      	add	r3, r2
 800d1ca:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 800d1ce:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 800d1d2:	4622      	mov	r2, r4
 800d1d4:	462b      	mov	r3, r5
 800d1d6:	f04f 0000 	mov.w	r0, #0
 800d1da:	f04f 0100 	mov.w	r1, #0
 800d1de:	0099      	lsls	r1, r3, #2
 800d1e0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800d1e4:	0090      	lsls	r0, r2, #2
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	4621      	mov	r1, r4
 800d1ec:	1851      	adds	r1, r2, r1
 800d1ee:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	eb43 0101 	adc.w	r1, r3, r1
 800d1f8:	f8c7 124c 	str.w	r1, [r7, #588]	@ 0x24c
 800d1fc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d200:	f04f 0300 	mov.w	r3, #0
 800d204:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 800d208:	f7f3 fa42 	bl	8000690 <__aeabi_uldivmod>
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800d214:	67b9      	str	r1, [r7, #120]	@ 0x78
 800d216:	f143 0300 	adc.w	r3, r3, #0
 800d21a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d21c:	4b32      	ldr	r3, [pc, #200]	@ (800d2e8 <Set_Random_Motion_Values+0x860>)
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	461a      	mov	r2, r3
 800d222:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d224:	4413      	add	r3, r2
 800d226:	461a      	mov	r2, r3
 800d228:	4b2f      	ldr	r3, [pc, #188]	@ (800d2e8 <Set_Random_Motion_Values+0x860>)
 800d22a:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800d22c:	f001 fb76 	bl	800e91c <rand>
 800d230:	4603      	mov	r3, r0
 800d232:	17da      	asrs	r2, r3, #31
 800d234:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800d238:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 800d23c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d240:	2200      	movs	r2, #0
 800d242:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 800d246:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 800d24a:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 800d24e:	462b      	mov	r3, r5
 800d250:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	@ 0x238
 800d254:	4642      	mov	r2, r8
 800d256:	fb02 f203 	mul.w	r2, r2, r3
 800d25a:	464b      	mov	r3, r9
 800d25c:	4621      	mov	r1, r4
 800d25e:	fb01 f303 	mul.w	r3, r1, r3
 800d262:	4413      	add	r3, r2
 800d264:	4622      	mov	r2, r4
 800d266:	4641      	mov	r1, r8
 800d268:	fba2 1201 	umull	r1, r2, r2, r1
 800d26c:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 800d270:	460a      	mov	r2, r1
 800d272:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
 800d276:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 800d27a:	4413      	add	r3, r2
 800d27c:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 800d280:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 800d284:	4622      	mov	r2, r4
 800d286:	462b      	mov	r3, r5
 800d288:	f04f 0000 	mov.w	r0, #0
 800d28c:	f04f 0100 	mov.w	r1, #0
 800d290:	00d9      	lsls	r1, r3, #3
 800d292:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d296:	00d0      	lsls	r0, r2, #3
 800d298:	4602      	mov	r2, r0
 800d29a:	460b      	mov	r3, r1
 800d29c:	4621      	mov	r1, r4
 800d29e:	1a51      	subs	r1, r2, r1
 800d2a0:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	eb63 0301 	sbc.w	r3, r3, r1
 800d2aa:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800d2ae:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d2b2:	f04f 0300 	mov.w	r3, #0
 800d2b6:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 800d2ba:	f7f3 f9e9 	bl	8000690 <__aeabi_uldivmod>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800d2c6:	6739      	str	r1, [r7, #112]	@ 0x70
 800d2c8:	f143 0300 	adc.w	r3, r3, #0
 800d2cc:	677b      	str	r3, [r7, #116]	@ 0x74
 800d2ce:	4b06      	ldr	r3, [pc, #24]	@ (800d2e8 <Set_Random_Motion_Values+0x860>)
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	461a      	mov	r2, r3
 800d2da:	4b03      	ldr	r3, [pc, #12]	@ (800d2e8 <Set_Random_Motion_Values+0x860>)
 800d2dc:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }
}
 800d2de:	f000 bc37 	b.w	800db50 <Set_Random_Motion_Values+0x10c8>
 800d2e2:	bf00      	nop
 800d2e4:	20000744 	.word	0x20000744
 800d2e8:	20000750 	.word	0x20000750
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800d2ec:	f001 fb16 	bl	800e91c <rand>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	17da      	asrs	r2, r3, #31
 800d2f4:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 800d2f8:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 800d2fc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d300:	2200      	movs	r2, #0
 800d302:	469a      	mov	sl, r3
 800d304:	4693      	mov	fp, r2
 800d306:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800d30a:	460b      	mov	r3, r1
 800d30c:	fb0a f203 	mul.w	r2, sl, r3
 800d310:	4603      	mov	r3, r0
 800d312:	fb03 f30b 	mul.w	r3, r3, fp
 800d316:	4413      	add	r3, r2
 800d318:	4602      	mov	r2, r0
 800d31a:	fba2 450a 	umull	r4, r5, r2, sl
 800d31e:	442b      	add	r3, r5
 800d320:	461d      	mov	r5, r3
 800d322:	4622      	mov	r2, r4
 800d324:	462b      	mov	r3, r5
 800d326:	1891      	adds	r1, r2, r2
 800d328:	6339      	str	r1, [r7, #48]	@ 0x30
 800d32a:	415b      	adcs	r3, r3
 800d32c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d32e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d332:	1911      	adds	r1, r2, r4
 800d334:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
 800d338:	416b      	adcs	r3, r5
 800d33a:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 800d33e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d342:	f04f 0300 	mov.w	r3, #0
 800d346:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800d34a:	f7f3 f9a1 	bl	8000690 <__aeabi_uldivmod>
 800d34e:	4602      	mov	r2, r0
 800d350:	460b      	mov	r3, r1
 800d352:	f06f 0009 	mvn.w	r0, #9
 800d356:	f04f 31ff 	mov.w	r1, #4294967295
 800d35a:	1a80      	subs	r0, r0, r2
 800d35c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 800d360:	eb61 0303 	sbc.w	r3, r1, r3
 800d364:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800d368:	4beb      	ldr	r3, [pc, #940]	@ (800d718 <Set_Random_Motion_Values+0xc90>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	461a      	mov	r2, r3
 800d36e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d372:	4413      	add	r3, r2
 800d374:	461a      	mov	r2, r3
 800d376:	4be8      	ldr	r3, [pc, #928]	@ (800d718 <Set_Random_Motion_Values+0xc90>)
 800d378:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800d37a:	f001 facf 	bl	800e91c <rand>
 800d37e:	4603      	mov	r3, r0
 800d380:	17da      	asrs	r2, r3, #31
 800d382:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 800d386:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 800d38a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d38e:	2200      	movs	r2, #0
 800d390:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 800d394:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 800d398:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 800d39c:	462b      	mov	r3, r5
 800d39e:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 800d3a2:	4642      	mov	r2, r8
 800d3a4:	fb02 f203 	mul.w	r2, r2, r3
 800d3a8:	464b      	mov	r3, r9
 800d3aa:	4621      	mov	r1, r4
 800d3ac:	fb01 f303 	mul.w	r3, r1, r3
 800d3b0:	4413      	add	r3, r2
 800d3b2:	4622      	mov	r2, r4
 800d3b4:	4641      	mov	r1, r8
 800d3b6:	fba2 1201 	umull	r1, r2, r2, r1
 800d3ba:	f8c7 2384 	str.w	r2, [r7, #900]	@ 0x384
 800d3be:	460a      	mov	r2, r1
 800d3c0:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 800d3c4:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 800d3c8:	4413      	add	r3, r2
 800d3ca:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 800d3ce:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 800d3d2:	4622      	mov	r2, r4
 800d3d4:	462b      	mov	r3, r5
 800d3d6:	f04f 0000 	mov.w	r0, #0
 800d3da:	f04f 0100 	mov.w	r1, #0
 800d3de:	0099      	lsls	r1, r3, #2
 800d3e0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800d3e4:	0090      	lsls	r0, r2, #2
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	4621      	mov	r1, r4
 800d3ec:	1851      	adds	r1, r2, r1
 800d3ee:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 800d3f2:	4629      	mov	r1, r5
 800d3f4:	eb43 0101 	adc.w	r1, r3, r1
 800d3f8:	f8c7 120c 	str.w	r1, [r7, #524]	@ 0x20c
 800d3fc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d400:	f04f 0300 	mov.w	r3, #0
 800d404:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 800d408:	f7f3 f942 	bl	8000690 <__aeabi_uldivmod>
 800d40c:	4602      	mov	r2, r0
 800d40e:	460b      	mov	r3, r1
 800d410:	f112 010a 	adds.w	r1, r2, #10
 800d414:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 800d418:	f143 0300 	adc.w	r3, r3, #0
 800d41c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800d420:	4bbd      	ldr	r3, [pc, #756]	@ (800d718 <Set_Random_Motion_Values+0xc90>)
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	461a      	mov	r2, r3
 800d426:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d42a:	4413      	add	r3, r2
 800d42c:	461a      	mov	r2, r3
 800d42e:	4bba      	ldr	r3, [pc, #744]	@ (800d718 <Set_Random_Motion_Values+0xc90>)
 800d430:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800d432:	f001 fa73 	bl	800e91c <rand>
 800d436:	4603      	mov	r3, r0
 800d438:	17da      	asrs	r2, r3, #31
 800d43a:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 800d43e:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 800d442:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d446:	2200      	movs	r2, #0
 800d448:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 800d44c:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 800d450:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 800d454:	462b      	mov	r3, r5
 800d456:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 800d45a:	4642      	mov	r2, r8
 800d45c:	fb02 f203 	mul.w	r2, r2, r3
 800d460:	464b      	mov	r3, r9
 800d462:	4621      	mov	r1, r4
 800d464:	fb01 f303 	mul.w	r3, r1, r3
 800d468:	4413      	add	r3, r2
 800d46a:	4622      	mov	r2, r4
 800d46c:	4641      	mov	r1, r8
 800d46e:	fba2 1201 	umull	r1, r2, r2, r1
 800d472:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 800d476:	460a      	mov	r2, r1
 800d478:	f8c7 2378 	str.w	r2, [r7, #888]	@ 0x378
 800d47c:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 800d480:	4413      	add	r3, r2
 800d482:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 800d486:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 800d48a:	4622      	mov	r2, r4
 800d48c:	462b      	mov	r3, r5
 800d48e:	f04f 0000 	mov.w	r0, #0
 800d492:	f04f 0100 	mov.w	r1, #0
 800d496:	00d9      	lsls	r1, r3, #3
 800d498:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d49c:	00d0      	lsls	r0, r2, #3
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	4621      	mov	r1, r4
 800d4a4:	1a51      	subs	r1, r2, r1
 800d4a6:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 800d4aa:	4629      	mov	r1, r5
 800d4ac:	eb63 0301 	sbc.w	r3, r3, r1
 800d4b0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 800d4b4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d4b8:	f04f 0300 	mov.w	r3, #0
 800d4bc:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 800d4c0:	f7f3 f8e6 	bl	8000690 <__aeabi_uldivmod>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	f06f 0009 	mvn.w	r0, #9
 800d4cc:	f04f 31ff 	mov.w	r1, #4294967295
 800d4d0:	1a80      	subs	r0, r0, r2
 800d4d2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 800d4d6:	eb61 0303 	sbc.w	r3, r1, r3
 800d4da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800d4de:	4b8e      	ldr	r3, [pc, #568]	@ (800d718 <Set_Random_Motion_Values+0xc90>)
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800d4e8:	4413      	add	r3, r2
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	4b8a      	ldr	r3, [pc, #552]	@ (800d718 <Set_Random_Motion_Values+0xc90>)
 800d4ee:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 800d4f0:	f001 fa14 	bl	800e91c <rand>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	17da      	asrs	r2, r3, #31
 800d4f8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800d4fc:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 800d500:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d504:	2200      	movs	r2, #0
 800d506:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800d50a:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 800d50e:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 800d512:	462b      	mov	r3, r5
 800d514:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 800d518:	4642      	mov	r2, r8
 800d51a:	fb02 f203 	mul.w	r2, r2, r3
 800d51e:	464b      	mov	r3, r9
 800d520:	4621      	mov	r1, r4
 800d522:	fb01 f303 	mul.w	r3, r1, r3
 800d526:	4413      	add	r3, r2
 800d528:	4622      	mov	r2, r4
 800d52a:	4641      	mov	r1, r8
 800d52c:	fba2 1201 	umull	r1, r2, r2, r1
 800d530:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 800d534:	460a      	mov	r2, r1
 800d536:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 800d53a:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 800d53e:	4413      	add	r3, r2
 800d540:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 800d544:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	@ 0x370
 800d548:	460b      	mov	r3, r1
 800d54a:	18db      	adds	r3, r3, r3
 800d54c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d54e:	4613      	mov	r3, r2
 800d550:	eb42 0303 	adc.w	r3, r2, r3
 800d554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d556:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800d55a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d55e:	f04f 0300 	mov.w	r3, #0
 800d562:	f7f3 f895 	bl	8000690 <__aeabi_uldivmod>
 800d566:	4602      	mov	r2, r0
 800d568:	460b      	mov	r3, r1
 800d56a:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800d56e:	f04f 31ff 	mov.w	r1, #4294967295
 800d572:	1a80      	subs	r0, r0, r2
 800d574:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 800d578:	eb61 0303 	sbc.w	r3, r1, r3
 800d57c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800d580:	4b66      	ldr	r3, [pc, #408]	@ (800d71c <Set_Random_Motion_Values+0xc94>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	461a      	mov	r2, r3
 800d586:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800d58a:	4413      	add	r3, r2
 800d58c:	461a      	mov	r2, r3
 800d58e:	4b63      	ldr	r3, [pc, #396]	@ (800d71c <Set_Random_Motion_Values+0xc94>)
 800d590:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800d592:	f001 f9c3 	bl	800e91c <rand>
 800d596:	4603      	mov	r3, r0
 800d598:	17da      	asrs	r2, r3, #31
 800d59a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800d59e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800d5a2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800d5ac:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 800d5b0:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 800d5b4:	462b      	mov	r3, r5
 800d5b6:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	@ 0x1d0
 800d5ba:	4642      	mov	r2, r8
 800d5bc:	fb02 f203 	mul.w	r2, r2, r3
 800d5c0:	464b      	mov	r3, r9
 800d5c2:	4621      	mov	r1, r4
 800d5c4:	fb01 f303 	mul.w	r3, r1, r3
 800d5c8:	4413      	add	r3, r2
 800d5ca:	4622      	mov	r2, r4
 800d5cc:	4641      	mov	r1, r8
 800d5ce:	fba2 1201 	umull	r1, r2, r2, r1
 800d5d2:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 800d5d6:	460a      	mov	r2, r1
 800d5d8:	f8c7 2368 	str.w	r2, [r7, #872]	@ 0x368
 800d5dc:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 800d5e0:	4413      	add	r3, r2
 800d5e2:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 800d5e6:	f04f 0000 	mov.w	r0, #0
 800d5ea:	f04f 0100 	mov.w	r1, #0
 800d5ee:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 800d5f2:	462b      	mov	r3, r5
 800d5f4:	0099      	lsls	r1, r3, #2
 800d5f6:	4623      	mov	r3, r4
 800d5f8:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800d5fc:	4623      	mov	r3, r4
 800d5fe:	0098      	lsls	r0, r3, #2
 800d600:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d604:	f04f 0300 	mov.w	r3, #0
 800d608:	f7f3 f842 	bl	8000690 <__aeabi_uldivmod>
 800d60c:	4602      	mov	r2, r0
 800d60e:	460b      	mov	r3, r1
 800d610:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800d614:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 800d618:	f143 0300 	adc.w	r3, r3, #0
 800d61c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d620:	4b3e      	ldr	r3, [pc, #248]	@ (800d71c <Set_Random_Motion_Values+0xc94>)
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	461a      	mov	r2, r3
 800d626:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800d62a:	4413      	add	r3, r2
 800d62c:	461a      	mov	r2, r3
 800d62e:	4b3b      	ldr	r3, [pc, #236]	@ (800d71c <Set_Random_Motion_Values+0xc94>)
 800d630:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 800d632:	f001 f973 	bl	800e91c <rand>
 800d636:	4603      	mov	r3, r0
 800d638:	17da      	asrs	r2, r3, #31
 800d63a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800d63e:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 800d642:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d646:	2200      	movs	r2, #0
 800d648:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800d64c:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800d650:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 800d654:	462b      	mov	r3, r5
 800d656:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 800d65a:	4642      	mov	r2, r8
 800d65c:	fb02 f203 	mul.w	r2, r2, r3
 800d660:	464b      	mov	r3, r9
 800d662:	4621      	mov	r1, r4
 800d664:	fb01 f303 	mul.w	r3, r1, r3
 800d668:	4413      	add	r3, r2
 800d66a:	4622      	mov	r2, r4
 800d66c:	4641      	mov	r1, r8
 800d66e:	fba2 1201 	umull	r1, r2, r2, r1
 800d672:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 800d676:	460a      	mov	r2, r1
 800d678:	f8c7 2360 	str.w	r2, [r7, #864]	@ 0x360
 800d67c:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 800d680:	4413      	add	r3, r2
 800d682:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 800d686:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 800d68a:	4622      	mov	r2, r4
 800d68c:	462b      	mov	r3, r5
 800d68e:	1891      	adds	r1, r2, r2
 800d690:	6239      	str	r1, [r7, #32]
 800d692:	415b      	adcs	r3, r3
 800d694:	627b      	str	r3, [r7, #36]	@ 0x24
 800d696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d69a:	4621      	mov	r1, r4
 800d69c:	1851      	adds	r1, r2, r1
 800d69e:	61b9      	str	r1, [r7, #24]
 800d6a0:	4629      	mov	r1, r5
 800d6a2:	eb43 0101 	adc.w	r1, r3, r1
 800d6a6:	61f9      	str	r1, [r7, #28]
 800d6a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	18db      	adds	r3, r3, r3
 800d6b0:	613b      	str	r3, [r7, #16]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	eb42 0303 	adc.w	r3, r2, r3
 800d6b8:	617b      	str	r3, [r7, #20]
 800d6ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d6be:	4618      	mov	r0, r3
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d6c6:	f04f 0300 	mov.w	r3, #0
 800d6ca:	f7f2 ffe1 	bl	8000690 <__aeabi_uldivmod>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800d6d6:	f04f 31ff 	mov.w	r1, #4294967295
 800d6da:	1a80      	subs	r0, r0, r2
 800d6dc:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 800d6e0:	eb61 0303 	sbc.w	r3, r1, r3
 800d6e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d6e8:	4b0c      	ldr	r3, [pc, #48]	@ (800d71c <Set_Random_Motion_Values+0xc94>)
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d6f2:	4413      	add	r3, r2
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	4b09      	ldr	r3, [pc, #36]	@ (800d71c <Set_Random_Motion_Values+0xc94>)
 800d6f8:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800d6fa:	f001 f90f 	bl	800e91c <rand>
 800d6fe:	4603      	mov	r3, r0
 800d700:	17da      	asrs	r2, r3, #31
 800d702:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800d706:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800d70a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d70e:	2200      	movs	r2, #0
 800d710:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800d714:	e004      	b.n	800d720 <Set_Random_Motion_Values+0xc98>
 800d716:	bf00      	nop
 800d718:	2000072c 	.word	0x2000072c
 800d71c:	20000738 	.word	0x20000738
 800d720:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800d724:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 800d728:	462b      	mov	r3, r5
 800d72a:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	@ 0x1b0
 800d72e:	4642      	mov	r2, r8
 800d730:	fb02 f203 	mul.w	r2, r2, r3
 800d734:	464b      	mov	r3, r9
 800d736:	4621      	mov	r1, r4
 800d738:	fb01 f303 	mul.w	r3, r1, r3
 800d73c:	4413      	add	r3, r2
 800d73e:	4622      	mov	r2, r4
 800d740:	4641      	mov	r1, r8
 800d742:	fba2 1201 	umull	r1, r2, r2, r1
 800d746:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 800d74a:	460a      	mov	r2, r1
 800d74c:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 800d750:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 800d754:	4413      	add	r3, r2
 800d756:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 800d75a:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 800d75e:	4622      	mov	r2, r4
 800d760:	462b      	mov	r3, r5
 800d762:	f04f 0000 	mov.w	r0, #0
 800d766:	f04f 0100 	mov.w	r1, #0
 800d76a:	00d9      	lsls	r1, r3, #3
 800d76c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d770:	00d0      	lsls	r0, r2, #3
 800d772:	4602      	mov	r2, r0
 800d774:	460b      	mov	r3, r1
 800d776:	4621      	mov	r1, r4
 800d778:	1a51      	subs	r1, r2, r1
 800d77a:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 800d77e:	4629      	mov	r1, r5
 800d780:	eb63 0301 	sbc.w	r3, r3, r1
 800d784:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800d788:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d78c:	f04f 0300 	mov.w	r3, #0
 800d790:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 800d794:	f7f2 ff7c 	bl	8000690 <__aeabi_uldivmod>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	f06f 0002 	mvn.w	r0, #2
 800d7a0:	f04f 31ff 	mov.w	r1, #4294967295
 800d7a4:	1a80      	subs	r0, r0, r2
 800d7a6:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
 800d7aa:	eb61 0303 	sbc.w	r3, r1, r3
 800d7ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d7b2:	4bea      	ldr	r3, [pc, #936]	@ (800db5c <Set_Random_Motion_Values+0x10d4>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d7bc:	4413      	add	r3, r2
 800d7be:	461a      	mov	r2, r3
 800d7c0:	4be6      	ldr	r3, [pc, #920]	@ (800db5c <Set_Random_Motion_Values+0x10d4>)
 800d7c2:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 800d7c4:	f001 f8aa 	bl	800e91c <rand>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	17da      	asrs	r2, r3, #31
 800d7cc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800d7d0:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 800d7d4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800d7de:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800d7e2:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 800d7e6:	462b      	mov	r3, r5
 800d7e8:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	@ 0x198
 800d7ec:	4642      	mov	r2, r8
 800d7ee:	fb02 f203 	mul.w	r2, r2, r3
 800d7f2:	464b      	mov	r3, r9
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	fb01 f303 	mul.w	r3, r1, r3
 800d7fa:	4413      	add	r3, r2
 800d7fc:	4622      	mov	r2, r4
 800d7fe:	4641      	mov	r1, r8
 800d800:	fba2 1201 	umull	r1, r2, r2, r1
 800d804:	f8c7 2354 	str.w	r2, [r7, #852]	@ 0x354
 800d808:	460a      	mov	r2, r1
 800d80a:	f8c7 2350 	str.w	r2, [r7, #848]	@ 0x350
 800d80e:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 800d812:	4413      	add	r3, r2
 800d814:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800d818:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 800d81c:	4622      	mov	r2, r4
 800d81e:	462b      	mov	r3, r5
 800d820:	f04f 0000 	mov.w	r0, #0
 800d824:	f04f 0100 	mov.w	r1, #0
 800d828:	00d9      	lsls	r1, r3, #3
 800d82a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d82e:	00d0      	lsls	r0, r2, #3
 800d830:	4602      	mov	r2, r0
 800d832:	460b      	mov	r3, r1
 800d834:	4621      	mov	r1, r4
 800d836:	1851      	adds	r1, r2, r1
 800d838:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 800d83c:	4629      	mov	r1, r5
 800d83e:	eb43 0101 	adc.w	r1, r3, r1
 800d842:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 800d846:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d84a:	f04f 0300 	mov.w	r3, #0
 800d84e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800d852:	f7f2 ff1d 	bl	8000690 <__aeabi_uldivmod>
 800d856:	4602      	mov	r2, r0
 800d858:	460b      	mov	r3, r1
 800d85a:	1cd1      	adds	r1, r2, #3
 800d85c:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 800d860:	f143 0300 	adc.w	r3, r3, #0
 800d864:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d868:	4bbc      	ldr	r3, [pc, #752]	@ (800db5c <Set_Random_Motion_Values+0x10d4>)
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	461a      	mov	r2, r3
 800d86e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d872:	4413      	add	r3, r2
 800d874:	461a      	mov	r2, r3
 800d876:	4bb9      	ldr	r3, [pc, #740]	@ (800db5c <Set_Random_Motion_Values+0x10d4>)
 800d878:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800d87a:	f001 f84f 	bl	800e91c <rand>
 800d87e:	4603      	mov	r3, r0
 800d880:	17da      	asrs	r2, r3, #31
 800d882:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800d886:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 800d88a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d88e:	2200      	movs	r2, #0
 800d890:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800d894:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 800d898:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 800d89c:	462b      	mov	r3, r5
 800d89e:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 800d8a2:	4642      	mov	r2, r8
 800d8a4:	fb02 f203 	mul.w	r2, r2, r3
 800d8a8:	464b      	mov	r3, r9
 800d8aa:	4621      	mov	r1, r4
 800d8ac:	fb01 f303 	mul.w	r3, r1, r3
 800d8b0:	4413      	add	r3, r2
 800d8b2:	4622      	mov	r2, r4
 800d8b4:	4641      	mov	r1, r8
 800d8b6:	fba2 1201 	umull	r1, r2, r2, r1
 800d8ba:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 800d8be:	460a      	mov	r2, r1
 800d8c0:	f8c7 2348 	str.w	r2, [r7, #840]	@ 0x348
 800d8c4:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 800d8c8:	4413      	add	r3, r2
 800d8ca:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 800d8ce:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 800d8d2:	4622      	mov	r2, r4
 800d8d4:	462b      	mov	r3, r5
 800d8d6:	1891      	adds	r1, r2, r2
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	415b      	adcs	r3, r3
 800d8dc:	60fb      	str	r3, [r7, #12]
 800d8de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d8e2:	4621      	mov	r1, r4
 800d8e4:	1851      	adds	r1, r2, r1
 800d8e6:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 800d8ea:	4629      	mov	r1, r5
 800d8ec:	eb43 0101 	adc.w	r1, r3, r1
 800d8f0:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 800d8f4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d8f8:	f04f 0300 	mov.w	r3, #0
 800d8fc:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800d900:	f7f2 fec6 	bl	8000690 <__aeabi_uldivmod>
 800d904:	4602      	mov	r2, r0
 800d906:	460b      	mov	r3, r1
 800d908:	f06f 0002 	mvn.w	r0, #2
 800d90c:	f04f 31ff 	mov.w	r1, #4294967295
 800d910:	1a80      	subs	r0, r0, r2
 800d912:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 800d916:	eb61 0303 	sbc.w	r3, r1, r3
 800d91a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d91e:	4b8f      	ldr	r3, [pc, #572]	@ (800db5c <Set_Random_Motion_Values+0x10d4>)
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	461a      	mov	r2, r3
 800d924:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d928:	4413      	add	r3, r2
 800d92a:	461a      	mov	r2, r3
 800d92c:	4b8b      	ldr	r3, [pc, #556]	@ (800db5c <Set_Random_Motion_Values+0x10d4>)
 800d92e:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800d930:	f000 fff4 	bl	800e91c <rand>
 800d934:	4603      	mov	r3, r0
 800d936:	17da      	asrs	r2, r3, #31
 800d938:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800d93c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 800d940:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d944:	2200      	movs	r2, #0
 800d946:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800d94a:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 800d94e:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 800d952:	462b      	mov	r3, r5
 800d954:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	@ 0x168
 800d958:	4642      	mov	r2, r8
 800d95a:	fb02 f203 	mul.w	r2, r2, r3
 800d95e:	464b      	mov	r3, r9
 800d960:	4621      	mov	r1, r4
 800d962:	fb01 f303 	mul.w	r3, r1, r3
 800d966:	4413      	add	r3, r2
 800d968:	4622      	mov	r2, r4
 800d96a:	4641      	mov	r1, r8
 800d96c:	fba2 1201 	umull	r1, r2, r2, r1
 800d970:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 800d974:	460a      	mov	r2, r1
 800d976:	f8c7 2340 	str.w	r2, [r7, #832]	@ 0x340
 800d97a:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 800d97e:	4413      	add	r3, r2
 800d980:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 800d984:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 800d988:	4622      	mov	r2, r4
 800d98a:	462b      	mov	r3, r5
 800d98c:	f04f 0000 	mov.w	r0, #0
 800d990:	f04f 0100 	mov.w	r1, #0
 800d994:	00d9      	lsls	r1, r3, #3
 800d996:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d99a:	00d0      	lsls	r0, r2, #3
 800d99c:	4602      	mov	r2, r0
 800d99e:	460b      	mov	r3, r1
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	1a51      	subs	r1, r2, r1
 800d9a4:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	eb63 0301 	sbc.w	r3, r3, r1
 800d9ae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800d9b2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d9b6:	f04f 0300 	mov.w	r3, #0
 800d9ba:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800d9be:	f7f2 fe67 	bl	8000690 <__aeabi_uldivmod>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 800d9ca:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 800d9ce:	f143 0300 	adc.w	r3, r3, #0
 800d9d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d9d6:	4b62      	ldr	r3, [pc, #392]	@ (800db60 <Set_Random_Motion_Values+0x10d8>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	461a      	mov	r2, r3
 800d9dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9e0:	4413      	add	r3, r2
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	4b5e      	ldr	r3, [pc, #376]	@ (800db60 <Set_Random_Motion_Values+0x10d8>)
 800d9e6:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800d9e8:	f000 ff98 	bl	800e91c <rand>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	17da      	asrs	r2, r3, #31
 800d9f0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800d9f4:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 800d9f8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800da02:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 800da06:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 800da0a:	462b      	mov	r3, r5
 800da0c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 800da10:	4642      	mov	r2, r8
 800da12:	fb02 f203 	mul.w	r2, r2, r3
 800da16:	464b      	mov	r3, r9
 800da18:	4621      	mov	r1, r4
 800da1a:	fb01 f303 	mul.w	r3, r1, r3
 800da1e:	4413      	add	r3, r2
 800da20:	4622      	mov	r2, r4
 800da22:	4641      	mov	r1, r8
 800da24:	fba2 1201 	umull	r1, r2, r2, r1
 800da28:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 800da2c:	460a      	mov	r2, r1
 800da2e:	f8c7 2338 	str.w	r2, [r7, #824]	@ 0x338
 800da32:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 800da36:	4413      	add	r3, r2
 800da38:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 800da3c:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 800da40:	4622      	mov	r2, r4
 800da42:	462b      	mov	r3, r5
 800da44:	1891      	adds	r1, r2, r2
 800da46:	6039      	str	r1, [r7, #0]
 800da48:	415b      	adcs	r3, r3
 800da4a:	607b      	str	r3, [r7, #4]
 800da4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da50:	4621      	mov	r1, r4
 800da52:	1851      	adds	r1, r2, r1
 800da54:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 800da58:	4629      	mov	r1, r5
 800da5a:	eb43 0101 	adc.w	r1, r3, r1
 800da5e:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 800da62:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800da66:	f04f 0300 	mov.w	r3, #0
 800da6a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800da6e:	f7f2 fe0f 	bl	8000690 <__aeabi_uldivmod>
 800da72:	4602      	mov	r2, r0
 800da74:	460b      	mov	r3, r1
 800da76:	f112 0196 	adds.w	r1, r2, #150	@ 0x96
 800da7a:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 800da7e:	f143 0300 	adc.w	r3, r3, #0
 800da82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800da86:	4b36      	ldr	r3, [pc, #216]	@ (800db60 <Set_Random_Motion_Values+0x10d8>)
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	461a      	mov	r2, r3
 800da8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	461a      	mov	r2, r3
 800da94:	4b32      	ldr	r3, [pc, #200]	@ (800db60 <Set_Random_Motion_Values+0x10d8>)
 800da96:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800da98:	f000 ff40 	bl	800e91c <rand>
 800da9c:	4603      	mov	r3, r0
 800da9e:	17da      	asrs	r2, r3, #31
 800daa0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800daa4:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 800daa8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800daac:	2200      	movs	r2, #0
 800daae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800dab2:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800dab6:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 800daba:	462b      	mov	r3, r5
 800dabc:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 800dac0:	4642      	mov	r2, r8
 800dac2:	fb02 f203 	mul.w	r2, r2, r3
 800dac6:	464b      	mov	r3, r9
 800dac8:	4621      	mov	r1, r4
 800daca:	fb01 f303 	mul.w	r3, r1, r3
 800dace:	4413      	add	r3, r2
 800dad0:	4622      	mov	r2, r4
 800dad2:	4641      	mov	r1, r8
 800dad4:	fba2 1201 	umull	r1, r2, r2, r1
 800dad8:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 800dadc:	460a      	mov	r2, r1
 800dade:	f8c7 2330 	str.w	r2, [r7, #816]	@ 0x330
 800dae2:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 800dae6:	4413      	add	r3, r2
 800dae8:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 800daec:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 800daf0:	4622      	mov	r2, r4
 800daf2:	462b      	mov	r3, r5
 800daf4:	f04f 0000 	mov.w	r0, #0
 800daf8:	f04f 0100 	mov.w	r1, #0
 800dafc:	0099      	lsls	r1, r3, #2
 800dafe:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800db02:	0090      	lsls	r0, r2, #2
 800db04:	4602      	mov	r2, r0
 800db06:	460b      	mov	r3, r1
 800db08:	4621      	mov	r1, r4
 800db0a:	1851      	adds	r1, r2, r1
 800db0c:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 800db10:	4629      	mov	r1, r5
 800db12:	eb43 0101 	adc.w	r1, r3, r1
 800db16:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800db1a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800db1e:	f04f 0300 	mov.w	r3, #0
 800db22:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 800db26:	f7f2 fdb3 	bl	8000690 <__aeabi_uldivmod>
 800db2a:	4602      	mov	r2, r0
 800db2c:	460b      	mov	r3, r1
 800db2e:	f112 010a 	adds.w	r1, r2, #10
 800db32:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800db36:	f143 0300 	adc.w	r3, r3, #0
 800db3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800db3e:	4b08      	ldr	r3, [pc, #32]	@ (800db60 <Set_Random_Motion_Values+0x10d8>)
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	461a      	mov	r2, r3
 800db44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800db48:	4413      	add	r3, r2
 800db4a:	461a      	mov	r2, r3
 800db4c:	4b04      	ldr	r3, [pc, #16]	@ (800db60 <Set_Random_Motion_Values+0x10d8>)
 800db4e:	609a      	str	r2, [r3, #8]
}
 800db50:	bf00      	nop
 800db52:	f507 777a 	add.w	r7, r7, #1000	@ 0x3e8
 800db56:	46bd      	mov	sp, r7
 800db58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db5c:	20000744 	.word	0x20000744
 800db60:	20000750 	.word	0x20000750

0800db64 <Reset_Motion_Values>:
 *
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 800db64:	b480      	push	{r7}
 800db66:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 800db68:	4b6e      	ldr	r3, [pc, #440]	@ (800dd24 <Reset_Motion_Values+0x1c0>)
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	4b6e      	ldr	r3, [pc, #440]	@ (800dd28 <Reset_Motion_Values+0x1c4>)
 800db6e:	fb83 1302 	smull	r1, r3, r3, r2
 800db72:	11d9      	asrs	r1, r3, #7
 800db74:	17d3      	asrs	r3, r2, #31
 800db76:	1acb      	subs	r3, r1, r3
 800db78:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800db7c:	fb01 f303 	mul.w	r3, r1, r3
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	2b00      	cmp	r3, #0
 800db84:	d103      	bne.n	800db8e <Reset_Motion_Values+0x2a>
 800db86:	4b67      	ldr	r3, [pc, #412]	@ (800dd24 <Reset_Motion_Values+0x1c0>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	425b      	negs	r3, r3
 800db8c:	e000      	b.n	800db90 <Reset_Motion_Values+0x2c>
 800db8e:	230a      	movs	r3, #10
 800db90:	4a64      	ldr	r2, [pc, #400]	@ (800dd24 <Reset_Motion_Values+0x1c0>)
 800db92:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 800db94:	4b63      	ldr	r3, [pc, #396]	@ (800dd24 <Reset_Motion_Values+0x1c0>)
 800db96:	685a      	ldr	r2, [r3, #4]
 800db98:	4b63      	ldr	r3, [pc, #396]	@ (800dd28 <Reset_Motion_Values+0x1c4>)
 800db9a:	fb83 1302 	smull	r1, r3, r3, r2
 800db9e:	11d9      	asrs	r1, r3, #7
 800dba0:	17d3      	asrs	r3, r2, #31
 800dba2:	1acb      	subs	r3, r1, r3
 800dba4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800dba8:	fb01 f303 	mul.w	r3, r1, r3
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d103      	bne.n	800dbba <Reset_Motion_Values+0x56>
 800dbb2:	4b5c      	ldr	r3, [pc, #368]	@ (800dd24 <Reset_Motion_Values+0x1c0>)
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	425b      	negs	r3, r3
 800dbb8:	e001      	b.n	800dbbe <Reset_Motion_Values+0x5a>
 800dbba:	f06f 0309 	mvn.w	r3, #9
 800dbbe:	4a59      	ldr	r2, [pc, #356]	@ (800dd24 <Reset_Motion_Values+0x1c0>)
 800dbc0:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 800dbc2:	4b58      	ldr	r3, [pc, #352]	@ (800dd24 <Reset_Motion_Values+0x1c0>)
 800dbc4:	689a      	ldr	r2, [r3, #8]
 800dbc6:	4b58      	ldr	r3, [pc, #352]	@ (800dd28 <Reset_Motion_Values+0x1c4>)
 800dbc8:	fb83 1302 	smull	r1, r3, r3, r2
 800dbcc:	11d9      	asrs	r1, r3, #7
 800dbce:	17d3      	asrs	r3, r2, #31
 800dbd0:	1acb      	subs	r3, r1, r3
 800dbd2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800dbd6:	fb01 f303 	mul.w	r3, r1, r3
 800dbda:	1ad3      	subs	r3, r2, r3
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d103      	bne.n	800dbe8 <Reset_Motion_Values+0x84>
 800dbe0:	4b50      	ldr	r3, [pc, #320]	@ (800dd24 <Reset_Motion_Values+0x1c0>)
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	425b      	negs	r3, r3
 800dbe6:	e000      	b.n	800dbea <Reset_Motion_Values+0x86>
 800dbe8:	230a      	movs	r3, #10
 800dbea:	4a4e      	ldr	r2, [pc, #312]	@ (800dd24 <Reset_Motion_Values+0x1c0>)
 800dbec:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 800dbee:	4b4f      	ldr	r3, [pc, #316]	@ (800dd2c <Reset_Motion_Values+0x1c8>)
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	4b4d      	ldr	r3, [pc, #308]	@ (800dd28 <Reset_Motion_Values+0x1c4>)
 800dbf4:	fb83 1302 	smull	r1, r3, r3, r2
 800dbf8:	11d9      	asrs	r1, r3, #7
 800dbfa:	17d3      	asrs	r3, r2, #31
 800dbfc:	1acb      	subs	r3, r1, r3
 800dbfe:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800dc02:	fb01 f303 	mul.w	r3, r1, r3
 800dc06:	1ad3      	subs	r3, r2, r3
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d103      	bne.n	800dc14 <Reset_Motion_Values+0xb0>
 800dc0c:	4b47      	ldr	r3, [pc, #284]	@ (800dd2c <Reset_Motion_Values+0x1c8>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	425b      	negs	r3, r3
 800dc12:	e000      	b.n	800dc16 <Reset_Motion_Values+0xb2>
 800dc14:	2364      	movs	r3, #100	@ 0x64
 800dc16:	4a45      	ldr	r2, [pc, #276]	@ (800dd2c <Reset_Motion_Values+0x1c8>)
 800dc18:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 800dc1a:	4b44      	ldr	r3, [pc, #272]	@ (800dd2c <Reset_Motion_Values+0x1c8>)
 800dc1c:	685a      	ldr	r2, [r3, #4]
 800dc1e:	4b42      	ldr	r3, [pc, #264]	@ (800dd28 <Reset_Motion_Values+0x1c4>)
 800dc20:	fb83 1302 	smull	r1, r3, r3, r2
 800dc24:	11d9      	asrs	r1, r3, #7
 800dc26:	17d3      	asrs	r3, r2, #31
 800dc28:	1acb      	subs	r3, r1, r3
 800dc2a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800dc2e:	fb01 f303 	mul.w	r3, r1, r3
 800dc32:	1ad3      	subs	r3, r2, r3
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d103      	bne.n	800dc40 <Reset_Motion_Values+0xdc>
 800dc38:	4b3c      	ldr	r3, [pc, #240]	@ (800dd2c <Reset_Motion_Values+0x1c8>)
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	425b      	negs	r3, r3
 800dc3e:	e001      	b.n	800dc44 <Reset_Motion_Values+0xe0>
 800dc40:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800dc44:	4a39      	ldr	r2, [pc, #228]	@ (800dd2c <Reset_Motion_Values+0x1c8>)
 800dc46:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 800dc48:	4b38      	ldr	r3, [pc, #224]	@ (800dd2c <Reset_Motion_Values+0x1c8>)
 800dc4a:	689a      	ldr	r2, [r3, #8]
 800dc4c:	4b36      	ldr	r3, [pc, #216]	@ (800dd28 <Reset_Motion_Values+0x1c4>)
 800dc4e:	fb83 1302 	smull	r1, r3, r3, r2
 800dc52:	11d9      	asrs	r1, r3, #7
 800dc54:	17d3      	asrs	r3, r2, #31
 800dc56:	1acb      	subs	r3, r1, r3
 800dc58:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800dc5c:	fb01 f303 	mul.w	r3, r1, r3
 800dc60:	1ad3      	subs	r3, r2, r3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d103      	bne.n	800dc6e <Reset_Motion_Values+0x10a>
 800dc66:	4b31      	ldr	r3, [pc, #196]	@ (800dd2c <Reset_Motion_Values+0x1c8>)
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	425b      	negs	r3, r3
 800dc6c:	e000      	b.n	800dc70 <Reset_Motion_Values+0x10c>
 800dc6e:	2364      	movs	r3, #100	@ 0x64
 800dc70:	4a2e      	ldr	r2, [pc, #184]	@ (800dd2c <Reset_Motion_Values+0x1c8>)
 800dc72:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 800dc74:	4b2d      	ldr	r3, [pc, #180]	@ (800dd2c <Reset_Motion_Values+0x1c8>)
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	4b2b      	ldr	r3, [pc, #172]	@ (800dd28 <Reset_Motion_Values+0x1c4>)
 800dc7a:	fb83 1302 	smull	r1, r3, r3, r2
 800dc7e:	11d9      	asrs	r1, r3, #7
 800dc80:	17d3      	asrs	r3, r2, #31
 800dc82:	1acb      	subs	r3, r1, r3
 800dc84:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800dc88:	fb01 f303 	mul.w	r3, r1, r3
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d103      	bne.n	800dc9a <Reset_Motion_Values+0x136>
 800dc92:	4b27      	ldr	r3, [pc, #156]	@ (800dd30 <Reset_Motion_Values+0x1cc>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	425b      	negs	r3, r3
 800dc98:	e000      	b.n	800dc9c <Reset_Motion_Values+0x138>
 800dc9a:	2303      	movs	r3, #3
 800dc9c:	4a24      	ldr	r2, [pc, #144]	@ (800dd30 <Reset_Motion_Values+0x1cc>)
 800dc9e:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 800dca0:	4b22      	ldr	r3, [pc, #136]	@ (800dd2c <Reset_Motion_Values+0x1c8>)
 800dca2:	685a      	ldr	r2, [r3, #4]
 800dca4:	4b20      	ldr	r3, [pc, #128]	@ (800dd28 <Reset_Motion_Values+0x1c4>)
 800dca6:	fb83 1302 	smull	r1, r3, r3, r2
 800dcaa:	11d9      	asrs	r1, r3, #7
 800dcac:	17d3      	asrs	r3, r2, #31
 800dcae:	1acb      	subs	r3, r1, r3
 800dcb0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800dcb4:	fb01 f303 	mul.w	r3, r1, r3
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d103      	bne.n	800dcc6 <Reset_Motion_Values+0x162>
 800dcbe:	4b1c      	ldr	r3, [pc, #112]	@ (800dd30 <Reset_Motion_Values+0x1cc>)
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	425b      	negs	r3, r3
 800dcc4:	e001      	b.n	800dcca <Reset_Motion_Values+0x166>
 800dcc6:	f06f 0302 	mvn.w	r3, #2
 800dcca:	4a19      	ldr	r2, [pc, #100]	@ (800dd30 <Reset_Motion_Values+0x1cc>)
 800dccc:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 800dcce:	4b17      	ldr	r3, [pc, #92]	@ (800dd2c <Reset_Motion_Values+0x1c8>)
 800dcd0:	689a      	ldr	r2, [r3, #8]
 800dcd2:	4b15      	ldr	r3, [pc, #84]	@ (800dd28 <Reset_Motion_Values+0x1c4>)
 800dcd4:	fb83 1302 	smull	r1, r3, r3, r2
 800dcd8:	11d9      	asrs	r1, r3, #7
 800dcda:	17d3      	asrs	r3, r2, #31
 800dcdc:	1acb      	subs	r3, r1, r3
 800dcde:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800dce2:	fb01 f303 	mul.w	r3, r1, r3
 800dce6:	1ad3      	subs	r3, r2, r3
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d103      	bne.n	800dcf4 <Reset_Motion_Values+0x190>
 800dcec:	4b10      	ldr	r3, [pc, #64]	@ (800dd30 <Reset_Motion_Values+0x1cc>)
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	425b      	negs	r3, r3
 800dcf2:	e000      	b.n	800dcf6 <Reset_Motion_Values+0x192>
 800dcf4:	2303      	movs	r3, #3
 800dcf6:	4a0e      	ldr	r2, [pc, #56]	@ (800dd30 <Reset_Motion_Values+0x1cc>)
 800dcf8:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 800dcfa:	4b0e      	ldr	r3, [pc, #56]	@ (800dd34 <Reset_Motion_Values+0x1d0>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	425b      	negs	r3, r3
 800dd00:	4a0c      	ldr	r2, [pc, #48]	@ (800dd34 <Reset_Motion_Values+0x1d0>)
 800dd02:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 800dd04:	4b0b      	ldr	r3, [pc, #44]	@ (800dd34 <Reset_Motion_Values+0x1d0>)
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	425b      	negs	r3, r3
 800dd0a:	4a0a      	ldr	r2, [pc, #40]	@ (800dd34 <Reset_Motion_Values+0x1d0>)
 800dd0c:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 800dd0e:	4b09      	ldr	r3, [pc, #36]	@ (800dd34 <Reset_Motion_Values+0x1d0>)
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	425b      	negs	r3, r3
 800dd14:	4a07      	ldr	r2, [pc, #28]	@ (800dd34 <Reset_Motion_Values+0x1d0>)
 800dd16:	6093      	str	r3, [r2, #8]
}
 800dd18:	bf00      	nop
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	2000072c 	.word	0x2000072c
 800dd28:	10624dd3 	.word	0x10624dd3
 800dd2c:	20000738 	.word	0x20000738
 800dd30:	20000744 	.word	0x20000744
 800dd34:	20000750 	.word	0x20000750

0800dd38 <getSTM32WBVersion>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getSTM32WBVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800dd38:	b590      	push	{r4, r7, lr}
 800dd3a:	b089      	sub	sp, #36	@ 0x24
 800dd3c:	af02      	add	r7, sp, #8
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 800dd42:	f107 0410 	add.w	r4, r7, #16
 800dd46:	f107 0215 	add.w	r2, r7, #21
 800dd4a:	f107 0112 	add.w	r1, r7, #18
 800dd4e:	f107 0016 	add.w	r0, r7, #22
 800dd52:	f107 030e 	add.w	r3, r7, #14
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	4623      	mov	r3, r4
 800dd5a:	f7fe f8b5 	bl	800bec8 <hci_read_local_version_information>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	75fb      	strb	r3, [r7, #23]
                                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800dd62:	7dfb      	ldrb	r3, [r7, #23]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d126      	bne.n	800ddb6 <getSTM32WBVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800dd68:	8a7b      	ldrh	r3, [r7, #18]
 800dd6a:	0a1b      	lsrs	r3, r3, #8
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	b2da      	uxtb	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800dd74:	8a7b      	ldrh	r3, [r7, #18]
 800dd76:	021b      	lsls	r3, r3, #8
 800dd78:	b29a      	uxth	r2, r3
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	881b      	ldrh	r3, [r3, #0]
 800dd82:	b21a      	sxth	r2, r3
 800dd84:	89fb      	ldrh	r3, [r7, #14]
 800dd86:	091b      	lsrs	r3, r3, #4
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	011b      	lsls	r3, r3, #4
 800dd8c:	b21b      	sxth	r3, r3
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	b21b      	sxth	r3, r3
 800dd92:	4313      	orrs	r3, r2
 800dd94:	b21b      	sxth	r3, r3
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	881b      	ldrh	r3, [r3, #0]
 800dda0:	b21a      	sxth	r2, r3
 800dda2:	89fb      	ldrh	r3, [r7, #14]
 800dda4:	b21b      	sxth	r3, r3
 800dda6:	f003 030f 	and.w	r3, r3, #15
 800ddaa:	b21b      	sxth	r3, r3
 800ddac:	4313      	orrs	r3, r2
 800ddae:	b21b      	sxth	r3, r3
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	371c      	adds	r7, #28
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd90      	pop	{r4, r7, pc}

0800ddc0 <BSP_PB_Callback>:
 *
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800ddca:	4b04      	ldr	r3, [pc, #16]	@ (800dddc <BSP_PB_Callback+0x1c>)
 800ddcc:	2201      	movs	r2, #1
 800ddce:	701a      	strb	r2, [r3, #0]
}
 800ddd0:	bf00      	nop
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr
 800dddc:	200006ee 	.word	0x200006ee

0800dde0 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy)
{
 800dde0:	b590      	push	{r4, r7, lr}
 800dde2:	b089      	sub	sp, #36	@ 0x24
 800dde4:	af06      	add	r7, sp, #24
 800dde6:	4604      	mov	r4, r0
 800dde8:	4608      	mov	r0, r1
 800ddea:	4611      	mov	r1, r2
 800ddec:	461a      	mov	r2, r3
 800ddee:	4623      	mov	r3, r4
 800ddf0:	71fb      	strb	r3, [r7, #7]
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	80bb      	strh	r3, [r7, #4]
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	71bb      	strb	r3, [r7, #6]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	70fb      	strb	r3, [r7, #3]

  hci_le_connection_complete_event(Status,
 800ddfe:	78fc      	ldrb	r4, [r7, #3]
 800de00:	79ba      	ldrb	r2, [r7, #6]
 800de02:	88b9      	ldrh	r1, [r7, #4]
 800de04:	79f8      	ldrb	r0, [r7, #7]
 800de06:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800de0a:	9304      	str	r3, [sp, #16]
 800de0c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800de0e:	9303      	str	r3, [sp, #12]
 800de10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800de12:	9302      	str	r3, [sp, #8]
 800de14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de16:	9301      	str	r3, [sp, #4]
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	4623      	mov	r3, r4
 800de1e:	f000 f805 	bl	800de2c <hci_le_connection_complete_event>
                                   Peer_Address,
                                   Conn_Interval,
                                   Conn_Latency,
                                   Supervision_Timeout,
                                   Master_Clock_Accuracy);
}
 800de22:	bf00      	nop
 800de24:	370c      	adds	r7, #12
 800de26:	46bd      	mov	sp, r7
 800de28:	bd90      	pop	{r4, r7, pc}
	...

0800de2c <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 800de2c:	b590      	push	{r4, r7, lr}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	4604      	mov	r4, r0
 800de34:	4608      	mov	r0, r1
 800de36:	4611      	mov	r1, r2
 800de38:	461a      	mov	r2, r3
 800de3a:	4623      	mov	r3, r4
 800de3c:	71fb      	strb	r3, [r7, #7]
 800de3e:	4603      	mov	r3, r0
 800de40:	80bb      	strh	r3, [r7, #4]
 800de42:	460b      	mov	r3, r1
 800de44:	71bb      	strb	r3, [r7, #6]
 800de46:	4613      	mov	r3, r2
 800de48:	70fb      	strb	r3, [r7, #3]
  connected = TRUE;
 800de4a:	4b09      	ldr	r3, [pc, #36]	@ (800de70 <hci_le_connection_complete_event+0x44>)
 800de4c:	2201      	movs	r2, #1
 800de4e:	701a      	strb	r2, [r3, #0]
#if (!SECURE_PAIRING)
  pairing = TRUE;
 800de50:	4b08      	ldr	r3, [pc, #32]	@ (800de74 <hci_le_connection_complete_event+0x48>)
 800de52:	2201      	movs	r2, #1
 800de54:	701a      	strb	r2, [r3, #0]
  paired = TRUE;
 800de56:	4b08      	ldr	r3, [pc, #32]	@ (800de78 <hci_le_connection_complete_event+0x4c>)
 800de58:	2201      	movs	r2, #1
 800de5a:	701a      	strb	r2, [r3, #0]
#endif
  connection_handle = Connection_Handle;
 800de5c:	4a07      	ldr	r2, [pc, #28]	@ (800de7c <hci_le_connection_complete_event+0x50>)
 800de5e:	88bb      	ldrh	r3, [r7, #4]
 800de60:	8013      	strh	r3, [r2, #0]

  PRINT_DBG("Connected (%02x %02x %02x %02x %02x %02x)\r\n", Peer_Address[5], Peer_Address[4], Peer_Address[3],
                                                             Peer_Address[2], Peer_Address[1], Peer_Address[0]);

  BSP_LED_Off(LED2); /*activity led*/
 800de62:	2000      	movs	r0, #0
 800de64:	f7f3 f95a 	bl	800111c <BSP_LED_Off>
}
 800de68:	bf00      	nop
 800de6a:	370c      	adds	r7, #12
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd90      	pop	{r4, r7, pc}
 800de70:	20000726 	.word	0x20000726
 800de74:	20000727 	.word	0x20000727
 800de78:	20000728 	.word	0x20000728
 800de7c:	20000724 	.word	0x20000724

0800de80 <hci_disconnection_complete_event>:
 * @retval See file stm32wb05n_events.h
 */
void hci_disconnection_complete_event(uint8_t  Status,
                                      uint16_t Connection_Handle,
                                      uint8_t  Reason)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	4603      	mov	r3, r0
 800de88:	71fb      	strb	r3, [r7, #7]
 800de8a:	460b      	mov	r3, r1
 800de8c:	80bb      	strh	r3, [r7, #4]
 800de8e:	4613      	mov	r3, r2
 800de90:	71bb      	strb	r3, [r7, #6]
  connected = FALSE;
 800de92:	4b0b      	ldr	r3, [pc, #44]	@ (800dec0 <hci_disconnection_complete_event+0x40>)
 800de94:	2200      	movs	r2, #0
 800de96:	701a      	strb	r2, [r3, #0]
  pairing   = FALSE;
 800de98:	4b0a      	ldr	r3, [pc, #40]	@ (800dec4 <hci_disconnection_complete_event+0x44>)
 800de9a:	2200      	movs	r2, #0
 800de9c:	701a      	strb	r2, [r3, #0]
  paired    = FALSE;
 800de9e:	4b0a      	ldr	r3, [pc, #40]	@ (800dec8 <hci_disconnection_complete_event+0x48>)
 800dea0:	2200      	movs	r2, #0
 800dea2:	701a      	strb	r2, [r3, #0]

  /* Make the device connectable again */
  set_connectable = TRUE;
 800dea4:	4b09      	ldr	r3, [pc, #36]	@ (800decc <hci_disconnection_complete_event+0x4c>)
 800dea6:	2201      	movs	r2, #1
 800dea8:	701a      	strb	r2, [r3, #0]
  connection_handle = 0;
 800deaa:	4b09      	ldr	r3, [pc, #36]	@ (800ded0 <hci_disconnection_complete_event+0x50>)
 800deac:	2200      	movs	r2, #0
 800deae:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("Disconnected (0x%02x)\r\n", Reason);

  BSP_LED_On(LED2); /*activity led*/
 800deb0:	2000      	movs	r0, #0
 800deb2:	f7f3 f915 	bl	80010e0 <BSP_LED_On>
}
 800deb6:	bf00      	nop
 800deb8:	3708      	adds	r7, #8
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	20000726 	.word	0x20000726
 800dec4:	20000727 	.word	0x20000727
 800dec8:	20000728 	.word	0x20000728
 800decc:	2000001e 	.word	0x2000001e
 800ded0:	20000724 	.word	0x20000724

0800ded4 <aci_gatt_srv_attribute_modified_event>:
void aci_gatt_srv_attribute_modified_event(uint16_t Connection_Handle,
                                           uint16_t CID,
                                           uint16_t Attr_Handle,
                                           uint16_t Attr_Data_Length,
                                           uint8_t Attr_Data[])
{
 800ded4:	b590      	push	{r4, r7, lr}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	4604      	mov	r4, r0
 800dedc:	4608      	mov	r0, r1
 800dede:	4611      	mov	r1, r2
 800dee0:	461a      	mov	r2, r3
 800dee2:	4623      	mov	r3, r4
 800dee4:	80fb      	strh	r3, [r7, #6]
 800dee6:	4603      	mov	r3, r0
 800dee8:	80bb      	strh	r3, [r7, #4]
 800deea:	460b      	mov	r3, r1
 800deec:	807b      	strh	r3, [r7, #2]
 800deee:	4613      	mov	r3, r2
 800def0:	803b      	strh	r3, [r7, #0]
  Attribute_Modified_Request_CB(Connection_Handle, Attr_Handle, Attr_Data_Length, Attr_Data);
 800def2:	883b      	ldrh	r3, [r7, #0]
 800def4:	b2da      	uxtb	r2, r3
 800def6:	8879      	ldrh	r1, [r7, #2]
 800def8:	88f8      	ldrh	r0, [r7, #6]
 800defa:	69bb      	ldr	r3, [r7, #24]
 800defc:	f000 faaa 	bl	800e454 <Attribute_Modified_Request_CB>
}
 800df00:	bf00      	nop
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	bd90      	pop	{r4, r7, pc}

0800df08 <aci_gap_pairing_complete_event>:
 *         timeout has occurred so that the upper layer can decide to disconnect the link.
 * @param  See file stm32wb05n_events.h
 * @retval See file stm32wb05n_events.h
 */
void aci_gap_pairing_complete_event(uint16_t connection_handle, uint8_t status, uint8_t reason)
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	4603      	mov	r3, r0
 800df10:	80fb      	strh	r3, [r7, #6]
 800df12:	460b      	mov	r3, r1
 800df14:	717b      	strb	r3, [r7, #5]
 800df16:	4613      	mov	r3, r2
 800df18:	713b      	strb	r3, [r7, #4]
  if (status == 0x02) { /* Pairing Failed */
 800df1a:	797b      	ldrb	r3, [r7, #5]
 800df1c:	2b02      	cmp	r3, #2
 800df1e:	d002      	beq.n	800df26 <aci_gap_pairing_complete_event+0x1e>
    PRINT_DBG("aci_gap_pairing_complete_event failed:0x%02x with reason 0x%02x\r\n", status, reason);
  }
  else {
    paired = TRUE;
 800df20:	4b04      	ldr	r3, [pc, #16]	@ (800df34 <aci_gap_pairing_complete_event+0x2c>)
 800df22:	2201      	movs	r2, #1
 800df24:	701a      	strb	r2, [r3, #0]
    PRINT_DBG("aci_gap_pairing_complete_event with status 0x%02x\r\n", status);
  }
}
 800df26:	bf00      	nop
 800df28:	370c      	adds	r7, #12
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr
 800df32:	bf00      	nop
 800df34:	20000728 	.word	0x20000728

0800df38 <Add_HWServW2ST_Service>:
  * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
  * @param  None
  * @retval tBleStatus Status
  */
tBleStatus Add_HWServW2ST_Service(void)
{
 800df38:	b590      	push	{r4, r7, lr}
 800df3a:	b08d      	sub	sp, #52	@ 0x34
 800df3c:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 5;
 800df3e:	2305      	movs	r3, #5
 800df40:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1 + (3 * char_number);
 800df42:	7dfb      	ldrb	r3, [r7, #23]
 800df44:	461a      	mov	r2, r3
 800df46:	0052      	lsls	r2, r2, #1
 800df48:	4413      	add	r3, r2
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	3301      	adds	r3, #1
 800df4e:	75bb      	strb	r3, [r7, #22]

  /* add HW_SENS_W2ST service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 800df50:	231b      	movs	r3, #27
 800df52:	713b      	strb	r3, [r7, #4]
 800df54:	23c5      	movs	r3, #197	@ 0xc5
 800df56:	717b      	strb	r3, [r7, #5]
 800df58:	23d5      	movs	r3, #213	@ 0xd5
 800df5a:	71bb      	strb	r3, [r7, #6]
 800df5c:	23a5      	movs	r3, #165	@ 0xa5
 800df5e:	71fb      	strb	r3, [r7, #7]
 800df60:	2302      	movs	r3, #2
 800df62:	723b      	strb	r3, [r7, #8]
 800df64:	2300      	movs	r3, #0
 800df66:	727b      	strb	r3, [r7, #9]
 800df68:	23b4      	movs	r3, #180	@ 0xb4
 800df6a:	72bb      	strb	r3, [r7, #10]
 800df6c:	239a      	movs	r3, #154	@ 0x9a
 800df6e:	72fb      	strb	r3, [r7, #11]
 800df70:	23e1      	movs	r3, #225	@ 0xe1
 800df72:	733b      	strb	r3, [r7, #12]
 800df74:	2311      	movs	r3, #17
 800df76:	737b      	strb	r3, [r7, #13]
 800df78:	2301      	movs	r3, #1
 800df7a:	73bb      	strb	r3, [r7, #14]
 800df7c:	2300      	movs	r3, #0
 800df7e:	73fb      	strb	r3, [r7, #15]
 800df80:	2300      	movs	r3, #0
 800df82:	743b      	strb	r3, [r7, #16]
 800df84:	2300      	movs	r3, #0
 800df86:	747b      	strb	r3, [r7, #17]
 800df88:	2300      	movs	r3, #0
 800df8a:	74bb      	strb	r3, [r7, #18]
 800df8c:	2300      	movs	r3, #0
 800df8e:	74fb      	strb	r3, [r7, #19]
  STM32WB_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800df90:	4b51      	ldr	r3, [pc, #324]	@ (800e0d8 <Add_HWServW2ST_Service+0x1a0>)
 800df92:	461c      	mov	r4, r3
 800df94:	1d3b      	adds	r3, r7, #4
 800df96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_srv_add_service_nwk(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 800df9c:	7dbb      	ldrb	r3, [r7, #22]
 800df9e:	4a4f      	ldr	r2, [pc, #316]	@ (800e0dc <Add_HWServW2ST_Service+0x1a4>)
 800dfa0:	9200      	str	r2, [sp, #0]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	494c      	ldr	r1, [pc, #304]	@ (800e0d8 <Add_HWServW2ST_Service+0x1a0>)
 800dfa6:	2002      	movs	r0, #2
 800dfa8:	f7fa facf 	bl	800854a <aci_gatt_srv_add_service_nwk>
 800dfac:	4603      	mov	r3, r0
 800dfae:	757b      	strb	r3, [r7, #21]
                                     max_attribute_records, &ServW2STHandleHardware);
  if (ret != BLE_STATUS_SUCCESS)
 800dfb0:	7d7b      	ldrb	r3, [r7, #21]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <Add_HWServW2ST_Service+0x82>
  {
    return ret;
 800dfb6:	7d7b      	ldrb	r3, [r7, #21]
 800dfb8:	e08a      	b.n	800e0d0 <Add_HWServW2ST_Service+0x198>
  }

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 800dfba:	231b      	movs	r3, #27
 800dfbc:	713b      	strb	r3, [r7, #4]
 800dfbe:	23c5      	movs	r3, #197	@ 0xc5
 800dfc0:	717b      	strb	r3, [r7, #5]
 800dfc2:	23d5      	movs	r3, #213	@ 0xd5
 800dfc4:	71bb      	strb	r3, [r7, #6]
 800dfc6:	23a5      	movs	r3, #165	@ 0xa5
 800dfc8:	71fb      	strb	r3, [r7, #7]
 800dfca:	2302      	movs	r3, #2
 800dfcc:	723b      	strb	r3, [r7, #8]
 800dfce:	2300      	movs	r3, #0
 800dfd0:	727b      	strb	r3, [r7, #9]
 800dfd2:	2336      	movs	r3, #54	@ 0x36
 800dfd4:	72bb      	strb	r3, [r7, #10]
 800dfd6:	23ac      	movs	r3, #172	@ 0xac
 800dfd8:	72fb      	strb	r3, [r7, #11]
 800dfda:	23e1      	movs	r3, #225	@ 0xe1
 800dfdc:	733b      	strb	r3, [r7, #12]
 800dfde:	2311      	movs	r3, #17
 800dfe0:	737b      	strb	r3, [r7, #13]
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	73bb      	strb	r3, [r7, #14]
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	73fb      	strb	r3, [r7, #15]
 800dfea:	2300      	movs	r3, #0
 800dfec:	743b      	strb	r3, [r7, #16]
 800dfee:	2300      	movs	r3, #0
 800dff0:	747b      	strb	r3, [r7, #17]
 800dff2:	2300      	movs	r3, #0
 800dff4:	74bb      	strb	r3, [r7, #18]
 800dff6:	2300      	movs	r3, #0
 800dff8:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 800dffa:	7cbb      	ldrb	r3, [r7, #18]
 800dffc:	f043 0304 	orr.w	r3, r3, #4
 800e000:	b2db      	uxtb	r3, r3
 800e002:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 800e004:	7cbb      	ldrb	r3, [r7, #18]
 800e006:	f043 0310 	orr.w	r3, r3, #16
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	74bb      	strb	r3, [r7, #18]
  STM32WB_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800e00e:	4b34      	ldr	r3, [pc, #208]	@ (800e0e0 <Add_HWServW2ST_Service+0x1a8>)
 800e010:	461c      	mov	r4, r3
 800e012:	1d3b      	adds	r3, r7, #4
 800e014:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e016:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_srv_add_char_nwk(ServW2STHandleHardware, UUID_TYPE_128, &char_uuid,
 800e01a:	4b30      	ldr	r3, [pc, #192]	@ (800e0dc <Add_HWServW2ST_Service+0x1a4>)
 800e01c:	8818      	ldrh	r0, [r3, #0]
 800e01e:	4b31      	ldr	r3, [pc, #196]	@ (800e0e4 <Add_HWServW2ST_Service+0x1ac>)
 800e020:	9305      	str	r3, [sp, #20]
 800e022:	2300      	movs	r3, #0
 800e024:	9304      	str	r3, [sp, #16]
 800e026:	2310      	movs	r3, #16
 800e028:	9303      	str	r3, [sp, #12]
 800e02a:	2304      	movs	r3, #4
 800e02c:	9302      	str	r3, [sp, #8]
 800e02e:	2300      	movs	r3, #0
 800e030:	9301      	str	r3, [sp, #4]
 800e032:	2312      	movs	r3, #18
 800e034:	9300      	str	r3, [sp, #0]
 800e036:	2308      	movs	r3, #8
 800e038:	4a29      	ldr	r2, [pc, #164]	@ (800e0e0 <Add_HWServW2ST_Service+0x1a8>)
 800e03a:	2102      	movs	r1, #2
 800e03c:	f7fa fb5f 	bl	80086fe <aci_gatt_srv_add_char_nwk>
 800e040:	4603      	mov	r3, r0
 800e042:	757b      	strb	r3, [r7, #21]
                                  2 + 2 + 4,
                                  CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                                  ATTR_PERMISSION_NONE,
                                  GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                                  16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800e044:	7d7b      	ldrb	r3, [r7, #21]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d001      	beq.n	800e04e <Add_HWServW2ST_Service+0x116>
  {
    return ret;
 800e04a:	7d7b      	ldrb	r3, [r7, #21]
 800e04c:	e040      	b.n	800e0d0 <Add_HWServW2ST_Service+0x198>
  }

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 800e04e:	231b      	movs	r3, #27
 800e050:	713b      	strb	r3, [r7, #4]
 800e052:	23c5      	movs	r3, #197	@ 0xc5
 800e054:	717b      	strb	r3, [r7, #5]
 800e056:	23d5      	movs	r3, #213	@ 0xd5
 800e058:	71bb      	strb	r3, [r7, #6]
 800e05a:	23a5      	movs	r3, #165	@ 0xa5
 800e05c:	71fb      	strb	r3, [r7, #7]
 800e05e:	2302      	movs	r3, #2
 800e060:	723b      	strb	r3, [r7, #8]
 800e062:	2300      	movs	r3, #0
 800e064:	727b      	strb	r3, [r7, #9]
 800e066:	2336      	movs	r3, #54	@ 0x36
 800e068:	72bb      	strb	r3, [r7, #10]
 800e06a:	23ac      	movs	r3, #172	@ 0xac
 800e06c:	72fb      	strb	r3, [r7, #11]
 800e06e:	23e1      	movs	r3, #225	@ 0xe1
 800e070:	733b      	strb	r3, [r7, #12]
 800e072:	2311      	movs	r3, #17
 800e074:	737b      	strb	r3, [r7, #13]
 800e076:	2301      	movs	r3, #1
 800e078:	73bb      	strb	r3, [r7, #14]
 800e07a:	2300      	movs	r3, #0
 800e07c:	73fb      	strb	r3, [r7, #15]
 800e07e:	2300      	movs	r3, #0
 800e080:	743b      	strb	r3, [r7, #16]
 800e082:	2300      	movs	r3, #0
 800e084:	747b      	strb	r3, [r7, #17]
 800e086:	23e0      	movs	r3, #224	@ 0xe0
 800e088:	74bb      	strb	r3, [r7, #18]
 800e08a:	2300      	movs	r3, #0
 800e08c:	74fb      	strb	r3, [r7, #19]
  STM32WB_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800e08e:	4b14      	ldr	r3, [pc, #80]	@ (800e0e0 <Add_HWServW2ST_Service+0x1a8>)
 800e090:	461c      	mov	r4, r3
 800e092:	1d3b      	adds	r3, r7, #4
 800e094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_srv_add_char_nwk(ServW2STHandleHardware, UUID_TYPE_128, &char_uuid,
 800e09a:	4b10      	ldr	r3, [pc, #64]	@ (800e0dc <Add_HWServW2ST_Service+0x1a4>)
 800e09c:	8818      	ldrh	r0, [r3, #0]
 800e09e:	4b12      	ldr	r3, [pc, #72]	@ (800e0e8 <Add_HWServW2ST_Service+0x1b0>)
 800e0a0:	9305      	str	r3, [sp, #20]
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	9304      	str	r3, [sp, #16]
 800e0a6:	2310      	movs	r3, #16
 800e0a8:	9303      	str	r3, [sp, #12]
 800e0aa:	2304      	movs	r3, #4
 800e0ac:	9302      	str	r3, [sp, #8]
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	9301      	str	r3, [sp, #4]
 800e0b2:	2310      	movs	r3, #16
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	2314      	movs	r3, #20
 800e0b8:	4a09      	ldr	r2, [pc, #36]	@ (800e0e0 <Add_HWServW2ST_Service+0x1a8>)
 800e0ba:	2102      	movs	r1, #2
 800e0bc:	f7fa fb1f 	bl	80086fe <aci_gatt_srv_add_char_nwk>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	757b      	strb	r3, [r7, #21]
                                  2 + 3 * 3 * 2,
                                  CHAR_PROP_NOTIFY,
                                  ATTR_PERMISSION_NONE,
                                  GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                                  16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800e0c4:	7d7b      	ldrb	r3, [r7, #21]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d001      	beq.n	800e0ce <Add_HWServW2ST_Service+0x196>
  {
    return ret;
 800e0ca:	7d7b      	ldrb	r3, [r7, #21]
 800e0cc:	e000      	b.n	800e0d0 <Add_HWServW2ST_Service+0x198>
  }

  return BLE_STATUS_SUCCESS;
 800e0ce:	2300      	movs	r3, #0
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	371c      	adds	r7, #28
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd90      	pop	{r4, r7, pc}
 800e0d8:	20000700 	.word	0x20000700
 800e0dc:	200006f4 	.word	0x200006f4
 800e0e0:	20000710 	.word	0x20000710
 800e0e4:	200006f6 	.word	0x200006f6
 800e0e8:	200006f8 	.word	0x200006f8

0800e0ec <Add_SWServW2ST_Service>:
  * @brief  Add the SW Feature service using a vendor specific profile
  * @param  None
  * @retval tBleStatus Status
  */
tBleStatus Add_SWServW2ST_Service(void)
{
 800e0ec:	b590      	push	{r4, r7, lr}
 800e0ee:	b08d      	sub	sp, #52	@ 0x34
 800e0f0:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 1;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1 + (3 * char_number);
 800e0f6:	7dfb      	ldrb	r3, [r7, #23]
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	0052      	lsls	r2, r2, #1
 800e0fc:	4413      	add	r3, r2
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	3301      	adds	r3, #1
 800e102:	75bb      	strb	r3, [r7, #22]

  /* add SW_SENS_W2ST service */
  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 800e104:	231b      	movs	r3, #27
 800e106:	713b      	strb	r3, [r7, #4]
 800e108:	23c5      	movs	r3, #197	@ 0xc5
 800e10a:	717b      	strb	r3, [r7, #5]
 800e10c:	23d5      	movs	r3, #213	@ 0xd5
 800e10e:	71bb      	strb	r3, [r7, #6]
 800e110:	23a5      	movs	r3, #165	@ 0xa5
 800e112:	71fb      	strb	r3, [r7, #7]
 800e114:	2302      	movs	r3, #2
 800e116:	723b      	strb	r3, [r7, #8]
 800e118:	2300      	movs	r3, #0
 800e11a:	727b      	strb	r3, [r7, #9]
 800e11c:	23b4      	movs	r3, #180	@ 0xb4
 800e11e:	72bb      	strb	r3, [r7, #10]
 800e120:	239a      	movs	r3, #154	@ 0x9a
 800e122:	72fb      	strb	r3, [r7, #11]
 800e124:	23e1      	movs	r3, #225	@ 0xe1
 800e126:	733b      	strb	r3, [r7, #12]
 800e128:	2311      	movs	r3, #17
 800e12a:	737b      	strb	r3, [r7, #13]
 800e12c:	2302      	movs	r3, #2
 800e12e:	73bb      	strb	r3, [r7, #14]
 800e130:	2300      	movs	r3, #0
 800e132:	73fb      	strb	r3, [r7, #15]
 800e134:	2300      	movs	r3, #0
 800e136:	743b      	strb	r3, [r7, #16]
 800e138:	2300      	movs	r3, #0
 800e13a:	747b      	strb	r3, [r7, #17]
 800e13c:	2300      	movs	r3, #0
 800e13e:	74bb      	strb	r3, [r7, #18]
 800e140:	2300      	movs	r3, #0
 800e142:	74fb      	strb	r3, [r7, #19]
  STM32WB_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800e144:	4b2c      	ldr	r3, [pc, #176]	@ (800e1f8 <Add_SWServW2ST_Service+0x10c>)
 800e146:	461c      	mov	r4, r3
 800e148:	1d3b      	adds	r3, r7, #4
 800e14a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e14c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_srv_add_service_nwk(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 800e150:	7dbb      	ldrb	r3, [r7, #22]
 800e152:	4a2a      	ldr	r2, [pc, #168]	@ (800e1fc <Add_SWServW2ST_Service+0x110>)
 800e154:	9200      	str	r2, [sp, #0]
 800e156:	2201      	movs	r2, #1
 800e158:	4927      	ldr	r1, [pc, #156]	@ (800e1f8 <Add_SWServW2ST_Service+0x10c>)
 800e15a:	2002      	movs	r0, #2
 800e15c:	f7fa f9f5 	bl	800854a <aci_gatt_srv_add_service_nwk>
 800e160:	4603      	mov	r3, r0
 800e162:	757b      	strb	r3, [r7, #21]
                                     max_attribute_records, &ServW2STHandleSoftware);
  if (ret != BLE_STATUS_SUCCESS)
 800e164:	7d7b      	ldrb	r3, [r7, #21]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d001      	beq.n	800e16e <Add_SWServW2ST_Service+0x82>
  {
    return ret;
 800e16a:	7d7b      	ldrb	r3, [r7, #21]
 800e16c:	e040      	b.n	800e1f0 <Add_SWServW2ST_Service+0x104>
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 800e16e:	231b      	movs	r3, #27
 800e170:	713b      	strb	r3, [r7, #4]
 800e172:	23c5      	movs	r3, #197	@ 0xc5
 800e174:	717b      	strb	r3, [r7, #5]
 800e176:	23d5      	movs	r3, #213	@ 0xd5
 800e178:	71bb      	strb	r3, [r7, #6]
 800e17a:	23a5      	movs	r3, #165	@ 0xa5
 800e17c:	71fb      	strb	r3, [r7, #7]
 800e17e:	2302      	movs	r3, #2
 800e180:	723b      	strb	r3, [r7, #8]
 800e182:	2300      	movs	r3, #0
 800e184:	727b      	strb	r3, [r7, #9]
 800e186:	2336      	movs	r3, #54	@ 0x36
 800e188:	72bb      	strb	r3, [r7, #10]
 800e18a:	23ac      	movs	r3, #172	@ 0xac
 800e18c:	72fb      	strb	r3, [r7, #11]
 800e18e:	23e1      	movs	r3, #225	@ 0xe1
 800e190:	733b      	strb	r3, [r7, #12]
 800e192:	2311      	movs	r3, #17
 800e194:	737b      	strb	r3, [r7, #13]
 800e196:	2301      	movs	r3, #1
 800e198:	73bb      	strb	r3, [r7, #14]
 800e19a:	2300      	movs	r3, #0
 800e19c:	73fb      	strb	r3, [r7, #15]
 800e19e:	2300      	movs	r3, #0
 800e1a0:	743b      	strb	r3, [r7, #16]
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	747b      	strb	r3, [r7, #17]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	74bb      	strb	r3, [r7, #18]
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	74fb      	strb	r3, [r7, #19]
  STM32WB_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800e1ae:	4b14      	ldr	r3, [pc, #80]	@ (800e200 <Add_SWServW2ST_Service+0x114>)
 800e1b0:	461c      	mov	r4, r3
 800e1b2:	1d3b      	adds	r3, r7, #4
 800e1b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e1b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_srv_add_char_nwk(ServW2STHandleSoftware, UUID_TYPE_128, &char_uuid,
 800e1ba:	4b10      	ldr	r3, [pc, #64]	@ (800e1fc <Add_SWServW2ST_Service+0x110>)
 800e1bc:	8818      	ldrh	r0, [r3, #0]
 800e1be:	4b11      	ldr	r3, [pc, #68]	@ (800e204 <Add_SWServW2ST_Service+0x118>)
 800e1c0:	9305      	str	r3, [sp, #20]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	9304      	str	r3, [sp, #16]
 800e1c6:	2310      	movs	r3, #16
 800e1c8:	9303      	str	r3, [sp, #12]
 800e1ca:	2304      	movs	r3, #4
 800e1cc:	9302      	str	r3, [sp, #8]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	2310      	movs	r3, #16
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	2308      	movs	r3, #8
 800e1d8:	4a09      	ldr	r2, [pc, #36]	@ (800e200 <Add_SWServW2ST_Service+0x114>)
 800e1da:	2102      	movs	r1, #2
 800e1dc:	f7fa fa8f 	bl	80086fe <aci_gatt_srv_add_char_nwk>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	757b      	strb	r3, [r7, #21]
                                  2 + 6 * SEND_N_QUATERNIONS,
                                  CHAR_PROP_NOTIFY,
                                  ATTR_PERMISSION_NONE,
                                  GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                                  16, 0, &QuaternionsCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800e1e4:	7d7b      	ldrb	r3, [r7, #21]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <Add_SWServW2ST_Service+0x102>
  {
    return ret;
 800e1ea:	7d7b      	ldrb	r3, [r7, #21]
 800e1ec:	e000      	b.n	800e1f0 <Add_SWServW2ST_Service+0x104>
  }

  return BLE_STATUS_SUCCESS;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	371c      	adds	r7, #28
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd90      	pop	{r4, r7, pc}
 800e1f8:	20000700 	.word	0x20000700
 800e1fc:	200006fa 	.word	0x200006fa
 800e200:	20000710 	.word	0x20000710
 800e204:	200006fc 	.word	0x200006fc

0800e208 <Environmental_Update>:
  * @param  int32_t pressure value
  * @param  int16_t temperature value
  * @retval tBleStatus Status
  */
tBleStatus Environmental_Update(int32_t press, int16_t temp)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b088      	sub	sp, #32
 800e20c:	af02      	add	r7, sp, #8
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	460b      	mov	r3, r1
 800e212:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick() >> 3);
 800e214:	f7f3 f9e6 	bl	80015e4 <HAL_GetTick>
 800e218:	4603      	mov	r3, r0
 800e21a:	08db      	lsrs	r3, r3, #3
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	733b      	strb	r3, [r7, #12]
 800e220:	f7f3 f9e0 	bl	80015e4 <HAL_GetTick>
 800e224:	4603      	mov	r3, r0
 800e226:	0adb      	lsrs	r3, r3, #11
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff + 2, press);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	73bb      	strb	r3, [r7, #14]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	121b      	asrs	r3, r3, #8
 800e236:	b2db      	uxtb	r3, r3
 800e238:	73fb      	strb	r3, [r7, #15]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	141b      	asrs	r3, r3, #16
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	743b      	strb	r3, [r7, #16]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	161b      	asrs	r3, r3, #24
 800e246:	b2db      	uxtb	r3, r3
 800e248:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff + 6, temp);
 800e24a:	887b      	ldrh	r3, [r7, #2]
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	74bb      	strb	r3, [r7, #18]
 800e250:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e254:	121b      	asrs	r3, r3, #8
 800e256:	b21b      	sxth	r3, r3
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_srv_notify(connection_handle, 0x0004, EnvironmentalCharHandle + 1, GATT_NOTIFICATION, 8, buff);
 800e25c:	4b0d      	ldr	r3, [pc, #52]	@ (800e294 <Environmental_Update+0x8c>)
 800e25e:	881b      	ldrh	r3, [r3, #0]
 800e260:	b298      	uxth	r0, r3
 800e262:	4b0d      	ldr	r3, [pc, #52]	@ (800e298 <Environmental_Update+0x90>)
 800e264:	881b      	ldrh	r3, [r3, #0]
 800e266:	3301      	adds	r3, #1
 800e268:	b29a      	uxth	r2, r3
 800e26a:	f107 030c 	add.w	r3, r7, #12
 800e26e:	9301      	str	r3, [sp, #4]
 800e270:	2308      	movs	r3, #8
 800e272:	9300      	str	r3, [sp, #0]
 800e274:	2300      	movs	r3, #0
 800e276:	2104      	movs	r1, #4
 800e278:	f7fa fbf7 	bl	8008a6a <aci_gatt_srv_notify>
 800e27c:	4603      	mov	r3, r0
 800e27e:	75fb      	strb	r3, [r7, #23]

  if (ret != BLE_STATUS_SUCCESS)
 800e280:	7dfb      	ldrb	r3, [r7, #23]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <Environmental_Update+0x82>
  {
    PRINT_DBG("Error while updating ENV characteristic: 0x%04X\r\n", ret) ;
    return ret;
 800e286:	7dfb      	ldrb	r3, [r7, #23]
 800e288:	e000      	b.n	800e28c <Environmental_Update+0x84>
  }

  return BLE_STATUS_SUCCESS;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3718      	adds	r7, #24
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	20000724 	.word	0x20000724
 800e298:	200006f6 	.word	0x200006f6

0800e29c <Acc_Update>:
  * @brief  Update acceleration characteristic value
  * @param  AxesRaw_t structure containing acceleration value in mg.
  * @retval tBleStatus Status
  */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b08c      	sub	sp, #48	@ 0x30
 800e2a0:	af02      	add	r7, sp, #8
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
  uint8_t buff[2 + 2 * 3 * 3];
  tBleStatus ret;

  HOST_TO_LE_16(buff, (HAL_GetTick() >> 3));
 800e2a8:	f7f3 f99c 	bl	80015e4 <HAL_GetTick>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	08db      	lsrs	r3, r3, #3
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	743b      	strb	r3, [r7, #16]
 800e2b4:	f7f3 f996 	bl	80015e4 <HAL_GetTick>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	0adb      	lsrs	r3, r3, #11
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff + 2, -x_axes->AXIS_X);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	425b      	negs	r3, r3
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	74bb      	strb	r3, [r7, #18]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	425b      	negs	r3, r3
 800e2d2:	121b      	asrs	r3, r3, #8
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff + 4,  x_axes->AXIS_Y);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	753b      	strb	r3, [r7, #20]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	121b      	asrs	r3, r3, #8
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff + 6, -x_axes->AXIS_Z);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	425b      	negs	r3, r3
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	75bb      	strb	r3, [r7, #22]
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	425b      	negs	r3, r3
 800e2fc:	121b      	asrs	r3, r3, #8
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff + 8,  g_axes->AXIS_X);
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	b2db      	uxtb	r3, r3
 800e308:	763b      	strb	r3, [r7, #24]
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	121b      	asrs	r3, r3, #8
 800e310:	b2db      	uxtb	r3, r3
 800e312:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff + 10, g_axes->AXIS_Y);
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	76bb      	strb	r3, [r7, #26]
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	121b      	asrs	r3, r3, #8
 800e322:	b2db      	uxtb	r3, r3
 800e324:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff + 12, g_axes->AXIS_Z);
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	773b      	strb	r3, [r7, #28]
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	121b      	asrs	r3, r3, #8
 800e334:	b2db      	uxtb	r3, r3
 800e336:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff + 14, m_axes->AXIS_X);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	77bb      	strb	r3, [r7, #30]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	121b      	asrs	r3, r3, #8
 800e346:	b2db      	uxtb	r3, r3
 800e348:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff + 16, m_axes->AXIS_Y);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	f887 3020 	strb.w	r3, [r7, #32]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	121b      	asrs	r3, r3, #8
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff + 18, m_axes->AXIS_Z);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	b2db      	uxtb	r3, r3
 800e366:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	689b      	ldr	r3, [r3, #8]
 800e36e:	121b      	asrs	r3, r3, #8
 800e370:	b2db      	uxtb	r3, r3
 800e372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_srv_notify(connection_handle, 0x0004, AccGyroMagCharHandle + 1, GATT_NOTIFICATION, 2 + (2 * 3 * 3), buff);
 800e376:	4b0f      	ldr	r3, [pc, #60]	@ (800e3b4 <Acc_Update+0x118>)
 800e378:	881b      	ldrh	r3, [r3, #0]
 800e37a:	b298      	uxth	r0, r3
 800e37c:	4b0e      	ldr	r3, [pc, #56]	@ (800e3b8 <Acc_Update+0x11c>)
 800e37e:	881b      	ldrh	r3, [r3, #0]
 800e380:	3301      	adds	r3, #1
 800e382:	b29a      	uxth	r2, r3
 800e384:	f107 0310 	add.w	r3, r7, #16
 800e388:	9301      	str	r3, [sp, #4]
 800e38a:	2314      	movs	r3, #20
 800e38c:	9300      	str	r3, [sp, #0]
 800e38e:	2300      	movs	r3, #0
 800e390:	2104      	movs	r1, #4
 800e392:	f7fa fb6a 	bl	8008a6a <aci_gatt_srv_notify>
 800e396:	4603      	mov	r3, r0
 800e398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ret != BLE_STATUS_SUCCESS)
 800e39c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <Acc_Update+0x10e>
  {
    PRINT_DBG("Error while updating Acceleration characteristic: 0x%02X\r\n", ret) ;
    return ret;
 800e3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3a8:	e000      	b.n	800e3ac <Acc_Update+0x110>
  }

  return BLE_STATUS_SUCCESS;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3728      	adds	r7, #40	@ 0x28
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	20000724 	.word	0x20000724
 800e3b8:	200006f8 	.word	0x200006f8

0800e3bc <Quat_Update>:
  * @brief  Update quaternions characteristic value
  * @param  SensorAxes_t *data Structure containing the quaterions
  * @retval tBleStatus Status
  */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b088      	sub	sp, #32
 800e3c0:	af02      	add	r7, sp, #8
 800e3c2:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2 + 6 * SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff, (HAL_GetTick() >> 3));
 800e3c4:	f7f3 f90e 	bl	80015e4 <HAL_GetTick>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	08db      	lsrs	r3, r3, #3
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	733b      	strb	r3, [r7, #12]
 800e3d0:	f7f3 f908 	bl	80015e4 <HAL_GetTick>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	0adb      	lsrs	r3, r3, #11
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff + 2, data[0].AXIS_X);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	73bb      	strb	r3, [r7, #14]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	121b      	asrs	r3, r3, #8
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff + 4, data[0].AXIS_Y);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	685b      	ldr	r3, [r3, #4]
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	743b      	strb	r3, [r7, #16]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	121b      	asrs	r3, r3, #8
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff + 6, data[0].AXIS_Z);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	b2db      	uxtb	r3, r3
 800e406:	74bb      	strb	r3, [r7, #18]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	689b      	ldr	r3, [r3, #8]
 800e40c:	121b      	asrs	r3, r3, #8
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff + 18, data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif /* SEND_N_QUATERNIONS */

  ret = aci_gatt_srv_notify(connection_handle, 0x0004, QuaternionsCharHandle + 1, GATT_NOTIFICATION, 2 + (6 * SEND_N_QUATERNIONS), buff);
 800e412:	4b0e      	ldr	r3, [pc, #56]	@ (800e44c <Quat_Update+0x90>)
 800e414:	881b      	ldrh	r3, [r3, #0]
 800e416:	b298      	uxth	r0, r3
 800e418:	4b0d      	ldr	r3, [pc, #52]	@ (800e450 <Quat_Update+0x94>)
 800e41a:	881b      	ldrh	r3, [r3, #0]
 800e41c:	3301      	adds	r3, #1
 800e41e:	b29a      	uxth	r2, r3
 800e420:	f107 030c 	add.w	r3, r7, #12
 800e424:	9301      	str	r3, [sp, #4]
 800e426:	2308      	movs	r3, #8
 800e428:	9300      	str	r3, [sp, #0]
 800e42a:	2300      	movs	r3, #0
 800e42c:	2104      	movs	r1, #4
 800e42e:	f7fa fb1c 	bl	8008a6a <aci_gatt_srv_notify>
 800e432:	4603      	mov	r3, r0
 800e434:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800e436:	7dfb      	ldrb	r3, [r7, #23]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <Quat_Update+0x84>
  {
    PRINT_DBG("Error while updating Sensor Fusion characteristic: 0x%02X\r\n", ret) ;
    return ret;
 800e43c:	7dfb      	ldrb	r3, [r7, #23]
 800e43e:	e000      	b.n	800e442 <Quat_Update+0x86>
  }

  return BLE_STATUS_SUCCESS;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3718      	adds	r7, #24
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	20000724 	.word	0x20000724
 800e450:	200006fc 	.word	0x200006fc

0800e454 <Attribute_Modified_Request_CB>:
  * @param  uint8_t* att_data attribute data
  * @retval None
  */
void Attribute_Modified_Request_CB(uint16_t Connection_Handle, uint16_t attr_handle,
                                   uint8_t data_length, uint8_t *att_data)
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	607b      	str	r3, [r7, #4]
 800e45c:	4603      	mov	r3, r0
 800e45e:	81fb      	strh	r3, [r7, #14]
 800e460:	460b      	mov	r3, r1
 800e462:	81bb      	strh	r3, [r7, #12]
 800e464:	4613      	mov	r3, r2
 800e466:	72fb      	strb	r3, [r7, #11]
  if (attr_handle == EnvironmentalCharHandle + 2)
 800e468:	89ba      	ldrh	r2, [r7, #12]
 800e46a:	4b23      	ldr	r3, [pc, #140]	@ (800e4f8 <Attribute_Modified_Request_CB+0xa4>)
 800e46c:	881b      	ldrh	r3, [r3, #0]
 800e46e:	3302      	adds	r3, #2
 800e470:	429a      	cmp	r2, r3
 800e472:	d10f      	bne.n	800e494 <Attribute_Modified_Request_CB+0x40>
  {
    if (att_data[0] == 1)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	2b01      	cmp	r3, #1
 800e47a:	d103      	bne.n	800e484 <Attribute_Modified_Request_CB+0x30>
    {
      send_env = TRUE;
 800e47c:	4b1f      	ldr	r3, [pc, #124]	@ (800e4fc <Attribute_Modified_Request_CB+0xa8>)
 800e47e:	2201      	movs	r2, #1
 800e480:	701a      	strb	r2, [r3, #0]
    else if (att_data[0] == 0)
    {
      send_quat = FALSE;
    }
  }
}
 800e482:	e032      	b.n	800e4ea <Attribute_Modified_Request_CB+0x96>
    else if (att_data[0] == 0)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d12e      	bne.n	800e4ea <Attribute_Modified_Request_CB+0x96>
      send_env = FALSE;
 800e48c:	4b1b      	ldr	r3, [pc, #108]	@ (800e4fc <Attribute_Modified_Request_CB+0xa8>)
 800e48e:	2200      	movs	r2, #0
 800e490:	701a      	strb	r2, [r3, #0]
}
 800e492:	e02a      	b.n	800e4ea <Attribute_Modified_Request_CB+0x96>
  else if (attr_handle == AccGyroMagCharHandle + 2)
 800e494:	89ba      	ldrh	r2, [r7, #12]
 800e496:	4b1a      	ldr	r3, [pc, #104]	@ (800e500 <Attribute_Modified_Request_CB+0xac>)
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	3302      	adds	r3, #2
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d10f      	bne.n	800e4c0 <Attribute_Modified_Request_CB+0x6c>
    if (att_data[0] == 1)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d103      	bne.n	800e4b0 <Attribute_Modified_Request_CB+0x5c>
      send_mot = TRUE;
 800e4a8:	4b16      	ldr	r3, [pc, #88]	@ (800e504 <Attribute_Modified_Request_CB+0xb0>)
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	701a      	strb	r2, [r3, #0]
}
 800e4ae:	e01c      	b.n	800e4ea <Attribute_Modified_Request_CB+0x96>
    else if (att_data[0] == 0)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d118      	bne.n	800e4ea <Attribute_Modified_Request_CB+0x96>
      send_mot = FALSE;
 800e4b8:	4b12      	ldr	r3, [pc, #72]	@ (800e504 <Attribute_Modified_Request_CB+0xb0>)
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	701a      	strb	r2, [r3, #0]
}
 800e4be:	e014      	b.n	800e4ea <Attribute_Modified_Request_CB+0x96>
  else if (attr_handle == QuaternionsCharHandle + 2)
 800e4c0:	89ba      	ldrh	r2, [r7, #12]
 800e4c2:	4b11      	ldr	r3, [pc, #68]	@ (800e508 <Attribute_Modified_Request_CB+0xb4>)
 800e4c4:	881b      	ldrh	r3, [r3, #0]
 800e4c6:	3302      	adds	r3, #2
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d10e      	bne.n	800e4ea <Attribute_Modified_Request_CB+0x96>
    if (att_data[0] == 1)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d103      	bne.n	800e4dc <Attribute_Modified_Request_CB+0x88>
      send_quat = TRUE;
 800e4d4:	4b0d      	ldr	r3, [pc, #52]	@ (800e50c <Attribute_Modified_Request_CB+0xb8>)
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	701a      	strb	r2, [r3, #0]
}
 800e4da:	e006      	b.n	800e4ea <Attribute_Modified_Request_CB+0x96>
    else if (att_data[0] == 0)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d102      	bne.n	800e4ea <Attribute_Modified_Request_CB+0x96>
      send_quat = FALSE;
 800e4e4:	4b09      	ldr	r3, [pc, #36]	@ (800e50c <Attribute_Modified_Request_CB+0xb8>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	701a      	strb	r2, [r3, #0]
}
 800e4ea:	bf00      	nop
 800e4ec:	3714      	adds	r7, #20
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	200006f6 	.word	0x200006f6
 800e4fc:	20000720 	.word	0x20000720
 800e500:	200006f8 	.word	0x200006f8
 800e504:	20000721 	.word	0x20000721
 800e508:	200006fc 	.word	0x200006fc
 800e50c:	20000722 	.word	0x20000722

0800e510 <Set_DeviceConnectable>:
  * @note   Puts the device in connectable mode
  * @param  None
  * @retval None
  */
void Set_DeviceConnectable(void)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b096      	sub	sp, #88	@ 0x58
 800e514:	af0c      	add	r7, sp, #48	@ 0x30
  uint8_t ret;
  Advertising_Set_Parameters_t Advertising_Set_Parameters[1];

  uint8_t adv_data[] =
 800e516:	2302      	movs	r3, #2
 800e518:	703b      	strb	r3, [r7, #0]
 800e51a:	2301      	movs	r3, #1
 800e51c:	707b      	strb	r3, [r7, #1]
 800e51e:	2306      	movs	r3, #6
 800e520:	70bb      	strb	r3, [r7, #2]
 800e522:	2302      	movs	r3, #2
 800e524:	70fb      	strb	r3, [r7, #3]
 800e526:	230a      	movs	r3, #10
 800e528:	713b      	strb	r3, [r7, #4]
 800e52a:	2300      	movs	r3, #0
 800e52c:	717b      	strb	r3, [r7, #5]
 800e52e:	230a      	movs	r3, #10
 800e530:	71bb      	strb	r3, [r7, #6]
 800e532:	2309      	movs	r3, #9
 800e534:	71fb      	strb	r3, [r7, #7]
 800e536:	2353      	movs	r3, #83	@ 0x53
 800e538:	723b      	strb	r3, [r7, #8]
 800e53a:	2354      	movs	r3, #84	@ 0x54
 800e53c:	727b      	strb	r3, [r7, #9]
 800e53e:	234d      	movs	r3, #77	@ 0x4d
 800e540:	72bb      	strb	r3, [r7, #10]
 800e542:	2333      	movs	r3, #51	@ 0x33
 800e544:	72fb      	strb	r3, [r7, #11]
 800e546:	2332      	movs	r3, #50	@ 0x32
 800e548:	733b      	strb	r3, [r7, #12]
 800e54a:	2357      	movs	r3, #87	@ 0x57
 800e54c:	737b      	strb	r3, [r7, #13]
 800e54e:	2342      	movs	r3, #66	@ 0x42
 800e550:	73bb      	strb	r3, [r7, #14]
 800e552:	2330      	movs	r3, #48	@ 0x30
 800e554:	73fb      	strb	r3, [r7, #15]
 800e556:	2335      	movs	r3, #53	@ 0x35
 800e558:	743b      	strb	r3, [r7, #16]
 800e55a:	230d      	movs	r3, #13
 800e55c:	747b      	strb	r3, [r7, #17]
 800e55e:	23ff      	movs	r3, #255	@ 0xff
 800e560:	74bb      	strb	r3, [r7, #18]
 800e562:	2301      	movs	r3, #1
 800e564:	74fb      	strb	r3, [r7, #19]
 800e566:	2300      	movs	r3, #0
 800e568:	753b      	strb	r3, [r7, #20]
 800e56a:	2300      	movs	r3, #0
 800e56c:	757b      	strb	r3, [r7, #21]
 800e56e:	23f4      	movs	r3, #244	@ 0xf4
 800e570:	75bb      	strb	r3, [r7, #22]
 800e572:	2300      	movs	r3, #0
 800e574:	75fb      	strb	r3, [r7, #23]
 800e576:	2300      	movs	r3, #0
 800e578:	763b      	strb	r3, [r7, #24]
    0x00, /* generic device */
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start - MSB first - */
 800e57a:	4b2e      	ldr	r3, [pc, #184]	@ (800e634 <Set_DeviceConnectable+0x124>)
 800e57c:	795b      	ldrb	r3, [r3, #5]
  uint8_t adv_data[] =
 800e57e:	767b      	strb	r3, [r7, #25]
    bdaddr[4],
 800e580:	4b2c      	ldr	r3, [pc, #176]	@ (800e634 <Set_DeviceConnectable+0x124>)
 800e582:	791b      	ldrb	r3, [r3, #4]
  uint8_t adv_data[] =
 800e584:	76bb      	strb	r3, [r7, #26]
    bdaddr[3],
 800e586:	4b2b      	ldr	r3, [pc, #172]	@ (800e634 <Set_DeviceConnectable+0x124>)
 800e588:	78db      	ldrb	r3, [r3, #3]
  uint8_t adv_data[] =
 800e58a:	76fb      	strb	r3, [r7, #27]
    bdaddr[2],
 800e58c:	4b29      	ldr	r3, [pc, #164]	@ (800e634 <Set_DeviceConnectable+0x124>)
 800e58e:	789b      	ldrb	r3, [r3, #2]
  uint8_t adv_data[] =
 800e590:	773b      	strb	r3, [r7, #28]
    bdaddr[1],
 800e592:	4b28      	ldr	r3, [pc, #160]	@ (800e634 <Set_DeviceConnectable+0x124>)
 800e594:	785b      	ldrb	r3, [r3, #1]
  uint8_t adv_data[] =
 800e596:	777b      	strb	r3, [r7, #29]
    bdaddr[0]  /* BLE MAC stop */
 800e598:	4b26      	ldr	r3, [pc, #152]	@ (800e634 <Set_DeviceConnectable+0x124>)
 800e59a:	781b      	ldrb	r3, [r3, #0]
  uint8_t adv_data[] =
 800e59c:	77bb      	strb	r3, [r7, #30]
  };

  adv_data[23] |= 0x01; /* Sensor Fusion */
 800e59e:	7dfb      	ldrb	r3, [r7, #23]
 800e5a0:	f043 0301 	orr.w	r3, r3, #1
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	75fb      	strb	r3, [r7, #23]

  ret = aci_gap_set_advertising_configuration(0, GAP_MODE_GENERAL_DISCOVERABLE,
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	9308      	str	r3, [sp, #32]
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	9307      	str	r3, [sp, #28]
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	9306      	str	r3, [sp, #24]
 800e5bc:	2300      	movs	r3, #0
 800e5be:	9305      	str	r3, [sp, #20]
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	9304      	str	r3, [sp, #16]
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	9303      	str	r3, [sp, #12]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	9302      	str	r3, [sp, #8]
 800e5cc:	2307      	movs	r3, #7
 800e5ce:	9301      	str	r3, [sp, #4]
 800e5d0:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800e5da:	2213      	movs	r2, #19
 800e5dc:	2102      	movs	r1, #2
 800e5de:	2000      	movs	r0, #0
 800e5e0:	f7f9 fcaf 	bl	8007f42 <aci_gap_set_advertising_configuration>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  else
  {
    PRINT_DBG("aci_gap_set_advertising_configuration() --> SUCCESS\r\n");
  }

  ret = aci_gap_set_advertising_data_nwk(0, ADV_COMPLETE_DATA, sizeof(adv_data), adv_data);
 800e5ea:	463b      	mov	r3, r7
 800e5ec:	221f      	movs	r2, #31
 800e5ee:	2103      	movs	r1, #3
 800e5f0:	2000      	movs	r0, #0
 800e5f2:	f7f9 fe8d 	bl	8008310 <aci_gap_set_advertising_data_nwk>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  else
  {
    PRINT_DBG("aci_gap_set_advertising_data_nwk() --> SUCCESS\r\n");
  }

  Advertising_Set_Parameters[0].Advertising_Handle = 0;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	f887 3020 	strb.w	r3, [r7, #32]
  Advertising_Set_Parameters[0].Duration = 0;
 800e602:	2300      	movs	r3, #0
 800e604:	847b      	strh	r3, [r7, #34]	@ 0x22
  Advertising_Set_Parameters[0].Max_Extended_Advertising_Events = 0;
 800e606:	2300      	movs	r3, #0
 800e608:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

  /* enable advertising */
  ret = aci_gap_set_advertising_enable(ENABLE, 1, Advertising_Set_Parameters);
 800e60c:	f107 0320 	add.w	r3, r7, #32
 800e610:	461a      	mov	r2, r3
 800e612:	2101      	movs	r1, #1
 800e614:	2001      	movs	r0, #1
 800e616:	f7f9 fda6 	bl	8008166 <aci_gap_set_advertising_enable>
 800e61a:	4603      	mov	r3, r0
 800e61c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (ret != BLE_STATUS_SUCCESS)
 800e620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e624:	2b00      	cmp	r3, #0
 800e626:	d001      	beq.n	800e62c <Set_DeviceConnectable+0x11c>
  {
    PRINT_DBG("aci_gap_set_advertising_enable() failed: 0x%02x\r\n", ret);
    while (1);
 800e628:	bf00      	nop
 800e62a:	e7fd      	b.n	800e628 <Set_DeviceConnectable+0x118>
  }
  else
  {
    PRINT_DBG("aci_gap_set_advertising_enable() --> SUCCESS\r\n");
  }
}
 800e62c:	bf00      	nop
 800e62e:	3728      	adds	r7, #40	@ 0x28
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}
 800e634:	200006e8 	.word	0x200006e8

0800e638 <APP_UserEvtRx>:
  *         parsed
  * @param  void* Pointer to the ACI packet
  * @retval None
  */
void APP_UserEvtRx(void *pData)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b08a      	sub	sp, #40	@ 0x28
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	61fb      	str	r3, [r7, #28]

  if (hci_pckt->type == HCI_EVENT_PKT || hci_pckt->type == HCI_EVENT_EXT_PKT)
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	2b04      	cmp	r3, #4
 800e64a:	d003      	beq.n	800e654 <APP_UserEvtRx+0x1c>
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	2b82      	cmp	r3, #130	@ 0x82
 800e652:	d171      	bne.n	800e738 <APP_UserEvtRx+0x100>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt *)hci_pckt->data;
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	3301      	adds	r3, #1
 800e658:	61bb      	str	r3, [r7, #24]

    if (hci_pckt->type == HCI_EVENT_PKT)
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	2b04      	cmp	r3, #4
 800e660:	d103      	bne.n	800e66a <APP_UserEvtRx+0x32>
    {
      data = event_pckt->data;
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	3302      	adds	r3, #2
 800e666:	623b      	str	r3, [r7, #32]
 800e668:	e005      	b.n	800e676 <APP_UserEvtRx+0x3e>
    }
    else
    {
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt *)hci_pckt->data;
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	3301      	adds	r3, #1
 800e66e:	617b      	str	r3, [r7, #20]
      data = event_pckt->data;
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	3303      	adds	r3, #3
 800e674:	623b      	str	r3, [r7, #32]
    }

    if (event_pckt->evt == EVT_LE_META_EVENT)
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e67c:	d11e      	bne.n	800e6bc <APP_UserEvtRx+0x84>
    {
      evt_le_meta_event *evt = data;
 800e67e:	6a3b      	ldr	r3, [r7, #32]
 800e680:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table) / sizeof(hci_le_meta_events_table_type)); i++)
 800e682:	2300      	movs	r3, #0
 800e684:	627b      	str	r3, [r7, #36]	@ 0x24
 800e686:	e015      	b.n	800e6b4 <APP_UserEvtRx+0x7c>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	4619      	mov	r1, r3
 800e68e:	4a2c      	ldr	r2, [pc, #176]	@ (800e740 <APP_UserEvtRx+0x108>)
 800e690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e692:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800e696:	4299      	cmp	r1, r3
 800e698:	d109      	bne.n	800e6ae <APP_UserEvtRx+0x76>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 800e69a:	4a29      	ldr	r2, [pc, #164]	@ (800e740 <APP_UserEvtRx+0x108>)
 800e69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e69e:	00db      	lsls	r3, r3, #3
 800e6a0:	4413      	add	r3, r2
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	68fa      	ldr	r2, [r7, #12]
 800e6a6:	3201      	adds	r2, #1
 800e6a8:	4610      	mov	r0, r2
 800e6aa:	4798      	blx	r3
          break;
 800e6ac:	e044      	b.n	800e738 <APP_UserEvtRx+0x100>
      for (i = 0; i < (sizeof(hci_le_meta_events_table) / sizeof(hci_le_meta_events_table_type)); i++)
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b6:	2b27      	cmp	r3, #39	@ 0x27
 800e6b8:	d9e6      	bls.n	800e688 <APP_UserEvtRx+0x50>
          break;
        }
      }
    }
  }
}
 800e6ba:	e03d      	b.n	800e738 <APP_UserEvtRx+0x100>
    else if (event_pckt->evt == EVT_VENDOR)
 800e6bc:	69bb      	ldr	r3, [r7, #24]
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	2bff      	cmp	r3, #255	@ 0xff
 800e6c2:	d11e      	bne.n	800e702 <APP_UserEvtRx+0xca>
      evt_blue_aci *blue_evt = data;
 800e6c4:	6a3b      	ldr	r3, [r7, #32]
 800e6c6:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table) / sizeof(hci_vendor_specific_events_table_type)); i++)
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6cc:	e015      	b.n	800e6fa <APP_UserEvtRx+0xc2>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	881b      	ldrh	r3, [r3, #0]
 800e6d2:	b29a      	uxth	r2, r3
 800e6d4:	491b      	ldr	r1, [pc, #108]	@ (800e744 <APP_UserEvtRx+0x10c>)
 800e6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d8:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d109      	bne.n	800e6f4 <APP_UserEvtRx+0xbc>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 800e6e0:	4a18      	ldr	r2, [pc, #96]	@ (800e744 <APP_UserEvtRx+0x10c>)
 800e6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e4:	00db      	lsls	r3, r3, #3
 800e6e6:	4413      	add	r3, r2
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	693a      	ldr	r2, [r7, #16]
 800e6ec:	3202      	adds	r2, #2
 800e6ee:	4610      	mov	r0, r2
 800e6f0:	4798      	blx	r3
          break;
 800e6f2:	e021      	b.n	800e738 <APP_UserEvtRx+0x100>
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table) / sizeof(hci_vendor_specific_events_table_type)); i++)
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6fc:	2b2d      	cmp	r3, #45	@ 0x2d
 800e6fe:	d9e6      	bls.n	800e6ce <APP_UserEvtRx+0x96>
}
 800e700:	e01a      	b.n	800e738 <APP_UserEvtRx+0x100>
      for (i = 0; i < (sizeof(hci_events_table) / sizeof(hci_events_table_type)); i++)
 800e702:	2300      	movs	r3, #0
 800e704:	627b      	str	r3, [r7, #36]	@ 0x24
 800e706:	e013      	b.n	800e730 <APP_UserEvtRx+0xf8>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	4619      	mov	r1, r3
 800e70e:	4a0e      	ldr	r2, [pc, #56]	@ (800e748 <APP_UserEvtRx+0x110>)
 800e710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e712:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800e716:	4299      	cmp	r1, r3
 800e718:	d107      	bne.n	800e72a <APP_UserEvtRx+0xf2>
          hci_events_table[i].process(data);
 800e71a:	4a0b      	ldr	r2, [pc, #44]	@ (800e748 <APP_UserEvtRx+0x110>)
 800e71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71e:	00db      	lsls	r3, r3, #3
 800e720:	4413      	add	r3, r2
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	6a38      	ldr	r0, [r7, #32]
 800e726:	4798      	blx	r3
          break;
 800e728:	e006      	b.n	800e738 <APP_UserEvtRx+0x100>
      for (i = 0; i < (sizeof(hci_events_table) / sizeof(hci_events_table_type)); i++)
 800e72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e72c:	3301      	adds	r3, #1
 800e72e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e732:	2b07      	cmp	r3, #7
 800e734:	d9e8      	bls.n	800e708 <APP_UserEvtRx+0xd0>
}
 800e736:	e7ff      	b.n	800e738 <APP_UserEvtRx+0x100>
 800e738:	bf00      	nop
 800e73a:	3728      	adds	r7, #40	@ 0x28
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	0800fa7c 	.word	0x0800fa7c
 800e744:	0800fbbc 	.word	0x0800fbbc
 800e748:	0800fa3c 	.word	0x0800fa3c

0800e74c <HCI_TL_UART_Init>:
  *
  * @param  void* Pointer to configuration struct
  * @retval int32_t Status
  */
int32_t HCI_TL_UART_Init(void *pConf)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b088      	sub	sp, #32
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e754:	4b14      	ldr	r3, [pc, #80]	@ (800e7a8 <HCI_TL_UART_Init+0x5c>)
 800e756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e75a:	4a13      	ldr	r2, [pc, #76]	@ (800e7a8 <HCI_TL_UART_Init+0x5c>)
 800e75c:	f043 0301 	orr.w	r3, r3, #1
 800e760:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800e764:	4b10      	ldr	r3, [pc, #64]	@ (800e7a8 <HCI_TL_UART_Init+0x5c>)
 800e766:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e76a:	f003 0301 	and.w	r3, r3, #1
 800e76e:	60bb      	str	r3, [r7, #8]
 800e770:	68bb      	ldr	r3, [r7, #8]

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800e772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e778:	2301      	movs	r3, #1
 800e77a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e77c:	2300      	movs	r3, #0
 800e77e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e780:	2300      	movs	r3, #0
 800e782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800e784:	f107 030c 	add.w	r3, r7, #12
 800e788:	4619      	mov	r1, r3
 800e78a:	4808      	ldr	r0, [pc, #32]	@ (800e7ac <HCI_TL_UART_Init+0x60>)
 800e78c:	f7f3 f92e 	bl	80019ec <HAL_GPIO_Init>

  BSP_LPUART1_Init();
 800e790:	f7f2 fa1a 	bl	8000bc8 <BSP_LPUART1_Init>

  return HAL_UART_Receive_IT(&UART_INSTANCE, &RxBuffer, HCI_TYPE_SIZE);
 800e794:	2201      	movs	r2, #1
 800e796:	4906      	ldr	r1, [pc, #24]	@ (800e7b0 <HCI_TL_UART_Init+0x64>)
 800e798:	4806      	ldr	r0, [pc, #24]	@ (800e7b4 <HCI_TL_UART_Init+0x68>)
 800e79a:	f7f7 fd55 	bl	8006248 <HAL_UART_Receive_IT>
 800e79e:	4603      	mov	r3, r0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3720      	adds	r7, #32
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	46020c00 	.word	0x46020c00
 800e7ac:	42020000 	.word	0x42020000
 800e7b0:	2000075c 	.word	0x2000075c
 800e7b4:	20000098 	.word	0x20000098

0800e7b8 <HCI_TL_UART_DeInit>:
  *
  * @param  None
  * @retval int32_t 0
  */
int32_t HCI_TL_UART_DeInit(void)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800e7bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e7c0:	4802      	ldr	r0, [pc, #8]	@ (800e7cc <HCI_TL_UART_DeInit+0x14>)
 800e7c2:	f7f3 faf3 	bl	8001dac <HAL_GPIO_DeInit>
  return 0;
 800e7c6:	2300      	movs	r3, #0
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	42020000 	.word	0x42020000

0800e7d0 <HCI_TL_UART_Reset>:
  *
  * @param  None
  * @retval int32_t 0
  */
int32_t HCI_TL_UART_Reset(void)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e7da:	4809      	ldr	r0, [pc, #36]	@ (800e800 <HCI_TL_UART_Reset+0x30>)
 800e7dc:	f7f3 fbdc 	bl	8001f98 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800e7e0:	2005      	movs	r0, #5
 800e7e2:	f7f2 ff0b 	bl	80015fc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e7ec:	4804      	ldr	r0, [pc, #16]	@ (800e800 <HCI_TL_UART_Reset+0x30>)
 800e7ee:	f7f3 fbd3 	bl	8001f98 <HAL_GPIO_WritePin>
  HAL_Delay(150);
 800e7f2:	2096      	movs	r0, #150	@ 0x96
 800e7f4:	f7f2 ff02 	bl	80015fc <HAL_Delay>
  return 0;
 800e7f8:	2300      	movs	r3, #0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	42020000 	.word	0x42020000

0800e804 <HCI_TL_UART_Receive>:
  * @param  buffer : Buffer where data from UART are stored
  * @param  size   : Buffer size
  * @retval int32_t: Number of read bytes
  */
int32_t HCI_TL_UART_Receive(uint8_t *buffer, uint16_t size)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	460b      	mov	r3, r1
 800e80e:	807b      	strh	r3, [r7, #2]
  return BSP_LPUART1_Recv(buffer, size);
 800e810:	887b      	ldrh	r3, [r7, #2]
 800e812:	4619      	mov	r1, r3
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f7f2 fa23 	bl	8000c60 <BSP_LPUART1_Recv>
 800e81a:	4603      	mov	r3, r0
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3708      	adds	r7, #8
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <HCI_TL_UART_Send>:
  * @param  buffer : data buffer to be written
  * @param  size   : size of first data buffer to be written
  * @retval int32_t: Number of read bytes
  */
int32_t HCI_TL_UART_Send(uint8_t *buffer, uint16_t size)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	460b      	mov	r3, r1
 800e82e:	807b      	strh	r3, [r7, #2]
  return BSP_LPUART1_Send(buffer, size);
 800e830:	887b      	ldrh	r3, [r7, #2]
 800e832:	4619      	mov	r1, r3
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f7f2 f9f7 	bl	8000c28 <BSP_LPUART1_Send>
 800e83a:	4603      	mov	r3, r0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3708      	adds	r7, #8
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <hci_tl_lowlevel_init>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_init(void)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b088      	sub	sp, #32
 800e848:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_UART_Init;
 800e84a:	4b0a      	ldr	r3, [pc, #40]	@ (800e874 <hci_tl_lowlevel_init+0x30>)
 800e84c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_UART_DeInit;
 800e84e:	4b0a      	ldr	r3, [pc, #40]	@ (800e878 <hci_tl_lowlevel_init+0x34>)
 800e850:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_UART_Send;
 800e852:	4b0a      	ldr	r3, [pc, #40]	@ (800e87c <hci_tl_lowlevel_init+0x38>)
 800e854:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_UART_Receive;
 800e856:	4b0a      	ldr	r3, [pc, #40]	@ (800e880 <hci_tl_lowlevel_init+0x3c>)
 800e858:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_UART_Reset;
 800e85a:	4b0a      	ldr	r3, [pc, #40]	@ (800e884 <hci_tl_lowlevel_init+0x40>)
 800e85c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800e85e:	4b0a      	ldr	r3, [pc, #40]	@ (800e888 <hci_tl_lowlevel_init+0x44>)
 800e860:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus(&fops);
 800e862:	1d3b      	adds	r3, r7, #4
 800e864:	4618      	mov	r0, r3
 800e866:	f7fd fc63 	bl	800c130 <hci_register_io_bus>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800e86a:	bf00      	nop
 800e86c:	3720      	adds	r7, #32
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	0800e74d 	.word	0x0800e74d
 800e878:	0800e7b9 	.word	0x0800e7b9
 800e87c:	0800e825 	.word	0x0800e825
 800e880:	0800e805 	.word	0x0800e805
 800e884:	0800e7d1 	.word	0x0800e7d1
 800e888:	08000c99 	.word	0x08000c99

0800e88c <HAL_UART_RxCpltCallback>:
  * @brief  UART interrupt callback.*
  * @param  huart handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  if (huart == &UART_INSTANCE)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	4a08      	ldr	r2, [pc, #32]	@ (800e8b8 <HAL_UART_RxCpltCallback+0x2c>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d108      	bne.n	800e8ae <HAL_UART_RxCpltCallback+0x22>
  {
    hci_input_event(&RxBuffer, 1);
 800e89c:	2101      	movs	r1, #1
 800e89e:	4807      	ldr	r0, [pc, #28]	@ (800e8bc <HAL_UART_RxCpltCallback+0x30>)
 800e8a0:	f7fa fb2e 	bl	8008f00 <hci_input_event>
    HAL_UART_Receive_IT(&UART_INSTANCE, &RxBuffer, HCI_TYPE_SIZE);
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	4905      	ldr	r1, [pc, #20]	@ (800e8bc <HAL_UART_RxCpltCallback+0x30>)
 800e8a8:	4803      	ldr	r0, [pc, #12]	@ (800e8b8 <HAL_UART_RxCpltCallback+0x2c>)
 800e8aa:	f7f7 fccd 	bl	8006248 <HAL_UART_Receive_IT>
  }
}
 800e8ae:	bf00      	nop
 800e8b0:	3708      	adds	r7, #8
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	20000098 	.word	0x20000098
 800e8bc:	2000075c 	.word	0x2000075c

0800e8c0 <srand>:
 800e8c0:	b538      	push	{r3, r4, r5, lr}
 800e8c2:	4b10      	ldr	r3, [pc, #64]	@ (800e904 <srand+0x44>)
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	681d      	ldr	r5, [r3, #0]
 800e8c8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e8ca:	b9b3      	cbnz	r3, 800e8fa <srand+0x3a>
 800e8cc:	2018      	movs	r0, #24
 800e8ce:	f000 fa59 	bl	800ed84 <malloc>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	6328      	str	r0, [r5, #48]	@ 0x30
 800e8d6:	b920      	cbnz	r0, 800e8e2 <srand+0x22>
 800e8d8:	4b0b      	ldr	r3, [pc, #44]	@ (800e908 <srand+0x48>)
 800e8da:	2146      	movs	r1, #70	@ 0x46
 800e8dc:	480b      	ldr	r0, [pc, #44]	@ (800e90c <srand+0x4c>)
 800e8de:	f000 f9e9 	bl	800ecb4 <__assert_func>
 800e8e2:	490b      	ldr	r1, [pc, #44]	@ (800e910 <srand+0x50>)
 800e8e4:	4b0b      	ldr	r3, [pc, #44]	@ (800e914 <srand+0x54>)
 800e8e6:	e9c0 1300 	strd	r1, r3, [r0]
 800e8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800e918 <srand+0x58>)
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	6083      	str	r3, [r0, #8]
 800e8f0:	230b      	movs	r3, #11
 800e8f2:	8183      	strh	r3, [r0, #12]
 800e8f4:	2001      	movs	r0, #1
 800e8f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e8fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	611c      	str	r4, [r3, #16]
 800e900:	615a      	str	r2, [r3, #20]
 800e902:	bd38      	pop	{r3, r4, r5, pc}
 800e904:	2000002c 	.word	0x2000002c
 800e908:	0800fd2c 	.word	0x0800fd2c
 800e90c:	0800fd43 	.word	0x0800fd43
 800e910:	abcd330e 	.word	0xabcd330e
 800e914:	e66d1234 	.word	0xe66d1234
 800e918:	0005deec 	.word	0x0005deec

0800e91c <rand>:
 800e91c:	4b16      	ldr	r3, [pc, #88]	@ (800e978 <rand+0x5c>)
 800e91e:	b510      	push	{r4, lr}
 800e920:	681c      	ldr	r4, [r3, #0]
 800e922:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e924:	b9b3      	cbnz	r3, 800e954 <rand+0x38>
 800e926:	2018      	movs	r0, #24
 800e928:	f000 fa2c 	bl	800ed84 <malloc>
 800e92c:	4602      	mov	r2, r0
 800e92e:	6320      	str	r0, [r4, #48]	@ 0x30
 800e930:	b920      	cbnz	r0, 800e93c <rand+0x20>
 800e932:	4b12      	ldr	r3, [pc, #72]	@ (800e97c <rand+0x60>)
 800e934:	2152      	movs	r1, #82	@ 0x52
 800e936:	4812      	ldr	r0, [pc, #72]	@ (800e980 <rand+0x64>)
 800e938:	f000 f9bc 	bl	800ecb4 <__assert_func>
 800e93c:	4911      	ldr	r1, [pc, #68]	@ (800e984 <rand+0x68>)
 800e93e:	4b12      	ldr	r3, [pc, #72]	@ (800e988 <rand+0x6c>)
 800e940:	e9c0 1300 	strd	r1, r3, [r0]
 800e944:	4b11      	ldr	r3, [pc, #68]	@ (800e98c <rand+0x70>)
 800e946:	2100      	movs	r1, #0
 800e948:	6083      	str	r3, [r0, #8]
 800e94a:	230b      	movs	r3, #11
 800e94c:	8183      	strh	r3, [r0, #12]
 800e94e:	2001      	movs	r0, #1
 800e950:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e954:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e956:	480e      	ldr	r0, [pc, #56]	@ (800e990 <rand+0x74>)
 800e958:	690b      	ldr	r3, [r1, #16]
 800e95a:	694c      	ldr	r4, [r1, #20]
 800e95c:	4a0d      	ldr	r2, [pc, #52]	@ (800e994 <rand+0x78>)
 800e95e:	4358      	muls	r0, r3
 800e960:	fb02 0004 	mla	r0, r2, r4, r0
 800e964:	fba3 3202 	umull	r3, r2, r3, r2
 800e968:	3301      	adds	r3, #1
 800e96a:	eb40 0002 	adc.w	r0, r0, r2
 800e96e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e972:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e976:	bd10      	pop	{r4, pc}
 800e978:	2000002c 	.word	0x2000002c
 800e97c:	0800fd2c 	.word	0x0800fd2c
 800e980:	0800fd43 	.word	0x0800fd43
 800e984:	abcd330e 	.word	0xabcd330e
 800e988:	e66d1234 	.word	0xe66d1234
 800e98c:	0005deec 	.word	0x0005deec
 800e990:	5851f42d 	.word	0x5851f42d
 800e994:	4c957f2d 	.word	0x4c957f2d

0800e998 <std>:
 800e998:	2300      	movs	r3, #0
 800e99a:	b510      	push	{r4, lr}
 800e99c:	4604      	mov	r4, r0
 800e99e:	6083      	str	r3, [r0, #8]
 800e9a0:	8181      	strh	r1, [r0, #12]
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	6643      	str	r3, [r0, #100]	@ 0x64
 800e9a6:	81c2      	strh	r2, [r0, #14]
 800e9a8:	2208      	movs	r2, #8
 800e9aa:	6183      	str	r3, [r0, #24]
 800e9ac:	e9c0 3300 	strd	r3, r3, [r0]
 800e9b0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9b4:	305c      	adds	r0, #92	@ 0x5c
 800e9b6:	f000 f8f4 	bl	800eba2 <memset>
 800e9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f0 <std+0x58>)
 800e9bc:	6224      	str	r4, [r4, #32]
 800e9be:	6263      	str	r3, [r4, #36]	@ 0x24
 800e9c0:	4b0c      	ldr	r3, [pc, #48]	@ (800e9f4 <std+0x5c>)
 800e9c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e9f8 <std+0x60>)
 800e9c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e9c8:	4b0c      	ldr	r3, [pc, #48]	@ (800e9fc <std+0x64>)
 800e9ca:	6323      	str	r3, [r4, #48]	@ 0x30
 800e9cc:	4b0c      	ldr	r3, [pc, #48]	@ (800ea00 <std+0x68>)
 800e9ce:	429c      	cmp	r4, r3
 800e9d0:	d006      	beq.n	800e9e0 <std+0x48>
 800e9d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e9d6:	4294      	cmp	r4, r2
 800e9d8:	d002      	beq.n	800e9e0 <std+0x48>
 800e9da:	33d0      	adds	r3, #208	@ 0xd0
 800e9dc:	429c      	cmp	r4, r3
 800e9de:	d105      	bne.n	800e9ec <std+0x54>
 800e9e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9e8:	f000 b954 	b.w	800ec94 <__retarget_lock_init_recursive>
 800e9ec:	bd10      	pop	{r4, pc}
 800e9ee:	bf00      	nop
 800e9f0:	0800eb1d 	.word	0x0800eb1d
 800e9f4:	0800eb3f 	.word	0x0800eb3f
 800e9f8:	0800eb77 	.word	0x0800eb77
 800e9fc:	0800eb9b 	.word	0x0800eb9b
 800ea00:	20000760 	.word	0x20000760

0800ea04 <stdio_exit_handler>:
 800ea04:	4a02      	ldr	r2, [pc, #8]	@ (800ea10 <stdio_exit_handler+0xc>)
 800ea06:	4903      	ldr	r1, [pc, #12]	@ (800ea14 <stdio_exit_handler+0x10>)
 800ea08:	4803      	ldr	r0, [pc, #12]	@ (800ea18 <stdio_exit_handler+0x14>)
 800ea0a:	f000 b869 	b.w	800eae0 <_fwalk_sglue>
 800ea0e:	bf00      	nop
 800ea10:	20000020 	.word	0x20000020
 800ea14:	0800eff9 	.word	0x0800eff9
 800ea18:	20000030 	.word	0x20000030

0800ea1c <cleanup_stdio>:
 800ea1c:	6841      	ldr	r1, [r0, #4]
 800ea1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ea50 <cleanup_stdio+0x34>)
 800ea20:	4299      	cmp	r1, r3
 800ea22:	b510      	push	{r4, lr}
 800ea24:	4604      	mov	r4, r0
 800ea26:	d001      	beq.n	800ea2c <cleanup_stdio+0x10>
 800ea28:	f000 fae6 	bl	800eff8 <_fflush_r>
 800ea2c:	68a1      	ldr	r1, [r4, #8]
 800ea2e:	4b09      	ldr	r3, [pc, #36]	@ (800ea54 <cleanup_stdio+0x38>)
 800ea30:	4299      	cmp	r1, r3
 800ea32:	d002      	beq.n	800ea3a <cleanup_stdio+0x1e>
 800ea34:	4620      	mov	r0, r4
 800ea36:	f000 fadf 	bl	800eff8 <_fflush_r>
 800ea3a:	68e1      	ldr	r1, [r4, #12]
 800ea3c:	4b06      	ldr	r3, [pc, #24]	@ (800ea58 <cleanup_stdio+0x3c>)
 800ea3e:	4299      	cmp	r1, r3
 800ea40:	d004      	beq.n	800ea4c <cleanup_stdio+0x30>
 800ea42:	4620      	mov	r0, r4
 800ea44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea48:	f000 bad6 	b.w	800eff8 <_fflush_r>
 800ea4c:	bd10      	pop	{r4, pc}
 800ea4e:	bf00      	nop
 800ea50:	20000760 	.word	0x20000760
 800ea54:	200007c8 	.word	0x200007c8
 800ea58:	20000830 	.word	0x20000830

0800ea5c <global_stdio_init.part.0>:
 800ea5c:	b510      	push	{r4, lr}
 800ea5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea8c <global_stdio_init.part.0+0x30>)
 800ea60:	2104      	movs	r1, #4
 800ea62:	4c0b      	ldr	r4, [pc, #44]	@ (800ea90 <global_stdio_init.part.0+0x34>)
 800ea64:	4a0b      	ldr	r2, [pc, #44]	@ (800ea94 <global_stdio_init.part.0+0x38>)
 800ea66:	4620      	mov	r0, r4
 800ea68:	601a      	str	r2, [r3, #0]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f7ff ff94 	bl	800e998 <std>
 800ea70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ea74:	2201      	movs	r2, #1
 800ea76:	2109      	movs	r1, #9
 800ea78:	f7ff ff8e 	bl	800e998 <std>
 800ea7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ea80:	2202      	movs	r2, #2
 800ea82:	2112      	movs	r1, #18
 800ea84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea88:	f7ff bf86 	b.w	800e998 <std>
 800ea8c:	20000898 	.word	0x20000898
 800ea90:	20000760 	.word	0x20000760
 800ea94:	0800ea05 	.word	0x0800ea05

0800ea98 <__sfp_lock_acquire>:
 800ea98:	4801      	ldr	r0, [pc, #4]	@ (800eaa0 <__sfp_lock_acquire+0x8>)
 800ea9a:	f000 b8fc 	b.w	800ec96 <__retarget_lock_acquire_recursive>
 800ea9e:	bf00      	nop
 800eaa0:	200008a1 	.word	0x200008a1

0800eaa4 <__sfp_lock_release>:
 800eaa4:	4801      	ldr	r0, [pc, #4]	@ (800eaac <__sfp_lock_release+0x8>)
 800eaa6:	f000 b8f7 	b.w	800ec98 <__retarget_lock_release_recursive>
 800eaaa:	bf00      	nop
 800eaac:	200008a1 	.word	0x200008a1

0800eab0 <__sinit>:
 800eab0:	b510      	push	{r4, lr}
 800eab2:	4604      	mov	r4, r0
 800eab4:	f7ff fff0 	bl	800ea98 <__sfp_lock_acquire>
 800eab8:	6a23      	ldr	r3, [r4, #32]
 800eaba:	b11b      	cbz	r3, 800eac4 <__sinit+0x14>
 800eabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eac0:	f7ff bff0 	b.w	800eaa4 <__sfp_lock_release>
 800eac4:	4b04      	ldr	r3, [pc, #16]	@ (800ead8 <__sinit+0x28>)
 800eac6:	6223      	str	r3, [r4, #32]
 800eac8:	4b04      	ldr	r3, [pc, #16]	@ (800eadc <__sinit+0x2c>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1f5      	bne.n	800eabc <__sinit+0xc>
 800ead0:	f7ff ffc4 	bl	800ea5c <global_stdio_init.part.0>
 800ead4:	e7f2      	b.n	800eabc <__sinit+0xc>
 800ead6:	bf00      	nop
 800ead8:	0800ea1d 	.word	0x0800ea1d
 800eadc:	20000898 	.word	0x20000898

0800eae0 <_fwalk_sglue>:
 800eae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eae4:	4607      	mov	r7, r0
 800eae6:	4688      	mov	r8, r1
 800eae8:	4614      	mov	r4, r2
 800eaea:	2600      	movs	r6, #0
 800eaec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eaf0:	f1b9 0901 	subs.w	r9, r9, #1
 800eaf4:	d505      	bpl.n	800eb02 <_fwalk_sglue+0x22>
 800eaf6:	6824      	ldr	r4, [r4, #0]
 800eaf8:	2c00      	cmp	r4, #0
 800eafa:	d1f7      	bne.n	800eaec <_fwalk_sglue+0xc>
 800eafc:	4630      	mov	r0, r6
 800eafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb02:	89ab      	ldrh	r3, [r5, #12]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d907      	bls.n	800eb18 <_fwalk_sglue+0x38>
 800eb08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	d003      	beq.n	800eb18 <_fwalk_sglue+0x38>
 800eb10:	4629      	mov	r1, r5
 800eb12:	4638      	mov	r0, r7
 800eb14:	47c0      	blx	r8
 800eb16:	4306      	orrs	r6, r0
 800eb18:	3568      	adds	r5, #104	@ 0x68
 800eb1a:	e7e9      	b.n	800eaf0 <_fwalk_sglue+0x10>

0800eb1c <__sread>:
 800eb1c:	b510      	push	{r4, lr}
 800eb1e:	460c      	mov	r4, r1
 800eb20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb24:	f000 f868 	bl	800ebf8 <_read_r>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	bfab      	itete	ge
 800eb2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eb2e:	89a3      	ldrhlt	r3, [r4, #12]
 800eb30:	181b      	addge	r3, r3, r0
 800eb32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eb36:	bfac      	ite	ge
 800eb38:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb3a:	81a3      	strhlt	r3, [r4, #12]
 800eb3c:	bd10      	pop	{r4, pc}

0800eb3e <__swrite>:
 800eb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb42:	461f      	mov	r7, r3
 800eb44:	898b      	ldrh	r3, [r1, #12]
 800eb46:	4605      	mov	r5, r0
 800eb48:	460c      	mov	r4, r1
 800eb4a:	05db      	lsls	r3, r3, #23
 800eb4c:	4616      	mov	r6, r2
 800eb4e:	d505      	bpl.n	800eb5c <__swrite+0x1e>
 800eb50:	2302      	movs	r3, #2
 800eb52:	2200      	movs	r2, #0
 800eb54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb58:	f000 f83c 	bl	800ebd4 <_lseek_r>
 800eb5c:	89a3      	ldrh	r3, [r4, #12]
 800eb5e:	4632      	mov	r2, r6
 800eb60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb64:	4628      	mov	r0, r5
 800eb66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb6a:	81a3      	strh	r3, [r4, #12]
 800eb6c:	463b      	mov	r3, r7
 800eb6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb72:	f000 b853 	b.w	800ec1c <_write_r>

0800eb76 <__sseek>:
 800eb76:	b510      	push	{r4, lr}
 800eb78:	460c      	mov	r4, r1
 800eb7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb7e:	f000 f829 	bl	800ebd4 <_lseek_r>
 800eb82:	1c43      	adds	r3, r0, #1
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	bf15      	itete	ne
 800eb88:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eb8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb92:	81a3      	strheq	r3, [r4, #12]
 800eb94:	bf18      	it	ne
 800eb96:	81a3      	strhne	r3, [r4, #12]
 800eb98:	bd10      	pop	{r4, pc}

0800eb9a <__sclose>:
 800eb9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb9e:	f000 b809 	b.w	800ebb4 <_close_r>

0800eba2 <memset>:
 800eba2:	4402      	add	r2, r0
 800eba4:	4603      	mov	r3, r0
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d100      	bne.n	800ebac <memset+0xa>
 800ebaa:	4770      	bx	lr
 800ebac:	f803 1b01 	strb.w	r1, [r3], #1
 800ebb0:	e7f9      	b.n	800eba6 <memset+0x4>
	...

0800ebb4 <_close_r>:
 800ebb4:	b538      	push	{r3, r4, r5, lr}
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	4d05      	ldr	r5, [pc, #20]	@ (800ebd0 <_close_r+0x1c>)
 800ebba:	4604      	mov	r4, r0
 800ebbc:	4608      	mov	r0, r1
 800ebbe:	602b      	str	r3, [r5, #0]
 800ebc0:	f7f2 f986 	bl	8000ed0 <_close>
 800ebc4:	1c43      	adds	r3, r0, #1
 800ebc6:	d102      	bne.n	800ebce <_close_r+0x1a>
 800ebc8:	682b      	ldr	r3, [r5, #0]
 800ebca:	b103      	cbz	r3, 800ebce <_close_r+0x1a>
 800ebcc:	6023      	str	r3, [r4, #0]
 800ebce:	bd38      	pop	{r3, r4, r5, pc}
 800ebd0:	2000089c 	.word	0x2000089c

0800ebd4 <_lseek_r>:
 800ebd4:	b538      	push	{r3, r4, r5, lr}
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	4d06      	ldr	r5, [pc, #24]	@ (800ebf4 <_lseek_r+0x20>)
 800ebda:	4608      	mov	r0, r1
 800ebdc:	4611      	mov	r1, r2
 800ebde:	2200      	movs	r2, #0
 800ebe0:	602a      	str	r2, [r5, #0]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	f7f2 f99b 	bl	8000f1e <_lseek>
 800ebe8:	1c43      	adds	r3, r0, #1
 800ebea:	d102      	bne.n	800ebf2 <_lseek_r+0x1e>
 800ebec:	682b      	ldr	r3, [r5, #0]
 800ebee:	b103      	cbz	r3, 800ebf2 <_lseek_r+0x1e>
 800ebf0:	6023      	str	r3, [r4, #0]
 800ebf2:	bd38      	pop	{r3, r4, r5, pc}
 800ebf4:	2000089c 	.word	0x2000089c

0800ebf8 <_read_r>:
 800ebf8:	b538      	push	{r3, r4, r5, lr}
 800ebfa:	4604      	mov	r4, r0
 800ebfc:	4d06      	ldr	r5, [pc, #24]	@ (800ec18 <_read_r+0x20>)
 800ebfe:	4608      	mov	r0, r1
 800ec00:	4611      	mov	r1, r2
 800ec02:	2200      	movs	r2, #0
 800ec04:	602a      	str	r2, [r5, #0]
 800ec06:	461a      	mov	r2, r3
 800ec08:	f7f2 f929 	bl	8000e5e <_read>
 800ec0c:	1c43      	adds	r3, r0, #1
 800ec0e:	d102      	bne.n	800ec16 <_read_r+0x1e>
 800ec10:	682b      	ldr	r3, [r5, #0]
 800ec12:	b103      	cbz	r3, 800ec16 <_read_r+0x1e>
 800ec14:	6023      	str	r3, [r4, #0]
 800ec16:	bd38      	pop	{r3, r4, r5, pc}
 800ec18:	2000089c 	.word	0x2000089c

0800ec1c <_write_r>:
 800ec1c:	b538      	push	{r3, r4, r5, lr}
 800ec1e:	4604      	mov	r4, r0
 800ec20:	4d06      	ldr	r5, [pc, #24]	@ (800ec3c <_write_r+0x20>)
 800ec22:	4608      	mov	r0, r1
 800ec24:	4611      	mov	r1, r2
 800ec26:	2200      	movs	r2, #0
 800ec28:	602a      	str	r2, [r5, #0]
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	f7f2 f934 	bl	8000e98 <_write>
 800ec30:	1c43      	adds	r3, r0, #1
 800ec32:	d102      	bne.n	800ec3a <_write_r+0x1e>
 800ec34:	682b      	ldr	r3, [r5, #0]
 800ec36:	b103      	cbz	r3, 800ec3a <_write_r+0x1e>
 800ec38:	6023      	str	r3, [r4, #0]
 800ec3a:	bd38      	pop	{r3, r4, r5, pc}
 800ec3c:	2000089c 	.word	0x2000089c

0800ec40 <__errno>:
 800ec40:	4b01      	ldr	r3, [pc, #4]	@ (800ec48 <__errno+0x8>)
 800ec42:	6818      	ldr	r0, [r3, #0]
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	2000002c 	.word	0x2000002c

0800ec4c <__libc_init_array>:
 800ec4c:	b570      	push	{r4, r5, r6, lr}
 800ec4e:	4d0d      	ldr	r5, [pc, #52]	@ (800ec84 <__libc_init_array+0x38>)
 800ec50:	2600      	movs	r6, #0
 800ec52:	4c0d      	ldr	r4, [pc, #52]	@ (800ec88 <__libc_init_array+0x3c>)
 800ec54:	1b64      	subs	r4, r4, r5
 800ec56:	10a4      	asrs	r4, r4, #2
 800ec58:	42a6      	cmp	r6, r4
 800ec5a:	d109      	bne.n	800ec70 <__libc_init_array+0x24>
 800ec5c:	4d0b      	ldr	r5, [pc, #44]	@ (800ec8c <__libc_init_array+0x40>)
 800ec5e:	2600      	movs	r6, #0
 800ec60:	4c0b      	ldr	r4, [pc, #44]	@ (800ec90 <__libc_init_array+0x44>)
 800ec62:	f000 fe57 	bl	800f914 <_init>
 800ec66:	1b64      	subs	r4, r4, r5
 800ec68:	10a4      	asrs	r4, r4, #2
 800ec6a:	42a6      	cmp	r6, r4
 800ec6c:	d105      	bne.n	800ec7a <__libc_init_array+0x2e>
 800ec6e:	bd70      	pop	{r4, r5, r6, pc}
 800ec70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec74:	3601      	adds	r6, #1
 800ec76:	4798      	blx	r3
 800ec78:	e7ee      	b.n	800ec58 <__libc_init_array+0xc>
 800ec7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec7e:	3601      	adds	r6, #1
 800ec80:	4798      	blx	r3
 800ec82:	e7f2      	b.n	800ec6a <__libc_init_array+0x1e>
 800ec84:	0800fe14 	.word	0x0800fe14
 800ec88:	0800fe14 	.word	0x0800fe14
 800ec8c:	0800fe14 	.word	0x0800fe14
 800ec90:	0800fe18 	.word	0x0800fe18

0800ec94 <__retarget_lock_init_recursive>:
 800ec94:	4770      	bx	lr

0800ec96 <__retarget_lock_acquire_recursive>:
 800ec96:	4770      	bx	lr

0800ec98 <__retarget_lock_release_recursive>:
 800ec98:	4770      	bx	lr

0800ec9a <memcpy>:
 800ec9a:	440a      	add	r2, r1
 800ec9c:	1e43      	subs	r3, r0, #1
 800ec9e:	4291      	cmp	r1, r2
 800eca0:	d100      	bne.n	800eca4 <memcpy+0xa>
 800eca2:	4770      	bx	lr
 800eca4:	b510      	push	{r4, lr}
 800eca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecaa:	4291      	cmp	r1, r2
 800ecac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecb0:	d1f9      	bne.n	800eca6 <memcpy+0xc>
 800ecb2:	bd10      	pop	{r4, pc}

0800ecb4 <__assert_func>:
 800ecb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ecb6:	4614      	mov	r4, r2
 800ecb8:	461a      	mov	r2, r3
 800ecba:	4b09      	ldr	r3, [pc, #36]	@ (800ece0 <__assert_func+0x2c>)
 800ecbc:	4605      	mov	r5, r0
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	68d8      	ldr	r0, [r3, #12]
 800ecc2:	b954      	cbnz	r4, 800ecda <__assert_func+0x26>
 800ecc4:	4b07      	ldr	r3, [pc, #28]	@ (800ece4 <__assert_func+0x30>)
 800ecc6:	461c      	mov	r4, r3
 800ecc8:	9100      	str	r1, [sp, #0]
 800ecca:	4907      	ldr	r1, [pc, #28]	@ (800ece8 <__assert_func+0x34>)
 800eccc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ecd0:	462b      	mov	r3, r5
 800ecd2:	f000 f9b9 	bl	800f048 <fiprintf>
 800ecd6:	f000 f9d9 	bl	800f08c <abort>
 800ecda:	4b04      	ldr	r3, [pc, #16]	@ (800ecec <__assert_func+0x38>)
 800ecdc:	e7f4      	b.n	800ecc8 <__assert_func+0x14>
 800ecde:	bf00      	nop
 800ece0:	2000002c 	.word	0x2000002c
 800ece4:	0800fdd6 	.word	0x0800fdd6
 800ece8:	0800fda8 	.word	0x0800fda8
 800ecec:	0800fd9b 	.word	0x0800fd9b

0800ecf0 <_free_r>:
 800ecf0:	b538      	push	{r3, r4, r5, lr}
 800ecf2:	4605      	mov	r5, r0
 800ecf4:	2900      	cmp	r1, #0
 800ecf6:	d041      	beq.n	800ed7c <_free_r+0x8c>
 800ecf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecfc:	1f0c      	subs	r4, r1, #4
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	bfb8      	it	lt
 800ed02:	18e4      	addlt	r4, r4, r3
 800ed04:	f000 f8e8 	bl	800eed8 <__malloc_lock>
 800ed08:	4a1d      	ldr	r2, [pc, #116]	@ (800ed80 <_free_r+0x90>)
 800ed0a:	6813      	ldr	r3, [r2, #0]
 800ed0c:	b933      	cbnz	r3, 800ed1c <_free_r+0x2c>
 800ed0e:	6063      	str	r3, [r4, #4]
 800ed10:	6014      	str	r4, [r2, #0]
 800ed12:	4628      	mov	r0, r5
 800ed14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed18:	f000 b8e4 	b.w	800eee4 <__malloc_unlock>
 800ed1c:	42a3      	cmp	r3, r4
 800ed1e:	d908      	bls.n	800ed32 <_free_r+0x42>
 800ed20:	6820      	ldr	r0, [r4, #0]
 800ed22:	1821      	adds	r1, r4, r0
 800ed24:	428b      	cmp	r3, r1
 800ed26:	bf01      	itttt	eq
 800ed28:	6819      	ldreq	r1, [r3, #0]
 800ed2a:	685b      	ldreq	r3, [r3, #4]
 800ed2c:	1809      	addeq	r1, r1, r0
 800ed2e:	6021      	streq	r1, [r4, #0]
 800ed30:	e7ed      	b.n	800ed0e <_free_r+0x1e>
 800ed32:	461a      	mov	r2, r3
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	b10b      	cbz	r3, 800ed3c <_free_r+0x4c>
 800ed38:	42a3      	cmp	r3, r4
 800ed3a:	d9fa      	bls.n	800ed32 <_free_r+0x42>
 800ed3c:	6811      	ldr	r1, [r2, #0]
 800ed3e:	1850      	adds	r0, r2, r1
 800ed40:	42a0      	cmp	r0, r4
 800ed42:	d10b      	bne.n	800ed5c <_free_r+0x6c>
 800ed44:	6820      	ldr	r0, [r4, #0]
 800ed46:	4401      	add	r1, r0
 800ed48:	1850      	adds	r0, r2, r1
 800ed4a:	6011      	str	r1, [r2, #0]
 800ed4c:	4283      	cmp	r3, r0
 800ed4e:	d1e0      	bne.n	800ed12 <_free_r+0x22>
 800ed50:	6818      	ldr	r0, [r3, #0]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	4408      	add	r0, r1
 800ed56:	6053      	str	r3, [r2, #4]
 800ed58:	6010      	str	r0, [r2, #0]
 800ed5a:	e7da      	b.n	800ed12 <_free_r+0x22>
 800ed5c:	d902      	bls.n	800ed64 <_free_r+0x74>
 800ed5e:	230c      	movs	r3, #12
 800ed60:	602b      	str	r3, [r5, #0]
 800ed62:	e7d6      	b.n	800ed12 <_free_r+0x22>
 800ed64:	6820      	ldr	r0, [r4, #0]
 800ed66:	1821      	adds	r1, r4, r0
 800ed68:	428b      	cmp	r3, r1
 800ed6a:	bf02      	ittt	eq
 800ed6c:	6819      	ldreq	r1, [r3, #0]
 800ed6e:	685b      	ldreq	r3, [r3, #4]
 800ed70:	1809      	addeq	r1, r1, r0
 800ed72:	6063      	str	r3, [r4, #4]
 800ed74:	bf08      	it	eq
 800ed76:	6021      	streq	r1, [r4, #0]
 800ed78:	6054      	str	r4, [r2, #4]
 800ed7a:	e7ca      	b.n	800ed12 <_free_r+0x22>
 800ed7c:	bd38      	pop	{r3, r4, r5, pc}
 800ed7e:	bf00      	nop
 800ed80:	200008a8 	.word	0x200008a8

0800ed84 <malloc>:
 800ed84:	4b02      	ldr	r3, [pc, #8]	@ (800ed90 <malloc+0xc>)
 800ed86:	4601      	mov	r1, r0
 800ed88:	6818      	ldr	r0, [r3, #0]
 800ed8a:	f000 b825 	b.w	800edd8 <_malloc_r>
 800ed8e:	bf00      	nop
 800ed90:	2000002c 	.word	0x2000002c

0800ed94 <sbrk_aligned>:
 800ed94:	b570      	push	{r4, r5, r6, lr}
 800ed96:	4e0f      	ldr	r6, [pc, #60]	@ (800edd4 <sbrk_aligned+0x40>)
 800ed98:	460c      	mov	r4, r1
 800ed9a:	4605      	mov	r5, r0
 800ed9c:	6831      	ldr	r1, [r6, #0]
 800ed9e:	b911      	cbnz	r1, 800eda6 <sbrk_aligned+0x12>
 800eda0:	f000 f964 	bl	800f06c <_sbrk_r>
 800eda4:	6030      	str	r0, [r6, #0]
 800eda6:	4621      	mov	r1, r4
 800eda8:	4628      	mov	r0, r5
 800edaa:	f000 f95f 	bl	800f06c <_sbrk_r>
 800edae:	1c43      	adds	r3, r0, #1
 800edb0:	d103      	bne.n	800edba <sbrk_aligned+0x26>
 800edb2:	f04f 34ff 	mov.w	r4, #4294967295
 800edb6:	4620      	mov	r0, r4
 800edb8:	bd70      	pop	{r4, r5, r6, pc}
 800edba:	1cc4      	adds	r4, r0, #3
 800edbc:	f024 0403 	bic.w	r4, r4, #3
 800edc0:	42a0      	cmp	r0, r4
 800edc2:	d0f8      	beq.n	800edb6 <sbrk_aligned+0x22>
 800edc4:	1a21      	subs	r1, r4, r0
 800edc6:	4628      	mov	r0, r5
 800edc8:	f000 f950 	bl	800f06c <_sbrk_r>
 800edcc:	3001      	adds	r0, #1
 800edce:	d1f2      	bne.n	800edb6 <sbrk_aligned+0x22>
 800edd0:	e7ef      	b.n	800edb2 <sbrk_aligned+0x1e>
 800edd2:	bf00      	nop
 800edd4:	200008a4 	.word	0x200008a4

0800edd8 <_malloc_r>:
 800edd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eddc:	1ccd      	adds	r5, r1, #3
 800edde:	4606      	mov	r6, r0
 800ede0:	f025 0503 	bic.w	r5, r5, #3
 800ede4:	3508      	adds	r5, #8
 800ede6:	2d0c      	cmp	r5, #12
 800ede8:	bf38      	it	cc
 800edea:	250c      	movcc	r5, #12
 800edec:	2d00      	cmp	r5, #0
 800edee:	db01      	blt.n	800edf4 <_malloc_r+0x1c>
 800edf0:	42a9      	cmp	r1, r5
 800edf2:	d904      	bls.n	800edfe <_malloc_r+0x26>
 800edf4:	230c      	movs	r3, #12
 800edf6:	6033      	str	r3, [r6, #0]
 800edf8:	2000      	movs	r0, #0
 800edfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eed4 <_malloc_r+0xfc>
 800ee02:	f000 f869 	bl	800eed8 <__malloc_lock>
 800ee06:	f8d8 3000 	ldr.w	r3, [r8]
 800ee0a:	461c      	mov	r4, r3
 800ee0c:	bb44      	cbnz	r4, 800ee60 <_malloc_r+0x88>
 800ee0e:	4629      	mov	r1, r5
 800ee10:	4630      	mov	r0, r6
 800ee12:	f7ff ffbf 	bl	800ed94 <sbrk_aligned>
 800ee16:	1c43      	adds	r3, r0, #1
 800ee18:	4604      	mov	r4, r0
 800ee1a:	d158      	bne.n	800eece <_malloc_r+0xf6>
 800ee1c:	f8d8 4000 	ldr.w	r4, [r8]
 800ee20:	4627      	mov	r7, r4
 800ee22:	2f00      	cmp	r7, #0
 800ee24:	d143      	bne.n	800eeae <_malloc_r+0xd6>
 800ee26:	2c00      	cmp	r4, #0
 800ee28:	d04b      	beq.n	800eec2 <_malloc_r+0xea>
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	4639      	mov	r1, r7
 800ee2e:	4630      	mov	r0, r6
 800ee30:	eb04 0903 	add.w	r9, r4, r3
 800ee34:	f000 f91a 	bl	800f06c <_sbrk_r>
 800ee38:	4581      	cmp	r9, r0
 800ee3a:	d142      	bne.n	800eec2 <_malloc_r+0xea>
 800ee3c:	6821      	ldr	r1, [r4, #0]
 800ee3e:	4630      	mov	r0, r6
 800ee40:	1a6d      	subs	r5, r5, r1
 800ee42:	4629      	mov	r1, r5
 800ee44:	f7ff ffa6 	bl	800ed94 <sbrk_aligned>
 800ee48:	3001      	adds	r0, #1
 800ee4a:	d03a      	beq.n	800eec2 <_malloc_r+0xea>
 800ee4c:	6823      	ldr	r3, [r4, #0]
 800ee4e:	442b      	add	r3, r5
 800ee50:	6023      	str	r3, [r4, #0]
 800ee52:	f8d8 3000 	ldr.w	r3, [r8]
 800ee56:	685a      	ldr	r2, [r3, #4]
 800ee58:	bb62      	cbnz	r2, 800eeb4 <_malloc_r+0xdc>
 800ee5a:	f8c8 7000 	str.w	r7, [r8]
 800ee5e:	e00f      	b.n	800ee80 <_malloc_r+0xa8>
 800ee60:	6822      	ldr	r2, [r4, #0]
 800ee62:	1b52      	subs	r2, r2, r5
 800ee64:	d420      	bmi.n	800eea8 <_malloc_r+0xd0>
 800ee66:	2a0b      	cmp	r2, #11
 800ee68:	d917      	bls.n	800ee9a <_malloc_r+0xc2>
 800ee6a:	1961      	adds	r1, r4, r5
 800ee6c:	42a3      	cmp	r3, r4
 800ee6e:	6025      	str	r5, [r4, #0]
 800ee70:	bf18      	it	ne
 800ee72:	6059      	strne	r1, [r3, #4]
 800ee74:	6863      	ldr	r3, [r4, #4]
 800ee76:	bf08      	it	eq
 800ee78:	f8c8 1000 	streq.w	r1, [r8]
 800ee7c:	5162      	str	r2, [r4, r5]
 800ee7e:	604b      	str	r3, [r1, #4]
 800ee80:	4630      	mov	r0, r6
 800ee82:	f000 f82f 	bl	800eee4 <__malloc_unlock>
 800ee86:	f104 000b 	add.w	r0, r4, #11
 800ee8a:	1d23      	adds	r3, r4, #4
 800ee8c:	f020 0007 	bic.w	r0, r0, #7
 800ee90:	1ac2      	subs	r2, r0, r3
 800ee92:	bf1c      	itt	ne
 800ee94:	1a1b      	subne	r3, r3, r0
 800ee96:	50a3      	strne	r3, [r4, r2]
 800ee98:	e7af      	b.n	800edfa <_malloc_r+0x22>
 800ee9a:	6862      	ldr	r2, [r4, #4]
 800ee9c:	42a3      	cmp	r3, r4
 800ee9e:	bf0c      	ite	eq
 800eea0:	f8c8 2000 	streq.w	r2, [r8]
 800eea4:	605a      	strne	r2, [r3, #4]
 800eea6:	e7eb      	b.n	800ee80 <_malloc_r+0xa8>
 800eea8:	4623      	mov	r3, r4
 800eeaa:	6864      	ldr	r4, [r4, #4]
 800eeac:	e7ae      	b.n	800ee0c <_malloc_r+0x34>
 800eeae:	463c      	mov	r4, r7
 800eeb0:	687f      	ldr	r7, [r7, #4]
 800eeb2:	e7b6      	b.n	800ee22 <_malloc_r+0x4a>
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	42a3      	cmp	r3, r4
 800eeba:	d1fb      	bne.n	800eeb4 <_malloc_r+0xdc>
 800eebc:	2300      	movs	r3, #0
 800eebe:	6053      	str	r3, [r2, #4]
 800eec0:	e7de      	b.n	800ee80 <_malloc_r+0xa8>
 800eec2:	230c      	movs	r3, #12
 800eec4:	4630      	mov	r0, r6
 800eec6:	6033      	str	r3, [r6, #0]
 800eec8:	f000 f80c 	bl	800eee4 <__malloc_unlock>
 800eecc:	e794      	b.n	800edf8 <_malloc_r+0x20>
 800eece:	6005      	str	r5, [r0, #0]
 800eed0:	e7d6      	b.n	800ee80 <_malloc_r+0xa8>
 800eed2:	bf00      	nop
 800eed4:	200008a8 	.word	0x200008a8

0800eed8 <__malloc_lock>:
 800eed8:	4801      	ldr	r0, [pc, #4]	@ (800eee0 <__malloc_lock+0x8>)
 800eeda:	f7ff bedc 	b.w	800ec96 <__retarget_lock_acquire_recursive>
 800eede:	bf00      	nop
 800eee0:	200008a0 	.word	0x200008a0

0800eee4 <__malloc_unlock>:
 800eee4:	4801      	ldr	r0, [pc, #4]	@ (800eeec <__malloc_unlock+0x8>)
 800eee6:	f7ff bed7 	b.w	800ec98 <__retarget_lock_release_recursive>
 800eeea:	bf00      	nop
 800eeec:	200008a0 	.word	0x200008a0

0800eef0 <__sflush_r>:
 800eef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef8:	0716      	lsls	r6, r2, #28
 800eefa:	4605      	mov	r5, r0
 800eefc:	460c      	mov	r4, r1
 800eefe:	d454      	bmi.n	800efaa <__sflush_r+0xba>
 800ef00:	684b      	ldr	r3, [r1, #4]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	dc02      	bgt.n	800ef0c <__sflush_r+0x1c>
 800ef06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	dd48      	ble.n	800ef9e <__sflush_r+0xae>
 800ef0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef0e:	2e00      	cmp	r6, #0
 800ef10:	d045      	beq.n	800ef9e <__sflush_r+0xae>
 800ef12:	2300      	movs	r3, #0
 800ef14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef18:	682f      	ldr	r7, [r5, #0]
 800ef1a:	6a21      	ldr	r1, [r4, #32]
 800ef1c:	602b      	str	r3, [r5, #0]
 800ef1e:	d030      	beq.n	800ef82 <__sflush_r+0x92>
 800ef20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef22:	89a3      	ldrh	r3, [r4, #12]
 800ef24:	0759      	lsls	r1, r3, #29
 800ef26:	d505      	bpl.n	800ef34 <__sflush_r+0x44>
 800ef28:	6863      	ldr	r3, [r4, #4]
 800ef2a:	1ad2      	subs	r2, r2, r3
 800ef2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef2e:	b10b      	cbz	r3, 800ef34 <__sflush_r+0x44>
 800ef30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef32:	1ad2      	subs	r2, r2, r3
 800ef34:	2300      	movs	r3, #0
 800ef36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef38:	6a21      	ldr	r1, [r4, #32]
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	47b0      	blx	r6
 800ef3e:	1c43      	adds	r3, r0, #1
 800ef40:	89a3      	ldrh	r3, [r4, #12]
 800ef42:	d106      	bne.n	800ef52 <__sflush_r+0x62>
 800ef44:	6829      	ldr	r1, [r5, #0]
 800ef46:	291d      	cmp	r1, #29
 800ef48:	d82b      	bhi.n	800efa2 <__sflush_r+0xb2>
 800ef4a:	4a2a      	ldr	r2, [pc, #168]	@ (800eff4 <__sflush_r+0x104>)
 800ef4c:	410a      	asrs	r2, r1
 800ef4e:	07d6      	lsls	r6, r2, #31
 800ef50:	d427      	bmi.n	800efa2 <__sflush_r+0xb2>
 800ef52:	2200      	movs	r2, #0
 800ef54:	04d9      	lsls	r1, r3, #19
 800ef56:	6062      	str	r2, [r4, #4]
 800ef58:	6922      	ldr	r2, [r4, #16]
 800ef5a:	6022      	str	r2, [r4, #0]
 800ef5c:	d504      	bpl.n	800ef68 <__sflush_r+0x78>
 800ef5e:	1c42      	adds	r2, r0, #1
 800ef60:	d101      	bne.n	800ef66 <__sflush_r+0x76>
 800ef62:	682b      	ldr	r3, [r5, #0]
 800ef64:	b903      	cbnz	r3, 800ef68 <__sflush_r+0x78>
 800ef66:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef6a:	602f      	str	r7, [r5, #0]
 800ef6c:	b1b9      	cbz	r1, 800ef9e <__sflush_r+0xae>
 800ef6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef72:	4299      	cmp	r1, r3
 800ef74:	d002      	beq.n	800ef7c <__sflush_r+0x8c>
 800ef76:	4628      	mov	r0, r5
 800ef78:	f7ff feba 	bl	800ecf0 <_free_r>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef80:	e00d      	b.n	800ef9e <__sflush_r+0xae>
 800ef82:	2301      	movs	r3, #1
 800ef84:	4628      	mov	r0, r5
 800ef86:	47b0      	blx	r6
 800ef88:	4602      	mov	r2, r0
 800ef8a:	1c50      	adds	r0, r2, #1
 800ef8c:	d1c9      	bne.n	800ef22 <__sflush_r+0x32>
 800ef8e:	682b      	ldr	r3, [r5, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d0c6      	beq.n	800ef22 <__sflush_r+0x32>
 800ef94:	2b1d      	cmp	r3, #29
 800ef96:	d001      	beq.n	800ef9c <__sflush_r+0xac>
 800ef98:	2b16      	cmp	r3, #22
 800ef9a:	d11d      	bne.n	800efd8 <__sflush_r+0xe8>
 800ef9c:	602f      	str	r7, [r5, #0]
 800ef9e:	2000      	movs	r0, #0
 800efa0:	e021      	b.n	800efe6 <__sflush_r+0xf6>
 800efa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efa6:	b21b      	sxth	r3, r3
 800efa8:	e01a      	b.n	800efe0 <__sflush_r+0xf0>
 800efaa:	690f      	ldr	r7, [r1, #16]
 800efac:	2f00      	cmp	r7, #0
 800efae:	d0f6      	beq.n	800ef9e <__sflush_r+0xae>
 800efb0:	0793      	lsls	r3, r2, #30
 800efb2:	680e      	ldr	r6, [r1, #0]
 800efb4:	600f      	str	r7, [r1, #0]
 800efb6:	bf0c      	ite	eq
 800efb8:	694b      	ldreq	r3, [r1, #20]
 800efba:	2300      	movne	r3, #0
 800efbc:	eba6 0807 	sub.w	r8, r6, r7
 800efc0:	608b      	str	r3, [r1, #8]
 800efc2:	f1b8 0f00 	cmp.w	r8, #0
 800efc6:	ddea      	ble.n	800ef9e <__sflush_r+0xae>
 800efc8:	4643      	mov	r3, r8
 800efca:	463a      	mov	r2, r7
 800efcc:	6a21      	ldr	r1, [r4, #32]
 800efce:	4628      	mov	r0, r5
 800efd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800efd2:	47b0      	blx	r6
 800efd4:	2800      	cmp	r0, #0
 800efd6:	dc08      	bgt.n	800efea <__sflush_r+0xfa>
 800efd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efe0:	f04f 30ff 	mov.w	r0, #4294967295
 800efe4:	81a3      	strh	r3, [r4, #12]
 800efe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efea:	4407      	add	r7, r0
 800efec:	eba8 0800 	sub.w	r8, r8, r0
 800eff0:	e7e7      	b.n	800efc2 <__sflush_r+0xd2>
 800eff2:	bf00      	nop
 800eff4:	dfbffffe 	.word	0xdfbffffe

0800eff8 <_fflush_r>:
 800eff8:	b538      	push	{r3, r4, r5, lr}
 800effa:	690b      	ldr	r3, [r1, #16]
 800effc:	4605      	mov	r5, r0
 800effe:	460c      	mov	r4, r1
 800f000:	b913      	cbnz	r3, 800f008 <_fflush_r+0x10>
 800f002:	2500      	movs	r5, #0
 800f004:	4628      	mov	r0, r5
 800f006:	bd38      	pop	{r3, r4, r5, pc}
 800f008:	b118      	cbz	r0, 800f012 <_fflush_r+0x1a>
 800f00a:	6a03      	ldr	r3, [r0, #32]
 800f00c:	b90b      	cbnz	r3, 800f012 <_fflush_r+0x1a>
 800f00e:	f7ff fd4f 	bl	800eab0 <__sinit>
 800f012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d0f3      	beq.n	800f002 <_fflush_r+0xa>
 800f01a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f01c:	07d0      	lsls	r0, r2, #31
 800f01e:	d404      	bmi.n	800f02a <_fflush_r+0x32>
 800f020:	0599      	lsls	r1, r3, #22
 800f022:	d402      	bmi.n	800f02a <_fflush_r+0x32>
 800f024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f026:	f7ff fe36 	bl	800ec96 <__retarget_lock_acquire_recursive>
 800f02a:	4628      	mov	r0, r5
 800f02c:	4621      	mov	r1, r4
 800f02e:	f7ff ff5f 	bl	800eef0 <__sflush_r>
 800f032:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f034:	4605      	mov	r5, r0
 800f036:	07da      	lsls	r2, r3, #31
 800f038:	d4e4      	bmi.n	800f004 <_fflush_r+0xc>
 800f03a:	89a3      	ldrh	r3, [r4, #12]
 800f03c:	059b      	lsls	r3, r3, #22
 800f03e:	d4e1      	bmi.n	800f004 <_fflush_r+0xc>
 800f040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f042:	f7ff fe29 	bl	800ec98 <__retarget_lock_release_recursive>
 800f046:	e7dd      	b.n	800f004 <_fflush_r+0xc>

0800f048 <fiprintf>:
 800f048:	b40e      	push	{r1, r2, r3}
 800f04a:	b503      	push	{r0, r1, lr}
 800f04c:	ab03      	add	r3, sp, #12
 800f04e:	4601      	mov	r1, r0
 800f050:	4805      	ldr	r0, [pc, #20]	@ (800f068 <fiprintf+0x20>)
 800f052:	f853 2b04 	ldr.w	r2, [r3], #4
 800f056:	6800      	ldr	r0, [r0, #0]
 800f058:	9301      	str	r3, [sp, #4]
 800f05a:	f000 f847 	bl	800f0ec <_vfiprintf_r>
 800f05e:	b002      	add	sp, #8
 800f060:	f85d eb04 	ldr.w	lr, [sp], #4
 800f064:	b003      	add	sp, #12
 800f066:	4770      	bx	lr
 800f068:	2000002c 	.word	0x2000002c

0800f06c <_sbrk_r>:
 800f06c:	b538      	push	{r3, r4, r5, lr}
 800f06e:	2300      	movs	r3, #0
 800f070:	4d05      	ldr	r5, [pc, #20]	@ (800f088 <_sbrk_r+0x1c>)
 800f072:	4604      	mov	r4, r0
 800f074:	4608      	mov	r0, r1
 800f076:	602b      	str	r3, [r5, #0]
 800f078:	f7f1 ff5e 	bl	8000f38 <_sbrk>
 800f07c:	1c43      	adds	r3, r0, #1
 800f07e:	d102      	bne.n	800f086 <_sbrk_r+0x1a>
 800f080:	682b      	ldr	r3, [r5, #0]
 800f082:	b103      	cbz	r3, 800f086 <_sbrk_r+0x1a>
 800f084:	6023      	str	r3, [r4, #0]
 800f086:	bd38      	pop	{r3, r4, r5, pc}
 800f088:	2000089c 	.word	0x2000089c

0800f08c <abort>:
 800f08c:	2006      	movs	r0, #6
 800f08e:	b508      	push	{r3, lr}
 800f090:	f000 fb92 	bl	800f7b8 <raise>
 800f094:	2001      	movs	r0, #1
 800f096:	f7f1 fed7 	bl	8000e48 <_exit>

0800f09a <__sfputc_r>:
 800f09a:	6893      	ldr	r3, [r2, #8]
 800f09c:	3b01      	subs	r3, #1
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	6093      	str	r3, [r2, #8]
 800f0a2:	b410      	push	{r4}
 800f0a4:	da08      	bge.n	800f0b8 <__sfputc_r+0x1e>
 800f0a6:	6994      	ldr	r4, [r2, #24]
 800f0a8:	42a3      	cmp	r3, r4
 800f0aa:	db01      	blt.n	800f0b0 <__sfputc_r+0x16>
 800f0ac:	290a      	cmp	r1, #10
 800f0ae:	d103      	bne.n	800f0b8 <__sfputc_r+0x1e>
 800f0b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0b4:	f000 bac4 	b.w	800f640 <__swbuf_r>
 800f0b8:	6813      	ldr	r3, [r2, #0]
 800f0ba:	1c58      	adds	r0, r3, #1
 800f0bc:	6010      	str	r0, [r2, #0]
 800f0be:	4608      	mov	r0, r1
 800f0c0:	7019      	strb	r1, [r3, #0]
 800f0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <__sfputs_r>:
 800f0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ca:	4606      	mov	r6, r0
 800f0cc:	460f      	mov	r7, r1
 800f0ce:	4614      	mov	r4, r2
 800f0d0:	18d5      	adds	r5, r2, r3
 800f0d2:	42ac      	cmp	r4, r5
 800f0d4:	d101      	bne.n	800f0da <__sfputs_r+0x12>
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	e007      	b.n	800f0ea <__sfputs_r+0x22>
 800f0da:	463a      	mov	r2, r7
 800f0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f7ff ffda 	bl	800f09a <__sfputc_r>
 800f0e6:	1c43      	adds	r3, r0, #1
 800f0e8:	d1f3      	bne.n	800f0d2 <__sfputs_r+0xa>
 800f0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f0ec <_vfiprintf_r>:
 800f0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f0:	460d      	mov	r5, r1
 800f0f2:	b09d      	sub	sp, #116	@ 0x74
 800f0f4:	4614      	mov	r4, r2
 800f0f6:	4698      	mov	r8, r3
 800f0f8:	4606      	mov	r6, r0
 800f0fa:	b118      	cbz	r0, 800f104 <_vfiprintf_r+0x18>
 800f0fc:	6a03      	ldr	r3, [r0, #32]
 800f0fe:	b90b      	cbnz	r3, 800f104 <_vfiprintf_r+0x18>
 800f100:	f7ff fcd6 	bl	800eab0 <__sinit>
 800f104:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f106:	07d9      	lsls	r1, r3, #31
 800f108:	d405      	bmi.n	800f116 <_vfiprintf_r+0x2a>
 800f10a:	89ab      	ldrh	r3, [r5, #12]
 800f10c:	059a      	lsls	r2, r3, #22
 800f10e:	d402      	bmi.n	800f116 <_vfiprintf_r+0x2a>
 800f110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f112:	f7ff fdc0 	bl	800ec96 <__retarget_lock_acquire_recursive>
 800f116:	89ab      	ldrh	r3, [r5, #12]
 800f118:	071b      	lsls	r3, r3, #28
 800f11a:	d501      	bpl.n	800f120 <_vfiprintf_r+0x34>
 800f11c:	692b      	ldr	r3, [r5, #16]
 800f11e:	b99b      	cbnz	r3, 800f148 <_vfiprintf_r+0x5c>
 800f120:	4629      	mov	r1, r5
 800f122:	4630      	mov	r0, r6
 800f124:	f000 faca 	bl	800f6bc <__swsetup_r>
 800f128:	b170      	cbz	r0, 800f148 <_vfiprintf_r+0x5c>
 800f12a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f12c:	07dc      	lsls	r4, r3, #31
 800f12e:	d504      	bpl.n	800f13a <_vfiprintf_r+0x4e>
 800f130:	f04f 30ff 	mov.w	r0, #4294967295
 800f134:	b01d      	add	sp, #116	@ 0x74
 800f136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13a:	89ab      	ldrh	r3, [r5, #12]
 800f13c:	0598      	lsls	r0, r3, #22
 800f13e:	d4f7      	bmi.n	800f130 <_vfiprintf_r+0x44>
 800f140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f142:	f7ff fda9 	bl	800ec98 <__retarget_lock_release_recursive>
 800f146:	e7f3      	b.n	800f130 <_vfiprintf_r+0x44>
 800f148:	2300      	movs	r3, #0
 800f14a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f14e:	f04f 0901 	mov.w	r9, #1
 800f152:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f308 <_vfiprintf_r+0x21c>
 800f156:	9309      	str	r3, [sp, #36]	@ 0x24
 800f158:	2320      	movs	r3, #32
 800f15a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f15e:	2330      	movs	r3, #48	@ 0x30
 800f160:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f164:	4623      	mov	r3, r4
 800f166:	469a      	mov	sl, r3
 800f168:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f16c:	b10a      	cbz	r2, 800f172 <_vfiprintf_r+0x86>
 800f16e:	2a25      	cmp	r2, #37	@ 0x25
 800f170:	d1f9      	bne.n	800f166 <_vfiprintf_r+0x7a>
 800f172:	ebba 0b04 	subs.w	fp, sl, r4
 800f176:	d00b      	beq.n	800f190 <_vfiprintf_r+0xa4>
 800f178:	465b      	mov	r3, fp
 800f17a:	4622      	mov	r2, r4
 800f17c:	4629      	mov	r1, r5
 800f17e:	4630      	mov	r0, r6
 800f180:	f7ff ffa2 	bl	800f0c8 <__sfputs_r>
 800f184:	3001      	adds	r0, #1
 800f186:	f000 80a7 	beq.w	800f2d8 <_vfiprintf_r+0x1ec>
 800f18a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f18c:	445a      	add	r2, fp
 800f18e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f190:	f89a 3000 	ldrb.w	r3, [sl]
 800f194:	2b00      	cmp	r3, #0
 800f196:	f000 809f 	beq.w	800f2d8 <_vfiprintf_r+0x1ec>
 800f19a:	2300      	movs	r3, #0
 800f19c:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a0:	f10a 0a01 	add.w	sl, sl, #1
 800f1a4:	9304      	str	r3, [sp, #16]
 800f1a6:	9307      	str	r3, [sp, #28]
 800f1a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f1ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800f1ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1b2:	4654      	mov	r4, sl
 800f1b4:	2205      	movs	r2, #5
 800f1b6:	4854      	ldr	r0, [pc, #336]	@ (800f308 <_vfiprintf_r+0x21c>)
 800f1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1bc:	f000 fb18 	bl	800f7f0 <memchr>
 800f1c0:	9a04      	ldr	r2, [sp, #16]
 800f1c2:	b9d8      	cbnz	r0, 800f1fc <_vfiprintf_r+0x110>
 800f1c4:	06d1      	lsls	r1, r2, #27
 800f1c6:	bf44      	itt	mi
 800f1c8:	2320      	movmi	r3, #32
 800f1ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1ce:	0713      	lsls	r3, r2, #28
 800f1d0:	bf44      	itt	mi
 800f1d2:	232b      	movmi	r3, #43	@ 0x2b
 800f1d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1de:	d015      	beq.n	800f20c <_vfiprintf_r+0x120>
 800f1e0:	9a07      	ldr	r2, [sp, #28]
 800f1e2:	4654      	mov	r4, sl
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	f04f 0c0a 	mov.w	ip, #10
 800f1ea:	4621      	mov	r1, r4
 800f1ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1f0:	3b30      	subs	r3, #48	@ 0x30
 800f1f2:	2b09      	cmp	r3, #9
 800f1f4:	d94b      	bls.n	800f28e <_vfiprintf_r+0x1a2>
 800f1f6:	b1b0      	cbz	r0, 800f226 <_vfiprintf_r+0x13a>
 800f1f8:	9207      	str	r2, [sp, #28]
 800f1fa:	e014      	b.n	800f226 <_vfiprintf_r+0x13a>
 800f1fc:	eba0 0308 	sub.w	r3, r0, r8
 800f200:	46a2      	mov	sl, r4
 800f202:	fa09 f303 	lsl.w	r3, r9, r3
 800f206:	4313      	orrs	r3, r2
 800f208:	9304      	str	r3, [sp, #16]
 800f20a:	e7d2      	b.n	800f1b2 <_vfiprintf_r+0xc6>
 800f20c:	9b03      	ldr	r3, [sp, #12]
 800f20e:	1d19      	adds	r1, r3, #4
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	9103      	str	r1, [sp, #12]
 800f216:	bfbb      	ittet	lt
 800f218:	425b      	neglt	r3, r3
 800f21a:	f042 0202 	orrlt.w	r2, r2, #2
 800f21e:	9307      	strge	r3, [sp, #28]
 800f220:	9307      	strlt	r3, [sp, #28]
 800f222:	bfb8      	it	lt
 800f224:	9204      	strlt	r2, [sp, #16]
 800f226:	7823      	ldrb	r3, [r4, #0]
 800f228:	2b2e      	cmp	r3, #46	@ 0x2e
 800f22a:	d10a      	bne.n	800f242 <_vfiprintf_r+0x156>
 800f22c:	7863      	ldrb	r3, [r4, #1]
 800f22e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f230:	d132      	bne.n	800f298 <_vfiprintf_r+0x1ac>
 800f232:	9b03      	ldr	r3, [sp, #12]
 800f234:	3402      	adds	r4, #2
 800f236:	1d1a      	adds	r2, r3, #4
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f23e:	9203      	str	r2, [sp, #12]
 800f240:	9305      	str	r3, [sp, #20]
 800f242:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f318 <_vfiprintf_r+0x22c>
 800f246:	2203      	movs	r2, #3
 800f248:	7821      	ldrb	r1, [r4, #0]
 800f24a:	4650      	mov	r0, sl
 800f24c:	f000 fad0 	bl	800f7f0 <memchr>
 800f250:	b138      	cbz	r0, 800f262 <_vfiprintf_r+0x176>
 800f252:	eba0 000a 	sub.w	r0, r0, sl
 800f256:	2240      	movs	r2, #64	@ 0x40
 800f258:	9b04      	ldr	r3, [sp, #16]
 800f25a:	3401      	adds	r4, #1
 800f25c:	4082      	lsls	r2, r0
 800f25e:	4313      	orrs	r3, r2
 800f260:	9304      	str	r3, [sp, #16]
 800f262:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f266:	2206      	movs	r2, #6
 800f268:	4828      	ldr	r0, [pc, #160]	@ (800f30c <_vfiprintf_r+0x220>)
 800f26a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f26e:	f000 fabf 	bl	800f7f0 <memchr>
 800f272:	2800      	cmp	r0, #0
 800f274:	d03f      	beq.n	800f2f6 <_vfiprintf_r+0x20a>
 800f276:	4b26      	ldr	r3, [pc, #152]	@ (800f310 <_vfiprintf_r+0x224>)
 800f278:	bb1b      	cbnz	r3, 800f2c2 <_vfiprintf_r+0x1d6>
 800f27a:	9b03      	ldr	r3, [sp, #12]
 800f27c:	3307      	adds	r3, #7
 800f27e:	f023 0307 	bic.w	r3, r3, #7
 800f282:	3308      	adds	r3, #8
 800f284:	9303      	str	r3, [sp, #12]
 800f286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f288:	443b      	add	r3, r7
 800f28a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f28c:	e76a      	b.n	800f164 <_vfiprintf_r+0x78>
 800f28e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f292:	460c      	mov	r4, r1
 800f294:	2001      	movs	r0, #1
 800f296:	e7a8      	b.n	800f1ea <_vfiprintf_r+0xfe>
 800f298:	2300      	movs	r3, #0
 800f29a:	3401      	adds	r4, #1
 800f29c:	f04f 0c0a 	mov.w	ip, #10
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	9305      	str	r3, [sp, #20]
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2aa:	3a30      	subs	r2, #48	@ 0x30
 800f2ac:	2a09      	cmp	r2, #9
 800f2ae:	d903      	bls.n	800f2b8 <_vfiprintf_r+0x1cc>
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d0c6      	beq.n	800f242 <_vfiprintf_r+0x156>
 800f2b4:	9105      	str	r1, [sp, #20]
 800f2b6:	e7c4      	b.n	800f242 <_vfiprintf_r+0x156>
 800f2b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2bc:	4604      	mov	r4, r0
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e7f0      	b.n	800f2a4 <_vfiprintf_r+0x1b8>
 800f2c2:	ab03      	add	r3, sp, #12
 800f2c4:	462a      	mov	r2, r5
 800f2c6:	a904      	add	r1, sp, #16
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	4b11      	ldr	r3, [pc, #68]	@ (800f314 <_vfiprintf_r+0x228>)
 800f2ce:	f3af 8000 	nop.w
 800f2d2:	4607      	mov	r7, r0
 800f2d4:	1c78      	adds	r0, r7, #1
 800f2d6:	d1d6      	bne.n	800f286 <_vfiprintf_r+0x19a>
 800f2d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2da:	07d9      	lsls	r1, r3, #31
 800f2dc:	d405      	bmi.n	800f2ea <_vfiprintf_r+0x1fe>
 800f2de:	89ab      	ldrh	r3, [r5, #12]
 800f2e0:	059a      	lsls	r2, r3, #22
 800f2e2:	d402      	bmi.n	800f2ea <_vfiprintf_r+0x1fe>
 800f2e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2e6:	f7ff fcd7 	bl	800ec98 <__retarget_lock_release_recursive>
 800f2ea:	89ab      	ldrh	r3, [r5, #12]
 800f2ec:	065b      	lsls	r3, r3, #25
 800f2ee:	f53f af1f 	bmi.w	800f130 <_vfiprintf_r+0x44>
 800f2f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f2f4:	e71e      	b.n	800f134 <_vfiprintf_r+0x48>
 800f2f6:	ab03      	add	r3, sp, #12
 800f2f8:	462a      	mov	r2, r5
 800f2fa:	a904      	add	r1, sp, #16
 800f2fc:	4630      	mov	r0, r6
 800f2fe:	9300      	str	r3, [sp, #0]
 800f300:	4b04      	ldr	r3, [pc, #16]	@ (800f314 <_vfiprintf_r+0x228>)
 800f302:	f000 f87d 	bl	800f400 <_printf_i>
 800f306:	e7e4      	b.n	800f2d2 <_vfiprintf_r+0x1e6>
 800f308:	0800fdd7 	.word	0x0800fdd7
 800f30c:	0800fde1 	.word	0x0800fde1
 800f310:	00000000 	.word	0x00000000
 800f314:	0800f0c9 	.word	0x0800f0c9
 800f318:	0800fddd 	.word	0x0800fddd

0800f31c <_printf_common>:
 800f31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f320:	4616      	mov	r6, r2
 800f322:	4698      	mov	r8, r3
 800f324:	688a      	ldr	r2, [r1, #8]
 800f326:	4607      	mov	r7, r0
 800f328:	690b      	ldr	r3, [r1, #16]
 800f32a:	460c      	mov	r4, r1
 800f32c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f330:	4293      	cmp	r3, r2
 800f332:	bfb8      	it	lt
 800f334:	4613      	movlt	r3, r2
 800f336:	6033      	str	r3, [r6, #0]
 800f338:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f33c:	b10a      	cbz	r2, 800f342 <_printf_common+0x26>
 800f33e:	3301      	adds	r3, #1
 800f340:	6033      	str	r3, [r6, #0]
 800f342:	6823      	ldr	r3, [r4, #0]
 800f344:	0699      	lsls	r1, r3, #26
 800f346:	bf42      	ittt	mi
 800f348:	6833      	ldrmi	r3, [r6, #0]
 800f34a:	3302      	addmi	r3, #2
 800f34c:	6033      	strmi	r3, [r6, #0]
 800f34e:	6825      	ldr	r5, [r4, #0]
 800f350:	f015 0506 	ands.w	r5, r5, #6
 800f354:	d106      	bne.n	800f364 <_printf_common+0x48>
 800f356:	f104 0a19 	add.w	sl, r4, #25
 800f35a:	68e3      	ldr	r3, [r4, #12]
 800f35c:	6832      	ldr	r2, [r6, #0]
 800f35e:	1a9b      	subs	r3, r3, r2
 800f360:	42ab      	cmp	r3, r5
 800f362:	dc2b      	bgt.n	800f3bc <_printf_common+0xa0>
 800f364:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f368:	6822      	ldr	r2, [r4, #0]
 800f36a:	3b00      	subs	r3, #0
 800f36c:	bf18      	it	ne
 800f36e:	2301      	movne	r3, #1
 800f370:	0692      	lsls	r2, r2, #26
 800f372:	d430      	bmi.n	800f3d6 <_printf_common+0xba>
 800f374:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f378:	4641      	mov	r1, r8
 800f37a:	4638      	mov	r0, r7
 800f37c:	47c8      	blx	r9
 800f37e:	3001      	adds	r0, #1
 800f380:	d023      	beq.n	800f3ca <_printf_common+0xae>
 800f382:	6823      	ldr	r3, [r4, #0]
 800f384:	341a      	adds	r4, #26
 800f386:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f38a:	f003 0306 	and.w	r3, r3, #6
 800f38e:	2b04      	cmp	r3, #4
 800f390:	bf0a      	itet	eq
 800f392:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f396:	2500      	movne	r5, #0
 800f398:	6833      	ldreq	r3, [r6, #0]
 800f39a:	f04f 0600 	mov.w	r6, #0
 800f39e:	bf08      	it	eq
 800f3a0:	1aed      	subeq	r5, r5, r3
 800f3a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f3a6:	bf08      	it	eq
 800f3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	bfc4      	itt	gt
 800f3b0:	1a9b      	subgt	r3, r3, r2
 800f3b2:	18ed      	addgt	r5, r5, r3
 800f3b4:	42b5      	cmp	r5, r6
 800f3b6:	d11a      	bne.n	800f3ee <_printf_common+0xd2>
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	e008      	b.n	800f3ce <_printf_common+0xb2>
 800f3bc:	2301      	movs	r3, #1
 800f3be:	4652      	mov	r2, sl
 800f3c0:	4641      	mov	r1, r8
 800f3c2:	4638      	mov	r0, r7
 800f3c4:	47c8      	blx	r9
 800f3c6:	3001      	adds	r0, #1
 800f3c8:	d103      	bne.n	800f3d2 <_printf_common+0xb6>
 800f3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3d2:	3501      	adds	r5, #1
 800f3d4:	e7c1      	b.n	800f35a <_printf_common+0x3e>
 800f3d6:	18e1      	adds	r1, r4, r3
 800f3d8:	1c5a      	adds	r2, r3, #1
 800f3da:	2030      	movs	r0, #48	@ 0x30
 800f3dc:	3302      	adds	r3, #2
 800f3de:	4422      	add	r2, r4
 800f3e0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f3e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f3e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f3ec:	e7c2      	b.n	800f374 <_printf_common+0x58>
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	4622      	mov	r2, r4
 800f3f2:	4641      	mov	r1, r8
 800f3f4:	4638      	mov	r0, r7
 800f3f6:	47c8      	blx	r9
 800f3f8:	3001      	adds	r0, #1
 800f3fa:	d0e6      	beq.n	800f3ca <_printf_common+0xae>
 800f3fc:	3601      	adds	r6, #1
 800f3fe:	e7d9      	b.n	800f3b4 <_printf_common+0x98>

0800f400 <_printf_i>:
 800f400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f404:	7e0f      	ldrb	r7, [r1, #24]
 800f406:	4691      	mov	r9, r2
 800f408:	4680      	mov	r8, r0
 800f40a:	460c      	mov	r4, r1
 800f40c:	2f78      	cmp	r7, #120	@ 0x78
 800f40e:	469a      	mov	sl, r3
 800f410:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f412:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f416:	d807      	bhi.n	800f428 <_printf_i+0x28>
 800f418:	2f62      	cmp	r7, #98	@ 0x62
 800f41a:	d80a      	bhi.n	800f432 <_printf_i+0x32>
 800f41c:	2f00      	cmp	r7, #0
 800f41e:	f000 80d2 	beq.w	800f5c6 <_printf_i+0x1c6>
 800f422:	2f58      	cmp	r7, #88	@ 0x58
 800f424:	f000 80b9 	beq.w	800f59a <_printf_i+0x19a>
 800f428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f42c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f430:	e03a      	b.n	800f4a8 <_printf_i+0xa8>
 800f432:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f436:	2b15      	cmp	r3, #21
 800f438:	d8f6      	bhi.n	800f428 <_printf_i+0x28>
 800f43a:	a101      	add	r1, pc, #4	@ (adr r1, 800f440 <_printf_i+0x40>)
 800f43c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f440:	0800f499 	.word	0x0800f499
 800f444:	0800f4ad 	.word	0x0800f4ad
 800f448:	0800f429 	.word	0x0800f429
 800f44c:	0800f429 	.word	0x0800f429
 800f450:	0800f429 	.word	0x0800f429
 800f454:	0800f429 	.word	0x0800f429
 800f458:	0800f4ad 	.word	0x0800f4ad
 800f45c:	0800f429 	.word	0x0800f429
 800f460:	0800f429 	.word	0x0800f429
 800f464:	0800f429 	.word	0x0800f429
 800f468:	0800f429 	.word	0x0800f429
 800f46c:	0800f5ad 	.word	0x0800f5ad
 800f470:	0800f4d7 	.word	0x0800f4d7
 800f474:	0800f567 	.word	0x0800f567
 800f478:	0800f429 	.word	0x0800f429
 800f47c:	0800f429 	.word	0x0800f429
 800f480:	0800f5cf 	.word	0x0800f5cf
 800f484:	0800f429 	.word	0x0800f429
 800f488:	0800f4d7 	.word	0x0800f4d7
 800f48c:	0800f429 	.word	0x0800f429
 800f490:	0800f429 	.word	0x0800f429
 800f494:	0800f56f 	.word	0x0800f56f
 800f498:	6833      	ldr	r3, [r6, #0]
 800f49a:	1d1a      	adds	r2, r3, #4
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	6032      	str	r2, [r6, #0]
 800f4a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	e09d      	b.n	800f5e8 <_printf_i+0x1e8>
 800f4ac:	6833      	ldr	r3, [r6, #0]
 800f4ae:	6820      	ldr	r0, [r4, #0]
 800f4b0:	1d19      	adds	r1, r3, #4
 800f4b2:	6031      	str	r1, [r6, #0]
 800f4b4:	0606      	lsls	r6, r0, #24
 800f4b6:	d501      	bpl.n	800f4bc <_printf_i+0xbc>
 800f4b8:	681d      	ldr	r5, [r3, #0]
 800f4ba:	e003      	b.n	800f4c4 <_printf_i+0xc4>
 800f4bc:	0645      	lsls	r5, r0, #25
 800f4be:	d5fb      	bpl.n	800f4b8 <_printf_i+0xb8>
 800f4c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f4c4:	2d00      	cmp	r5, #0
 800f4c6:	da03      	bge.n	800f4d0 <_printf_i+0xd0>
 800f4c8:	232d      	movs	r3, #45	@ 0x2d
 800f4ca:	426d      	negs	r5, r5
 800f4cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4d0:	4859      	ldr	r0, [pc, #356]	@ (800f638 <_printf_i+0x238>)
 800f4d2:	230a      	movs	r3, #10
 800f4d4:	e011      	b.n	800f4fa <_printf_i+0xfa>
 800f4d6:	6821      	ldr	r1, [r4, #0]
 800f4d8:	6833      	ldr	r3, [r6, #0]
 800f4da:	0608      	lsls	r0, r1, #24
 800f4dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f4e0:	d402      	bmi.n	800f4e8 <_printf_i+0xe8>
 800f4e2:	0649      	lsls	r1, r1, #25
 800f4e4:	bf48      	it	mi
 800f4e6:	b2ad      	uxthmi	r5, r5
 800f4e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f4ea:	6033      	str	r3, [r6, #0]
 800f4ec:	4852      	ldr	r0, [pc, #328]	@ (800f638 <_printf_i+0x238>)
 800f4ee:	bf14      	ite	ne
 800f4f0:	230a      	movne	r3, #10
 800f4f2:	2308      	moveq	r3, #8
 800f4f4:	2100      	movs	r1, #0
 800f4f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f4fa:	6866      	ldr	r6, [r4, #4]
 800f4fc:	2e00      	cmp	r6, #0
 800f4fe:	60a6      	str	r6, [r4, #8]
 800f500:	bfa2      	ittt	ge
 800f502:	6821      	ldrge	r1, [r4, #0]
 800f504:	f021 0104 	bicge.w	r1, r1, #4
 800f508:	6021      	strge	r1, [r4, #0]
 800f50a:	b90d      	cbnz	r5, 800f510 <_printf_i+0x110>
 800f50c:	2e00      	cmp	r6, #0
 800f50e:	d04b      	beq.n	800f5a8 <_printf_i+0x1a8>
 800f510:	4616      	mov	r6, r2
 800f512:	fbb5 f1f3 	udiv	r1, r5, r3
 800f516:	fb03 5711 	mls	r7, r3, r1, r5
 800f51a:	5dc7      	ldrb	r7, [r0, r7]
 800f51c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f520:	462f      	mov	r7, r5
 800f522:	460d      	mov	r5, r1
 800f524:	42bb      	cmp	r3, r7
 800f526:	d9f4      	bls.n	800f512 <_printf_i+0x112>
 800f528:	2b08      	cmp	r3, #8
 800f52a:	d10b      	bne.n	800f544 <_printf_i+0x144>
 800f52c:	6823      	ldr	r3, [r4, #0]
 800f52e:	07df      	lsls	r7, r3, #31
 800f530:	d508      	bpl.n	800f544 <_printf_i+0x144>
 800f532:	6923      	ldr	r3, [r4, #16]
 800f534:	6861      	ldr	r1, [r4, #4]
 800f536:	4299      	cmp	r1, r3
 800f538:	bfde      	ittt	le
 800f53a:	2330      	movle	r3, #48	@ 0x30
 800f53c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f540:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f544:	1b92      	subs	r2, r2, r6
 800f546:	6122      	str	r2, [r4, #16]
 800f548:	464b      	mov	r3, r9
 800f54a:	aa03      	add	r2, sp, #12
 800f54c:	4621      	mov	r1, r4
 800f54e:	4640      	mov	r0, r8
 800f550:	f8cd a000 	str.w	sl, [sp]
 800f554:	f7ff fee2 	bl	800f31c <_printf_common>
 800f558:	3001      	adds	r0, #1
 800f55a:	d14a      	bne.n	800f5f2 <_printf_i+0x1f2>
 800f55c:	f04f 30ff 	mov.w	r0, #4294967295
 800f560:	b004      	add	sp, #16
 800f562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f566:	6823      	ldr	r3, [r4, #0]
 800f568:	f043 0320 	orr.w	r3, r3, #32
 800f56c:	6023      	str	r3, [r4, #0]
 800f56e:	2778      	movs	r7, #120	@ 0x78
 800f570:	4832      	ldr	r0, [pc, #200]	@ (800f63c <_printf_i+0x23c>)
 800f572:	6823      	ldr	r3, [r4, #0]
 800f574:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f578:	061f      	lsls	r7, r3, #24
 800f57a:	6831      	ldr	r1, [r6, #0]
 800f57c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f580:	d402      	bmi.n	800f588 <_printf_i+0x188>
 800f582:	065f      	lsls	r7, r3, #25
 800f584:	bf48      	it	mi
 800f586:	b2ad      	uxthmi	r5, r5
 800f588:	6031      	str	r1, [r6, #0]
 800f58a:	07d9      	lsls	r1, r3, #31
 800f58c:	bf44      	itt	mi
 800f58e:	f043 0320 	orrmi.w	r3, r3, #32
 800f592:	6023      	strmi	r3, [r4, #0]
 800f594:	b11d      	cbz	r5, 800f59e <_printf_i+0x19e>
 800f596:	2310      	movs	r3, #16
 800f598:	e7ac      	b.n	800f4f4 <_printf_i+0xf4>
 800f59a:	4827      	ldr	r0, [pc, #156]	@ (800f638 <_printf_i+0x238>)
 800f59c:	e7e9      	b.n	800f572 <_printf_i+0x172>
 800f59e:	6823      	ldr	r3, [r4, #0]
 800f5a0:	f023 0320 	bic.w	r3, r3, #32
 800f5a4:	6023      	str	r3, [r4, #0]
 800f5a6:	e7f6      	b.n	800f596 <_printf_i+0x196>
 800f5a8:	4616      	mov	r6, r2
 800f5aa:	e7bd      	b.n	800f528 <_printf_i+0x128>
 800f5ac:	6833      	ldr	r3, [r6, #0]
 800f5ae:	6825      	ldr	r5, [r4, #0]
 800f5b0:	1d18      	adds	r0, r3, #4
 800f5b2:	6961      	ldr	r1, [r4, #20]
 800f5b4:	6030      	str	r0, [r6, #0]
 800f5b6:	062e      	lsls	r6, r5, #24
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	d501      	bpl.n	800f5c0 <_printf_i+0x1c0>
 800f5bc:	6019      	str	r1, [r3, #0]
 800f5be:	e002      	b.n	800f5c6 <_printf_i+0x1c6>
 800f5c0:	0668      	lsls	r0, r5, #25
 800f5c2:	d5fb      	bpl.n	800f5bc <_printf_i+0x1bc>
 800f5c4:	8019      	strh	r1, [r3, #0]
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	4616      	mov	r6, r2
 800f5ca:	6123      	str	r3, [r4, #16]
 800f5cc:	e7bc      	b.n	800f548 <_printf_i+0x148>
 800f5ce:	6833      	ldr	r3, [r6, #0]
 800f5d0:	2100      	movs	r1, #0
 800f5d2:	1d1a      	adds	r2, r3, #4
 800f5d4:	6032      	str	r2, [r6, #0]
 800f5d6:	681e      	ldr	r6, [r3, #0]
 800f5d8:	6862      	ldr	r2, [r4, #4]
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f000 f908 	bl	800f7f0 <memchr>
 800f5e0:	b108      	cbz	r0, 800f5e6 <_printf_i+0x1e6>
 800f5e2:	1b80      	subs	r0, r0, r6
 800f5e4:	6060      	str	r0, [r4, #4]
 800f5e6:	6863      	ldr	r3, [r4, #4]
 800f5e8:	6123      	str	r3, [r4, #16]
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5f0:	e7aa      	b.n	800f548 <_printf_i+0x148>
 800f5f2:	6923      	ldr	r3, [r4, #16]
 800f5f4:	4632      	mov	r2, r6
 800f5f6:	4649      	mov	r1, r9
 800f5f8:	4640      	mov	r0, r8
 800f5fa:	47d0      	blx	sl
 800f5fc:	3001      	adds	r0, #1
 800f5fe:	d0ad      	beq.n	800f55c <_printf_i+0x15c>
 800f600:	6823      	ldr	r3, [r4, #0]
 800f602:	079b      	lsls	r3, r3, #30
 800f604:	d413      	bmi.n	800f62e <_printf_i+0x22e>
 800f606:	68e0      	ldr	r0, [r4, #12]
 800f608:	9b03      	ldr	r3, [sp, #12]
 800f60a:	4298      	cmp	r0, r3
 800f60c:	bfb8      	it	lt
 800f60e:	4618      	movlt	r0, r3
 800f610:	e7a6      	b.n	800f560 <_printf_i+0x160>
 800f612:	2301      	movs	r3, #1
 800f614:	4632      	mov	r2, r6
 800f616:	4649      	mov	r1, r9
 800f618:	4640      	mov	r0, r8
 800f61a:	47d0      	blx	sl
 800f61c:	3001      	adds	r0, #1
 800f61e:	d09d      	beq.n	800f55c <_printf_i+0x15c>
 800f620:	3501      	adds	r5, #1
 800f622:	68e3      	ldr	r3, [r4, #12]
 800f624:	9903      	ldr	r1, [sp, #12]
 800f626:	1a5b      	subs	r3, r3, r1
 800f628:	42ab      	cmp	r3, r5
 800f62a:	dcf2      	bgt.n	800f612 <_printf_i+0x212>
 800f62c:	e7eb      	b.n	800f606 <_printf_i+0x206>
 800f62e:	2500      	movs	r5, #0
 800f630:	f104 0619 	add.w	r6, r4, #25
 800f634:	e7f5      	b.n	800f622 <_printf_i+0x222>
 800f636:	bf00      	nop
 800f638:	0800fde8 	.word	0x0800fde8
 800f63c:	0800fdf9 	.word	0x0800fdf9

0800f640 <__swbuf_r>:
 800f640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f642:	460e      	mov	r6, r1
 800f644:	4614      	mov	r4, r2
 800f646:	4605      	mov	r5, r0
 800f648:	b118      	cbz	r0, 800f652 <__swbuf_r+0x12>
 800f64a:	6a03      	ldr	r3, [r0, #32]
 800f64c:	b90b      	cbnz	r3, 800f652 <__swbuf_r+0x12>
 800f64e:	f7ff fa2f 	bl	800eab0 <__sinit>
 800f652:	69a3      	ldr	r3, [r4, #24]
 800f654:	60a3      	str	r3, [r4, #8]
 800f656:	89a3      	ldrh	r3, [r4, #12]
 800f658:	071a      	lsls	r2, r3, #28
 800f65a:	d501      	bpl.n	800f660 <__swbuf_r+0x20>
 800f65c:	6923      	ldr	r3, [r4, #16]
 800f65e:	b943      	cbnz	r3, 800f672 <__swbuf_r+0x32>
 800f660:	4621      	mov	r1, r4
 800f662:	4628      	mov	r0, r5
 800f664:	f000 f82a 	bl	800f6bc <__swsetup_r>
 800f668:	b118      	cbz	r0, 800f672 <__swbuf_r+0x32>
 800f66a:	f04f 37ff 	mov.w	r7, #4294967295
 800f66e:	4638      	mov	r0, r7
 800f670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f672:	6823      	ldr	r3, [r4, #0]
 800f674:	b2f6      	uxtb	r6, r6
 800f676:	6922      	ldr	r2, [r4, #16]
 800f678:	4637      	mov	r7, r6
 800f67a:	1a98      	subs	r0, r3, r2
 800f67c:	6963      	ldr	r3, [r4, #20]
 800f67e:	4283      	cmp	r3, r0
 800f680:	dc05      	bgt.n	800f68e <__swbuf_r+0x4e>
 800f682:	4621      	mov	r1, r4
 800f684:	4628      	mov	r0, r5
 800f686:	f7ff fcb7 	bl	800eff8 <_fflush_r>
 800f68a:	2800      	cmp	r0, #0
 800f68c:	d1ed      	bne.n	800f66a <__swbuf_r+0x2a>
 800f68e:	68a3      	ldr	r3, [r4, #8]
 800f690:	3b01      	subs	r3, #1
 800f692:	60a3      	str	r3, [r4, #8]
 800f694:	6823      	ldr	r3, [r4, #0]
 800f696:	1c5a      	adds	r2, r3, #1
 800f698:	6022      	str	r2, [r4, #0]
 800f69a:	701e      	strb	r6, [r3, #0]
 800f69c:	1c43      	adds	r3, r0, #1
 800f69e:	6962      	ldr	r2, [r4, #20]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d004      	beq.n	800f6ae <__swbuf_r+0x6e>
 800f6a4:	89a3      	ldrh	r3, [r4, #12]
 800f6a6:	07db      	lsls	r3, r3, #31
 800f6a8:	d5e1      	bpl.n	800f66e <__swbuf_r+0x2e>
 800f6aa:	2e0a      	cmp	r6, #10
 800f6ac:	d1df      	bne.n	800f66e <__swbuf_r+0x2e>
 800f6ae:	4621      	mov	r1, r4
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	f7ff fca1 	bl	800eff8 <_fflush_r>
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d0d9      	beq.n	800f66e <__swbuf_r+0x2e>
 800f6ba:	e7d6      	b.n	800f66a <__swbuf_r+0x2a>

0800f6bc <__swsetup_r>:
 800f6bc:	b538      	push	{r3, r4, r5, lr}
 800f6be:	4b29      	ldr	r3, [pc, #164]	@ (800f764 <__swsetup_r+0xa8>)
 800f6c0:	4605      	mov	r5, r0
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	6818      	ldr	r0, [r3, #0]
 800f6c6:	b118      	cbz	r0, 800f6d0 <__swsetup_r+0x14>
 800f6c8:	6a03      	ldr	r3, [r0, #32]
 800f6ca:	b90b      	cbnz	r3, 800f6d0 <__swsetup_r+0x14>
 800f6cc:	f7ff f9f0 	bl	800eab0 <__sinit>
 800f6d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6d4:	0719      	lsls	r1, r3, #28
 800f6d6:	d422      	bmi.n	800f71e <__swsetup_r+0x62>
 800f6d8:	06da      	lsls	r2, r3, #27
 800f6da:	d407      	bmi.n	800f6ec <__swsetup_r+0x30>
 800f6dc:	2209      	movs	r2, #9
 800f6de:	602a      	str	r2, [r5, #0]
 800f6e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6e8:	81a3      	strh	r3, [r4, #12]
 800f6ea:	e033      	b.n	800f754 <__swsetup_r+0x98>
 800f6ec:	0758      	lsls	r0, r3, #29
 800f6ee:	d512      	bpl.n	800f716 <__swsetup_r+0x5a>
 800f6f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6f2:	b141      	cbz	r1, 800f706 <__swsetup_r+0x4a>
 800f6f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6f8:	4299      	cmp	r1, r3
 800f6fa:	d002      	beq.n	800f702 <__swsetup_r+0x46>
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	f7ff faf7 	bl	800ecf0 <_free_r>
 800f702:	2300      	movs	r3, #0
 800f704:	6363      	str	r3, [r4, #52]	@ 0x34
 800f706:	89a3      	ldrh	r3, [r4, #12]
 800f708:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f70c:	81a3      	strh	r3, [r4, #12]
 800f70e:	2300      	movs	r3, #0
 800f710:	6063      	str	r3, [r4, #4]
 800f712:	6923      	ldr	r3, [r4, #16]
 800f714:	6023      	str	r3, [r4, #0]
 800f716:	89a3      	ldrh	r3, [r4, #12]
 800f718:	f043 0308 	orr.w	r3, r3, #8
 800f71c:	81a3      	strh	r3, [r4, #12]
 800f71e:	6923      	ldr	r3, [r4, #16]
 800f720:	b94b      	cbnz	r3, 800f736 <__swsetup_r+0x7a>
 800f722:	89a3      	ldrh	r3, [r4, #12]
 800f724:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f72c:	d003      	beq.n	800f736 <__swsetup_r+0x7a>
 800f72e:	4621      	mov	r1, r4
 800f730:	4628      	mov	r0, r5
 800f732:	f000 f890 	bl	800f856 <__smakebuf_r>
 800f736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f73a:	f013 0201 	ands.w	r2, r3, #1
 800f73e:	d00a      	beq.n	800f756 <__swsetup_r+0x9a>
 800f740:	2200      	movs	r2, #0
 800f742:	60a2      	str	r2, [r4, #8]
 800f744:	6962      	ldr	r2, [r4, #20]
 800f746:	4252      	negs	r2, r2
 800f748:	61a2      	str	r2, [r4, #24]
 800f74a:	6922      	ldr	r2, [r4, #16]
 800f74c:	b942      	cbnz	r2, 800f760 <__swsetup_r+0xa4>
 800f74e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f752:	d1c5      	bne.n	800f6e0 <__swsetup_r+0x24>
 800f754:	bd38      	pop	{r3, r4, r5, pc}
 800f756:	0799      	lsls	r1, r3, #30
 800f758:	bf58      	it	pl
 800f75a:	6962      	ldrpl	r2, [r4, #20]
 800f75c:	60a2      	str	r2, [r4, #8]
 800f75e:	e7f4      	b.n	800f74a <__swsetup_r+0x8e>
 800f760:	2000      	movs	r0, #0
 800f762:	e7f7      	b.n	800f754 <__swsetup_r+0x98>
 800f764:	2000002c 	.word	0x2000002c

0800f768 <_raise_r>:
 800f768:	291f      	cmp	r1, #31
 800f76a:	b538      	push	{r3, r4, r5, lr}
 800f76c:	4605      	mov	r5, r0
 800f76e:	460c      	mov	r4, r1
 800f770:	d904      	bls.n	800f77c <_raise_r+0x14>
 800f772:	2316      	movs	r3, #22
 800f774:	6003      	str	r3, [r0, #0]
 800f776:	f04f 30ff 	mov.w	r0, #4294967295
 800f77a:	bd38      	pop	{r3, r4, r5, pc}
 800f77c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f77e:	b112      	cbz	r2, 800f786 <_raise_r+0x1e>
 800f780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f784:	b94b      	cbnz	r3, 800f79a <_raise_r+0x32>
 800f786:	4628      	mov	r0, r5
 800f788:	f000 f830 	bl	800f7ec <_getpid_r>
 800f78c:	4622      	mov	r2, r4
 800f78e:	4601      	mov	r1, r0
 800f790:	4628      	mov	r0, r5
 800f792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f796:	f000 b817 	b.w	800f7c8 <_kill_r>
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	d00a      	beq.n	800f7b4 <_raise_r+0x4c>
 800f79e:	1c59      	adds	r1, r3, #1
 800f7a0:	d103      	bne.n	800f7aa <_raise_r+0x42>
 800f7a2:	2316      	movs	r3, #22
 800f7a4:	6003      	str	r3, [r0, #0]
 800f7a6:	2001      	movs	r0, #1
 800f7a8:	e7e7      	b.n	800f77a <_raise_r+0x12>
 800f7aa:	2100      	movs	r1, #0
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f7b2:	4798      	blx	r3
 800f7b4:	2000      	movs	r0, #0
 800f7b6:	e7e0      	b.n	800f77a <_raise_r+0x12>

0800f7b8 <raise>:
 800f7b8:	4b02      	ldr	r3, [pc, #8]	@ (800f7c4 <raise+0xc>)
 800f7ba:	4601      	mov	r1, r0
 800f7bc:	6818      	ldr	r0, [r3, #0]
 800f7be:	f7ff bfd3 	b.w	800f768 <_raise_r>
 800f7c2:	bf00      	nop
 800f7c4:	2000002c 	.word	0x2000002c

0800f7c8 <_kill_r>:
 800f7c8:	b538      	push	{r3, r4, r5, lr}
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	4d06      	ldr	r5, [pc, #24]	@ (800f7e8 <_kill_r+0x20>)
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	4608      	mov	r0, r1
 800f7d2:	4611      	mov	r1, r2
 800f7d4:	602b      	str	r3, [r5, #0]
 800f7d6:	f7f1 fb27 	bl	8000e28 <_kill>
 800f7da:	1c43      	adds	r3, r0, #1
 800f7dc:	d102      	bne.n	800f7e4 <_kill_r+0x1c>
 800f7de:	682b      	ldr	r3, [r5, #0]
 800f7e0:	b103      	cbz	r3, 800f7e4 <_kill_r+0x1c>
 800f7e2:	6023      	str	r3, [r4, #0]
 800f7e4:	bd38      	pop	{r3, r4, r5, pc}
 800f7e6:	bf00      	nop
 800f7e8:	2000089c 	.word	0x2000089c

0800f7ec <_getpid_r>:
 800f7ec:	f7f1 bb14 	b.w	8000e18 <_getpid>

0800f7f0 <memchr>:
 800f7f0:	b2c9      	uxtb	r1, r1
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	4402      	add	r2, r0
 800f7f6:	b510      	push	{r4, lr}
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	d101      	bne.n	800f802 <memchr+0x12>
 800f7fe:	2000      	movs	r0, #0
 800f800:	e003      	b.n	800f80a <memchr+0x1a>
 800f802:	7804      	ldrb	r4, [r0, #0]
 800f804:	3301      	adds	r3, #1
 800f806:	428c      	cmp	r4, r1
 800f808:	d1f6      	bne.n	800f7f8 <memchr+0x8>
 800f80a:	bd10      	pop	{r4, pc}

0800f80c <__swhatbuf_r>:
 800f80c:	b570      	push	{r4, r5, r6, lr}
 800f80e:	460c      	mov	r4, r1
 800f810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f814:	b096      	sub	sp, #88	@ 0x58
 800f816:	4615      	mov	r5, r2
 800f818:	2900      	cmp	r1, #0
 800f81a:	461e      	mov	r6, r3
 800f81c:	da0c      	bge.n	800f838 <__swhatbuf_r+0x2c>
 800f81e:	89a3      	ldrh	r3, [r4, #12]
 800f820:	2100      	movs	r1, #0
 800f822:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f826:	bf14      	ite	ne
 800f828:	2340      	movne	r3, #64	@ 0x40
 800f82a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f82e:	2000      	movs	r0, #0
 800f830:	6031      	str	r1, [r6, #0]
 800f832:	602b      	str	r3, [r5, #0]
 800f834:	b016      	add	sp, #88	@ 0x58
 800f836:	bd70      	pop	{r4, r5, r6, pc}
 800f838:	466a      	mov	r2, sp
 800f83a:	f000 f849 	bl	800f8d0 <_fstat_r>
 800f83e:	2800      	cmp	r0, #0
 800f840:	dbed      	blt.n	800f81e <__swhatbuf_r+0x12>
 800f842:	9901      	ldr	r1, [sp, #4]
 800f844:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f848:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f84c:	4259      	negs	r1, r3
 800f84e:	4159      	adcs	r1, r3
 800f850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f854:	e7eb      	b.n	800f82e <__swhatbuf_r+0x22>

0800f856 <__smakebuf_r>:
 800f856:	898b      	ldrh	r3, [r1, #12]
 800f858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f85a:	079d      	lsls	r5, r3, #30
 800f85c:	4606      	mov	r6, r0
 800f85e:	460c      	mov	r4, r1
 800f860:	d507      	bpl.n	800f872 <__smakebuf_r+0x1c>
 800f862:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f866:	6023      	str	r3, [r4, #0]
 800f868:	6123      	str	r3, [r4, #16]
 800f86a:	2301      	movs	r3, #1
 800f86c:	6163      	str	r3, [r4, #20]
 800f86e:	b003      	add	sp, #12
 800f870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f872:	ab01      	add	r3, sp, #4
 800f874:	466a      	mov	r2, sp
 800f876:	f7ff ffc9 	bl	800f80c <__swhatbuf_r>
 800f87a:	9f00      	ldr	r7, [sp, #0]
 800f87c:	4605      	mov	r5, r0
 800f87e:	4630      	mov	r0, r6
 800f880:	4639      	mov	r1, r7
 800f882:	f7ff faa9 	bl	800edd8 <_malloc_r>
 800f886:	b948      	cbnz	r0, 800f89c <__smakebuf_r+0x46>
 800f888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f88c:	059a      	lsls	r2, r3, #22
 800f88e:	d4ee      	bmi.n	800f86e <__smakebuf_r+0x18>
 800f890:	f023 0303 	bic.w	r3, r3, #3
 800f894:	f043 0302 	orr.w	r3, r3, #2
 800f898:	81a3      	strh	r3, [r4, #12]
 800f89a:	e7e2      	b.n	800f862 <__smakebuf_r+0xc>
 800f89c:	89a3      	ldrh	r3, [r4, #12]
 800f89e:	6020      	str	r0, [r4, #0]
 800f8a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8a4:	81a3      	strh	r3, [r4, #12]
 800f8a6:	9b01      	ldr	r3, [sp, #4]
 800f8a8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f8ac:	b15b      	cbz	r3, 800f8c6 <__smakebuf_r+0x70>
 800f8ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8b2:	4630      	mov	r0, r6
 800f8b4:	f000 f81e 	bl	800f8f4 <_isatty_r>
 800f8b8:	b128      	cbz	r0, 800f8c6 <__smakebuf_r+0x70>
 800f8ba:	89a3      	ldrh	r3, [r4, #12]
 800f8bc:	f023 0303 	bic.w	r3, r3, #3
 800f8c0:	f043 0301 	orr.w	r3, r3, #1
 800f8c4:	81a3      	strh	r3, [r4, #12]
 800f8c6:	89a3      	ldrh	r3, [r4, #12]
 800f8c8:	431d      	orrs	r5, r3
 800f8ca:	81a5      	strh	r5, [r4, #12]
 800f8cc:	e7cf      	b.n	800f86e <__smakebuf_r+0x18>
	...

0800f8d0 <_fstat_r>:
 800f8d0:	b538      	push	{r3, r4, r5, lr}
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	4d06      	ldr	r5, [pc, #24]	@ (800f8f0 <_fstat_r+0x20>)
 800f8d6:	4604      	mov	r4, r0
 800f8d8:	4608      	mov	r0, r1
 800f8da:	4611      	mov	r1, r2
 800f8dc:	602b      	str	r3, [r5, #0]
 800f8de:	f7f1 fb03 	bl	8000ee8 <_fstat>
 800f8e2:	1c43      	adds	r3, r0, #1
 800f8e4:	d102      	bne.n	800f8ec <_fstat_r+0x1c>
 800f8e6:	682b      	ldr	r3, [r5, #0]
 800f8e8:	b103      	cbz	r3, 800f8ec <_fstat_r+0x1c>
 800f8ea:	6023      	str	r3, [r4, #0]
 800f8ec:	bd38      	pop	{r3, r4, r5, pc}
 800f8ee:	bf00      	nop
 800f8f0:	2000089c 	.word	0x2000089c

0800f8f4 <_isatty_r>:
 800f8f4:	b538      	push	{r3, r4, r5, lr}
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	4d05      	ldr	r5, [pc, #20]	@ (800f910 <_isatty_r+0x1c>)
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	4608      	mov	r0, r1
 800f8fe:	602b      	str	r3, [r5, #0]
 800f900:	f7f1 fb02 	bl	8000f08 <_isatty>
 800f904:	1c43      	adds	r3, r0, #1
 800f906:	d102      	bne.n	800f90e <_isatty_r+0x1a>
 800f908:	682b      	ldr	r3, [r5, #0]
 800f90a:	b103      	cbz	r3, 800f90e <_isatty_r+0x1a>
 800f90c:	6023      	str	r3, [r4, #0]
 800f90e:	bd38      	pop	{r3, r4, r5, pc}
 800f910:	2000089c 	.word	0x2000089c

0800f914 <_init>:
 800f914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f916:	bf00      	nop
 800f918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f91a:	bc08      	pop	{r3}
 800f91c:	469e      	mov	lr, r3
 800f91e:	4770      	bx	lr

0800f920 <_fini>:
 800f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f922:	bf00      	nop
 800f924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f926:	bc08      	pop	{r3}
 800f928:	469e      	mov	lr, r3
 800f92a:	4770      	bx	lr
